create database Day_and_Ross_PandC_DEV_DB collate SQL_Latin1_General_CP1_CI_AS
go

grant connect on database :: Day_and_Ross_PandC_DEV_DB to ##MS_JobAccount##
go

grant connect on database :: Day_and_Ross_PandC_DEV_DB to ##MS_JobsResourceManager##
go

grant connect on database :: Day_and_Ross_PandC_DEV_DB to dbo
go

grant connect on database :: Day_and_Ross_PandC_DEV_DB to job_credential
go

grant create function, create procedure, create table, create type, create view, view database state on database :: Day_and_Ross_PandC_DEV_DB to jobs_admin
go

grant alter, alter any application role, alter any assembly, alter any asymmetric key, alter any certificate, alter any contract, alter any database audit, alter any database ddl trigger, alter any database event notification, alter any dataspace, alter any external data source, alter any external file format, alter any fulltext catalog, alter any mask, alter any message type, alter any remote service binding, alter any role, alter any route, alter any schema, alter any security policy, alter any service, alter any symmetric key, alter any user, authenticate, backup database, backup log, checkpoint, connect, connect replication, control, create aggregate, create assembly, create asymmetric key, create certificate, create contract, create database ddl event notification, create default, create fulltext catalog, create function, create message type, create procedure, create queue, create remote service binding, create role, create route, create rule, create schema, create service, create symmetric key, create synonym, create table, create type, create view, create xml schema collection, delete, execute, insert, references, select, showplan, subscribe query notifications, take ownership, unmask, update, view any column encryption key definition, view any column master key definition, view database state, view definition on database :: Day_and_Ross_PandC_DEV_DB to pandcapp
go

create type AccountTableType as table
(
	AccountNumber nvarchar(50) not null,
	AccountName nvarchar(100) not null,
	AddressLine1 nvarchar(100) not null,
	AddressLine2 nvarchar(100),
	CityID bigint not null,
	PostalCode nvarchar(10) not null,
	Phone nvarchar(100),
	ContactName nvarchar(100),
	ContactTitle nvarchar(100),
	Email nvarchar(100),
	Website nvarchar(100)
)
go

create type AccountTreeTableType as table
(
	AccountID bigint not null,
	ParentAccountNumber nvarchar(50)
)
go

create type BasingPointTableType as table
(
	BasingPointName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null
)
go

create type BrokerContractCostTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	TerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	Cost nvarchar(max) not null
)
go

create type BrokerContractCostWeightBreakLevelTableType as table
(
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null
)
go

create type CityTableType as table
(
	CityName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null
)
go

create type CostWeightBreakLevelTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null
)
go

create type CostWeightBreakLevelTableType_Create as table
(
	ServiceOfferingID bigint not null,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null
)
go

create type CostWeightBreakLevelTableType_ID as table
(
	WeightBreakLevelID bigint not null,
	ServiceOfferingID bigint not null
)
go

create type CostWeightBreakLevelTableType_Update as table
(
	WeightBreakLevelID bigint not null,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null,
	IsActive bit not null
)
go

create type CountryTableType as table
(
	CountryName nvarchar(50) not null,
	CountryCode nvarchar(2) not null
)
go

create type CurrencyExchangeTableType as table
(
	CADtoUSD numeric(19,6) not null,
	USDtoCAD numeric(19,6) not null
)
go

create type CurrencyTableType as table
(
	CurrencyName nvarchar(50) not null,
	CurrencyCode nvarchar(3) not null
)
go

create type DockRouteTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	SeqNum int not null,
	LegOriginTerminalCode nvarchar(3) not null,
	LegDestinationTerminalCode nvarchar(3) not null
)
go

create type EquipmentTypeTableType as table
(
	EquipmentTypeName nvarchar(50) not null,
	EquipmentTypeCode nvarchar(2) not null
)
go

create type FreightClassTableType as table
(
	FreightClassName nvarchar(50) not null
)
go

create type IDTableType as table
(
	ID bigint not null
)
go

create type IDValueTableType as table
(
	ID bigint not null,
	Value nvarchar(max)
)
go

create type LaneCostTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	IsHeadhaul bit not null,
	MinimumCost decimal(19,6) not null,
	Cost nvarchar(max) not null
)
go

create type LaneCostTableType_Create as table
(
	OriginTerminalID bigint not null,
	DestinationTerminalID bigint not null,
	ServiceLevelID bigint not null,
	IsHeadhaul bit not null,
	MinimumCost decimal(19,6) not null,
	Cost nvarchar(max) not null
)
go

create type LaneCostTableType_Update as table
(
	LaneCostID bigint not null,
	MinimumCost decimal(19,6) not null,
	Cost nvarchar(max) not null
)
go

create type LaneRouteTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	SeqNum int not null,
	LegOriginTerminalCode nvarchar(3) not null,
	LegDestinationTerminalCode nvarchar(3) not null,
	LegServiceModeCode nvarchar not null
)
go

create type LaneTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	IsHeadhaul bit not null
)
go

create type LaneTableType_Update as table
(
	LaneID bigint not null,
	IsHeadhaul bit not null,
	IsActive bit not null,
	IsInactiveViewable bit not null
)
go

create type LanguageTableType as table
(
	LanguageName nvarchar(50) not null,
	LanguageCode nvarchar(2) not null
)
go

create type LegCostTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	ServiceModeCode nvarchar not null,
	Cost nvarchar(max) not null
)
go

create type LegCostTableType_Create as table
(
	OriginTerminalID bigint not null,
	DestinationTerminalID bigint not null,
	ServiceLevelID bigint not null,
	ServiceModeID bigint not null,
	IsHeadhaul bit not null,
	Cost nvarchar(max) not null
)
go

create type LegCostTableType_Update as table
(
	LegCostID bigint not null,
	Cost nvarchar(max) not null
)
go

create type PersonaTableType as table
(
	PersonaName nvarchar(50) not null
)
go

create type PostalCodeTableType as table
(
	PostalCodeName nvarchar(10) not null,
	ServicePointName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null
)
go

create type ProvinceTableType as table
(
	ProvinceName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null,
	RegionCode nvarchar(4) not null
)
go

create type RateBaseTableType as table
(
	RateBaseName nvarchar(50) not null
)
go

create type RegionTableType as table
(
	RegionName nvarchar(50) not null,
	RegionCode nvarchar(4) not null,
	CountryCode nvarchar(2) not null
)
go

create type RequestSectionLanePointTableType as table
(
	ProvinceID bigint,
	ProvinceCode nvarchar(2),
	RegionID bigint,
	RegionCode nvarchar(4),
	CountryID bigint,
	CountryCode nvarchar(2),
	TerminalID bigint,
	TerminalCode nvarchar(3),
	ZoneID bigint,
	ZoneName nvarchar(50),
	BasingPointID bigint,
	BasingPointName nvarchar(50),
	ServicePointID bigint,
	ServicePointName nvarchar(50),
	PostalCodeID bigint,
	PostalCodeName nvarchar(10),
	PointCode nvarchar(50)
)
go

create type RequestSectionLanePointTypeTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	IsDensityPricing bit not null,
	RequestSectionLanePointTypeName nvarchar(50) not null,
	LocationHierarchy int not null,
	IsGroupType bit not null,
	IsPointType bit not null
)
go

create type RequestSectionLanePricingPointTableType as table
(
	RequestSectionLanePricingPointID bigint,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLaneID bigint not null,
	PricingPointNumber nvarchar(32) not null,
	OriginPostalCodeID bigint,
	OriginPostalCodeName nvarchar(10),
	DestinationPostalCodeID bigint,
	DestinationPostalCodeName nvarchar(10),
	PricingPointHashCode varbinary(8000) not null,
	Cost nvarchar(max),
	DrRate nvarchar(max) not null,
	FakRate nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	SplitsAll nvarchar(max) not null,
	SplitsAllUsagePercentage decimal(19,6) not null,
	PickupCount int,
	DeliveryCount int,
	DockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null
)
go

create type RequestSectionLanePricingPointTableType_Create as table
(
	RequestSectionLaneID bigint not null,
	OriginPostalCodeID bigint,
	DestinationPostalCodeID bigint
)
go

create type RequestSectionLanePricingPointTableType_Create_Ext as table
(
	RequestSectionLaneID bigint not null,
	OriginPostalCodeID bigint,
	DestinationPostalCodeID bigint,
	DrRate nvarchar(max) not null,
	FakRate nvarchar(max) not null
)
go

create type RequestSectionLaneTableType as table
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionID bigint not null,
	LaneNumber nvarchar(32) not null,
	IsPublished bit not null,
	IsEdited bit not null,
	IsDuplicate bit not null,
	IsBetween bit not null,
	IsLaneGroup bit not null,
	OriginProvinceID bigint,
	OriginProvinceCode nvarchar(2),
	OriginRegionID bigint,
	OriginRegionCode nvarchar(4),
	OriginCountryID bigint,
	OriginCountryCode nvarchar(2),
	OriginTerminalID bigint,
	OriginTerminalCode nvarchar(3),
	OriginZoneID bigint,
	OriginZoneName nvarchar(50),
	OriginBasingPointID bigint,
	OriginBasingPointName nvarchar(50),
	OriginServicePointID bigint,
	OriginServicePointName nvarchar(50),
	OriginPostalCodeID bigint,
	OriginPostalCodeName nvarchar(10),
	OriginPointTypeID bigint not null,
	OriginPointTypeName nvarchar(50) not null,
	OriginCode nvarchar(50) not null,
	DestinationProvinceID bigint,
	DestinationProvinceCode nvarchar(2),
	DestinationRegionID bigint,
	DestinationRegionCode nvarchar(4),
	DestinationCountryID bigint,
	DestinationCountryCode nvarchar(2),
	DestinationTerminalID bigint,
	DestinationTerminalCode nvarchar(3),
	DestinationZoneID bigint,
	DestinationZoneName nvarchar(50),
	DestinationBasingPointID bigint,
	DestinationBasingPointName nvarchar(50),
	DestinationServicePointID bigint,
	DestinationServicePointName nvarchar(50),
	DestinationPostalCodeID bigint,
	DestinationPostalCodeName nvarchar(10),
	DestinationPointTypeID bigint not null,
	DestinationPointTypeName nvarchar(50) not null,
	DestinationCode nvarchar(50) not null,
	LaneHashCode varbinary(8000) not null,
	BasingPointHashCode varbinary(8000),
	Cost nvarchar(max),
	DoNotMeetCommitment bit not null,
	Commitment nvarchar(max),
	CustomerRate nvarchar(max) not null,
	CustomerDiscount nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	PartnerRate nvarchar(max) not null,
	PartnerDiscount nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	PickupCount int,
	DeliveryCount int,
	DockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	RequestSectionLaneID bigint,
	NewRequestSectionLaneID bigint
)
go

create type RequestSectionTableType_Pair as table
(
	SourceRequestSectionID bigint not null,
	DestinationRequestSectionID bigint not null
)
go

create type RequestStatusTableType as table
(
	RequestID bigint not null,
	SalesRepresentativeID bigint not null,
	PricingAnalystID bigint,
	CurrentEditorID bigint not null,
	RequestStatusTypeName nvarchar(50) not null
)
go

create type RequestStatusTypeTableType as table
(
	RequestStatusTypeName nvarchar(50) not null,
	NextRequestStatusType nvarchar(max),
	AssignedPersona nvarchar(50),
	Editor nvarchar(50),
	QueuePersonas nvarchar(max),
	IsSecondary bit,
	IsFinal bit
)
go

create type RequestTypeTableType as table
(
	RequestTypeName nvarchar(50) not null,
	ApplyToCustomerUnderReview bit not null,
	ApplyToRevision bit not null,
	AllowSalesCommitment bit not null
)
go

create type ServiceLevelTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	ServiceLevelName nvarchar(50) not null,
	ServiceLevelCode nvarchar(3) not null,
	PricingType nvarchar(50) not null
)
go

create type ServiceModeTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	ServiceModeName nvarchar(50) not null,
	ServiceModeCode nvarchar not null
)
go

create type ServicePointTableType as table
(
	ServicePointName nvarchar(50) not null,
	BasingPointName nvarchar(50),
	ProvinceCode nvarchar(2)
)
go

create type SpeedSheetTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	Margin numeric(19,6) not null,
	MaxDensity numeric(19,6) not null,
	MinDensity numeric(19,6) not null
)
go

create type SubServiceLevelTableType as table
(
	ServiceLevelID bigint not null,
	SubServiceLevelName nvarchar(50) not null,
	SubServiceLevelCode nvarchar(2) not null
)
go

create type sys.TT_AccountTableType_5E01903C as table
(
	AccountNumber nvarchar(50) not null,
	AccountName nvarchar(100) not null,
	AddressLine1 nvarchar(100) not null,
	AddressLine2 nvarchar(100),
	CityID bigint not null,
	PostalCode nvarchar(10) not null,
	Phone nvarchar(100),
	ContactName nvarchar(100),
	ContactTitle nvarchar(100),
	Email nvarchar(100),
	Website nvarchar(100)
)
go

create type sys.TT_AccountTreeTableType_116B5A52 as table
(
	AccountID bigint not null,
	ParentAccountNumber nvarchar(50)
)
go

create type sys.TT_BasingPointTableType_5EF5B475 as table
(
	BasingPointName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null
)
go

create type sys.TT_BrokerContractCostTableType_214BF109 as table
(
	ServiceOfferingName nvarchar(50) not null,
	TerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	Cost nvarchar(max) not null
)
go

create type sys.TT_BrokerContractCostWeightBreakLevelTableType_5DB6AC22 as table
(
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null
)
go

create type sys.TT_CityTableType_22401542 as table
(
	CityName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null
)
go

create type sys.TT_CostWeightBreakLevelTableType_3612CF1C as table
(
	ServiceOfferingName nvarchar(50) not null,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null
)
go

create type sys.TT_CostWeightBreakLevelTableType_Create_1AF4C48C as table
(
	ServiceOfferingID bigint not null,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null
)
go

create type sys.TT_CostWeightBreakLevelTableType_ID_1447C6FD as table
(
	WeightBreakLevelID bigint not null,
	ServiceOfferingID bigint not null
)
go

create type sys.TT_CostWeightBreakLevelTableType_Update_26667738 as table
(
	WeightBreakLevelID bigint not null,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null,
	IsActive bit not null
)
go

create type sys.TT_CountryTableType_2334397B as table
(
	CountryName nvarchar(50) not null,
	CountryCode nvarchar(2) not null
)
go

create type sys.TT_CurrencyExchangeTableType_255C790F as table
(
	CADtoUSD numeric(19,6) not null,
	USDtoCAD numeric(19,6) not null
)
go

create type sys.TT_CurrencyTableType_5E55CAA0 as table
(
	CurrencyName nvarchar(50) not null,
	CurrencyCode nvarchar(3) not null
)
go

create type sys.TT_DockRouteTableType_24285DB4 as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	SeqNum int not null,
	LegOriginTerminalCode nvarchar(3) not null,
	LegDestinationTerminalCode nvarchar(3) not null
)
go

create type sys.TT_EquipmentTypeTableType_2F7BAB7D as table
(
	EquipmentTypeName nvarchar(50) not null,
	EquipmentTypeCode nvarchar(2) not null
)
go

create type sys.TT_FreightClassTableType_3AD78439 as table
(
	FreightClassName nvarchar(50) not null
)
go

create type sys.TT_IDTableType_4AA4A305 as table
(
	ID bigint not null
)
go

create type sys.TT_IDValueTableType_55380B68 as table
(
	ID bigint not null,
	Value nvarchar(max)
)
go

create type sys.TT_LaneCostTableType_409A7F30 as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	IsHeadhaul bit not null,
	MinimumCost decimal(19,6) not null,
	Cost nvarchar(max) not null
)
go

create type sys.TT_LaneCostTableType_Create_16300F6F as table
(
	OriginTerminalID bigint not null,
	DestinationTerminalID bigint not null,
	ServiceLevelID bigint not null,
	IsHeadhaul bit not null,
	MinimumCost decimal(19,6) not null,
	Cost nvarchar(max) not null
)
go

create type sys.TT_LaneCostTableType_Update_172433A8 as table
(
	LaneCostID bigint not null,
	MinimumCost decimal(19,6) not null,
	Cost nvarchar(max) not null
)
go

create type sys.TT_LaneRouteTableType_4B422AD5 as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	SeqNum int not null,
	LegOriginTerminalCode nvarchar(3) not null,
	LegDestinationTerminalCode nvarchar(3) not null,
	LegServiceModeCode nvarchar not null
)
go

create type sys.TT_LaneTableType_4376EBDB as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	IsHeadhaul bit not null
)
go

create type sys.TT_LaneTableType_Update_09CA388A as table
(
	LaneID bigint not null,
	IsHeadhaul bit not null,
	IsActive bit not null,
	IsInactiveViewable bit not null
)
go

create type sys.TT_LanguageTableType_603E1312 as table
(
	LanguageName nvarchar(50) not null,
	LanguageCode nvarchar(2) not null
)
go

create type sys.TT_LegCostTableType_4F12BBB9 as table
(
	ServiceOfferingName nvarchar(50) not null,
	OriginTerminalCode nvarchar(3) not null,
	DestinationTerminalCode nvarchar(3) not null,
	ServiceLevelCode nvarchar(2) not null,
	ServiceModeCode nvarchar not null,
	Cost nvarchar(max) not null
)
go

create type sys.TT_LegCostTableType_Create_0ABE5CC3 as table
(
	OriginTerminalID bigint not null,
	DestinationTerminalID bigint not null,
	ServiceLevelID bigint not null,
	ServiceModeID bigint not null,
	IsHeadhaul bit not null,
	Cost nvarchar(max) not null
)
go

create type sys.TT_LegCostTableType_Update_0BB280FC as table
(
	LegCostID bigint not null,
	Cost nvarchar(max) not null
)
go

create type sys.TT_PersonaTableType_6617B350 as table
(
	PersonaName nvarchar(50) not null
)
go

create type sys.TT_PostalCodeTableType_6696D63D as table
(
	PostalCodeName nvarchar(10) not null,
	ServicePointName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null
)
go

create type sys.TT_ProvinceTableType_5FE9D8AE as table
(
	ProvinceName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null,
	RegionCode nvarchar(4) not null
)
go

create type sys.TT_RateBaseTableType_3163F3EF as table
(
	RateBaseName nvarchar(50) not null
)
go

create type sys.TT_RegionTableType_60DDFCE7 as table
(
	RegionName nvarchar(50) not null,
	RegionCode nvarchar(4) not null,
	CountryCode nvarchar(2) not null
)
go

create type sys.TT_RequestSectionLanePointTableType_116C25A9 as table
(
	ProvinceID bigint,
	ProvinceCode nvarchar(2),
	RegionID bigint,
	RegionCode nvarchar(4),
	CountryID bigint,
	CountryCode nvarchar(2),
	TerminalID bigint,
	TerminalCode nvarchar(3),
	ZoneID bigint,
	ZoneName nvarchar(50),
	BasingPointID bigint,
	BasingPointName nvarchar(50),
	ServicePointID bigint,
	ServicePointName nvarchar(50),
	PostalCodeID bigint,
	PostalCodeName nvarchar(10),
	PointCode nvarchar(50)
)
go

create type sys.TT_RequestSectionLanePointTypeTableType_564B5FDB as table
(
	ServiceOfferingName nvarchar(50) not null,
	IsDensityPricing bit not null,
	RequestSectionLanePointTypeName nvarchar(50) not null,
	LocationHierarchy int not null,
	IsGroupType bit not null,
	IsPointType bit not null
)
go

create type sys.TT_RequestSectionLanePricingPointTableType_059B4BA1 as table
(
	RequestSectionLanePricingPointID bigint,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLaneID bigint not null,
	PricingPointNumber nvarchar(32) not null,
	OriginPostalCodeID bigint,
	OriginPostalCodeName nvarchar(10),
	DestinationPostalCodeID bigint,
	DestinationPostalCodeName nvarchar(10),
	PricingPointHashCode varbinary(8000) not null,
	Cost nvarchar(max),
	DrRate nvarchar(max) not null,
	FakRate nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	SplitsAll nvarchar(max) not null,
	SplitsAllUsagePercentage decimal(19,6) not null,
	PickupCount int,
	DeliveryCount int,
	DockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null
)
go

create type sys.TT_RequestSectionLanePricingPointTableType_Create_5ADB0ACE as table
(
	RequestSectionLaneID bigint not null,
	OriginPostalCodeID bigint,
	DestinationPostalCodeID bigint
)
go

create type sys.TT_RequestSectionLanePricingPointTableType_Create_Ext_47DE104A as table
(
	RequestSectionLaneID bigint not null,
	OriginPostalCodeID bigint,
	DestinationPostalCodeID bigint,
	DrRate nvarchar(max) not null,
	FakRate nvarchar(max) not null
)
go

create type sys.TT_RequestSectionLaneTableType_00026DDC as table
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionID bigint not null,
	LaneNumber nvarchar(32) not null,
	IsPublished bit not null,
	IsEdited bit not null,
	IsDuplicate bit not null,
	IsBetween bit not null,
	IsLaneGroup bit not null,
	OriginProvinceID bigint,
	OriginProvinceCode nvarchar(2),
	OriginRegionID bigint,
	OriginRegionCode nvarchar(4),
	OriginCountryID bigint,
	OriginCountryCode nvarchar(2),
	OriginTerminalID bigint,
	OriginTerminalCode nvarchar(3),
	OriginZoneID bigint,
	OriginZoneName nvarchar(50),
	OriginBasingPointID bigint,
	OriginBasingPointName nvarchar(50),
	OriginServicePointID bigint,
	OriginServicePointName nvarchar(50),
	OriginPostalCodeID bigint,
	OriginPostalCodeName nvarchar(10),
	OriginPointTypeID bigint not null,
	OriginPointTypeName nvarchar(50) not null,
	OriginCode nvarchar(50) not null,
	DestinationProvinceID bigint,
	DestinationProvinceCode nvarchar(2),
	DestinationRegionID bigint,
	DestinationRegionCode nvarchar(4),
	DestinationCountryID bigint,
	DestinationCountryCode nvarchar(2),
	DestinationTerminalID bigint,
	DestinationTerminalCode nvarchar(3),
	DestinationZoneID bigint,
	DestinationZoneName nvarchar(50),
	DestinationBasingPointID bigint,
	DestinationBasingPointName nvarchar(50),
	DestinationServicePointID bigint,
	DestinationServicePointName nvarchar(50),
	DestinationPostalCodeID bigint,
	DestinationPostalCodeName nvarchar(10),
	DestinationPointTypeID bigint not null,
	DestinationPointTypeName nvarchar(50) not null,
	DestinationCode nvarchar(50) not null,
	LaneHashCode varbinary(8000) not null,
	BasingPointHashCode varbinary(8000),
	Cost nvarchar(max),
	DoNotMeetCommitment bit not null,
	Commitment nvarchar(max),
	CustomerRate nvarchar(max) not null,
	CustomerDiscount nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	PartnerRate nvarchar(max) not null,
	PartnerDiscount nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	PickupCount int,
	DeliveryCount int,
	DockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	RequestSectionLaneID bigint,
	NewRequestSectionLaneID bigint
)
go

create type sys.TT_RequestSectionTableType_Pair_63EF73BC as table
(
	SourceRequestSectionID bigint not null,
	DestinationRequestSectionID bigint not null
)
go

create type sys.TT_RequestStatusTableType_67EAED29 as table
(
	RequestID bigint not null,
	SalesRepresentativeID bigint not null,
	PricingAnalystID bigint,
	CurrentEditorID bigint not null,
	RequestStatusTypeName nvarchar(50) not null
)
go

create type sys.TT_RequestStatusTypeTableType_76390C80 as table
(
	RequestStatusTypeName nvarchar(50) not null,
	NextRequestStatusType nvarchar(max),
	AssignedPersona nvarchar(50),
	Editor nvarchar(50),
	QueuePersonas nvarchar(max),
	IsSecondary bit,
	IsFinal bit
)
go

create type sys.TT_RequestTypeTableType_3A2F0F71 as table
(
	RequestTypeName nvarchar(50) not null,
	ApplyToCustomerUnderReview bit not null,
	ApplyToRevision bit not null,
	AllowSalesCommitment bit not null
)
go

create type sys.TT_ServiceLevelTableType_52069902 as table
(
	ServiceOfferingName nvarchar(50) not null,
	ServiceLevelName nvarchar(50) not null,
	ServiceLevelCode nvarchar(3) not null,
	PricingType nvarchar(50) not null
)
go

create type sys.TT_ServiceModeTableType_28ED12D1 as table
(
	ServiceOfferingName nvarchar(50) not null,
	ServiceModeName nvarchar(50) not null,
	ServiceModeCode nvarchar not null
)
go

create type sys.TT_ServicePointTableType_64AE8DCB as table
(
	ServicePointName nvarchar(50) not null,
	BasingPointName nvarchar(50),
	ProvinceCode nvarchar(2)
)
go

create type sys.TT_SpeedSheetTableType_2374309D as table
(
	ServiceOfferingName nvarchar(50) not null,
	Margin numeric(19,6) not null,
	MaxDensity numeric(19,6) not null,
	MinDensity numeric(19,6) not null
)
go

create type sys.TT_SubServiceLevelTableType_334C3C61 as table
(
	ServiceLevelID bigint not null,
	SubServiceLevelName nvarchar(50) not null,
	SubServiceLevelCode nvarchar(2) not null
)
go

create type sys.TT_TerminalCostTableType_29E1370A as table
(
	ServiceOfferingName nvarchar(50) not null,
	TerminalCode nvarchar(3) not null,
	Cost nvarchar(max) not null,
	IsIntraRegionMovementEnabled bit not null,
	IntraRegionMovementFactor decimal(19,6) not null
)
go

create type sys.TT_TerminalCostTableType_Update_4F688CCB as table
(
	TerminalCostID bigint not null,
	Cost nvarchar(max) not null,
	IsIntraRegionMovementEnabled bit not null,
	IntraRegionMovementFactor numeric(19,6) not null
)
go

create type sys.TT_TerminalServicePointTableType_65A2B204 as table
(
	TerminalCode nvarchar(3) not null,
	ServicePointName nvarchar(50) not null,
	ServicePointProvinceCode nvarchar(2) not null,
	ExtraMiles decimal(19,6) not null
)
go

create type sys.TT_TerminalTableType_2AD55B43 as table
(
	TerminalName nvarchar(50) not null,
	TerminalCode nvarchar(3) not null,
	CityName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null,
	RegionCode nvarchar(4) not null
)
go

create type sys.TT_UnitTableType_26509D48 as table
(
	UnitName nvarchar(50) not null,
	UnitSymbol nvarchar(50) not null,
	UnitType nvarchar(50) not null
)
go

create type sys.TT_UserServiceLevelTableType_122B3FB8 as table
(
	UserID bigint not null,
	ServiceLevelID bigint not null
)
go

create type sys.TT_UserTableType_77381DB1 as table
(
	UserName nvarchar(50) not null,
	UserEmail nvarchar(50) not null,
	PersonaName nvarchar(50) not null,
	CanProcessSCS bit not null,
	CanProcessRequests bit not null,
	CanProcessReviews bit not null,
	UserManagerEmail nvarchar(50)
)
go

create type sys.TT_WeightBreakHeaderTableType_361CF0BD as table
(
	ServiceOfferingName nvarchar(50) not null,
	WeightBreakHeaderName nvarchar(50) not null,
	UnitFactor numeric(19,6) not null,
	MaximumValue numeric(19,6) not null,
	AsRating bit not null,
	HasMin bit not null,
	HasMax bit not null,
	BaseRate bit not null,
	Levels nvarchar(max) not null,
	ServiceLevelCode nvarchar(2) not null,
	UnitSymbol nvarchar(50) not null
)
go

create type sys.TT_id_list_3831B866 as table
(
	id uniqueidentifier
)
go

create type sys.TT_target_group_members_3C02494A as table
(
	membership_type nvarchar(50) not null,
	target_type nvarchar(50) not null,
	refresh_credential_name nvarchar(128),
	subscription_id uniqueidentifier,
	resource_group_name nvarchar(128),
	server_name nvarchar(128),
	database_name nvarchar(128),
	elastic_pool_name nvarchar(128),
	shard_map_name nvarchar(128)
)
go

create type TerminalCostTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	TerminalCode nvarchar(3) not null,
	Cost nvarchar(max) not null,
	IsIntraRegionMovementEnabled bit not null,
	IntraRegionMovementFactor decimal(19,6) not null
)
go

create type TerminalCostTableType_Update as table
(
	TerminalCostID bigint not null,
	Cost nvarchar(max) not null,
	IsIntraRegionMovementEnabled bit not null,
	IntraRegionMovementFactor numeric(19,6) not null
)
go

create type TerminalServicePointTableType as table
(
	TerminalCode nvarchar(3) not null,
	ServicePointName nvarchar(50) not null,
	ServicePointProvinceCode nvarchar(2) not null,
	ExtraMiles decimal(19,6) not null
)
go

create type TerminalTableType as table
(
	TerminalName nvarchar(50) not null,
	TerminalCode nvarchar(3) not null,
	CityName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	CountryCode nvarchar(2) not null,
	RegionCode nvarchar(4) not null
)
go

create type UnitTableType as table
(
	UnitName nvarchar(50) not null,
	UnitSymbol nvarchar(50) not null,
	UnitType nvarchar(50) not null
)
go

create type UserServiceLevelTableType as table
(
	UserID bigint not null,
	ServiceLevelID bigint not null
)
go

create type UserTableType as table
(
	UserName nvarchar(50) not null,
	UserEmail nvarchar(50) not null,
	PersonaName nvarchar(50) not null,
	CanProcessSCS bit not null,
	CanProcessRequests bit not null,
	CanProcessReviews bit not null,
	UserManagerEmail nvarchar(50)
)
go

create type WeightBreakHeaderTableType as table
(
	ServiceOfferingName nvarchar(50) not null,
	WeightBreakHeaderName nvarchar(50) not null,
	UnitFactor numeric(19,6) not null,
	MaximumValue numeric(19,6) not null,
	AsRating bit not null,
	HasMin bit not null,
	HasMax bit not null,
	BaseRate bit not null,
	Levels nvarchar(max) not null,
	ServiceLevelCode nvarchar(2) not null,
	UnitSymbol nvarchar(50) not null
)
go

create table Comment
(
	id char(32) not null
		primary key
			with (fillfactor = 80)
,
	EntityId nvarchar(36) not null,
	EntityVersion int not null,
	Tag nvarchar(100),
	Status nvarchar(25),
	Type nvarchar(25),
	Content nvarchar(max) not null,
	CreatedOn datetime2 not null,
	CreatedBy nvarchar(100),
	Attachments nvarchar(max) not null
)
go

create table CommentReply
(
	id char(32) not null
		primary key
			with (fillfactor = 80)
,
	Status nvarchar(25),
	Content nvarchar(max) not null,
	CreatedOn datetime2 not null,
	CreatedBy nvarchar(100),
	Attachments nvarchar(max) not null,
	Comment char(32) not null
		constraint CommentReply_Comment_737c7d0a_fk_Comment_id
			references Comment
)
go

create index CommentReply_Comment_737c7d0a
	on CommentReply (Comment)
		with (fillfactor = 80)
go

create table Country
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CountryID bigint identity
		primary key
			with (fillfactor = 80)
,
	CountryName nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	CountryCode nvarchar(2) not null
		unique
			with (fillfactor = 80)
)
go

create table Country_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CountryVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	CountryName nvarchar(50) not null,
	CountryCode nvarchar(2) not null,
	CountryID bigint not null
		constraint Country_History_CountryID_FK
			references Country
				on delete cascade,
	unique (CountryID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index Country_History_Unique
	on Country_History (CountryID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on Country_History (CountryID)
		with (fillfactor = 80)
go

create table Currency
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CurrencyID bigint identity
		primary key
			with (fillfactor = 80)
,
	CurrencyName nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	CurrencyCode nvarchar(3) not null
		unique
			with (fillfactor = 80)
)
go

create table CurrencyExchange
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CurrencyExchangeID bigint identity
		primary key
			with (fillfactor = 80)
,
	CADtoUSD numeric(19,6) not null,
	USDtoCAD numeric(19,6) not null,
	unique (CADtoUSD, USDtoCAD)
		with (fillfactor = 80)
)
go

create table CurrencyExchange_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CurrencyExchangeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	CADtoUSD numeric(19,6) not null,
	USDtoCAD numeric(19,6) not null,
	CurrencyExchangeID bigint not null
		constraint CurrencyExchange_History_CurrencyExchangeID_FK
			references CurrencyExchange
				on delete cascade,
	unique (CurrencyExchangeID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index CurrencyExchange_History_Unique
	on CurrencyExchange_History (CurrencyExchangeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on CurrencyExchange_History (CurrencyExchangeID)
		with (fillfactor = 80)
go

create table Currency_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CurrencyVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	CurrencyName nvarchar(50) not null,
	CurrencyCode nvarchar(3) not null,
	CurrencyID bigint not null
		constraint Currency_History_CurrencyID_FK
			references Currency
				on delete cascade,
	unique (CurrencyID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index Currency_History_Unique
	on Currency_History (CurrencyID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on Currency_History (CurrencyID)
		with (fillfactor = 80)
go

create table EquipmentType
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	EquipmentTypeID bigint identity
		primary key
			with (fillfactor = 80)
,
	EquipmentTypeName nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	EquipmentTypeCode nvarchar(2) not null
		unique
			with (fillfactor = 80)
)
go

create table EquipmentType_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	EquipmentTypeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	EquipmentTypeName nvarchar(50) not null,
	EquipmentTypeCode nvarchar(2) not null,
	EquipmentTypeID bigint not null
		constraint EquipmentType_History_EquipmentTypeID_FK
			references EquipmentType
				on delete cascade,
	unique (EquipmentTypeID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index EquipmentType_History_Unique
	on EquipmentType_History (EquipmentTypeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on EquipmentType_History (EquipmentTypeID)
		with (fillfactor = 80)
go

create table FreightClass
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	FreightClassID bigint identity
		primary key
			with (fillfactor = 80)
,
	FreightClassName nvarchar(50) not null
		unique
			with (fillfactor = 80)
)
go

create table FreightClass_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	FreightClassVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	FreightClassName nvarchar(50) not null,
	FreightClassID bigint not null
		constraint FreightClass_History_FreightClassID_FK
			references FreightClass
				on delete cascade,
	unique (FreightClassID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index FreightClass_History_Unique
	on FreightClass_History (FreightClassID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on FreightClass_History (FreightClassID)
		with (fillfactor = 80)
go

create table Language
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LanguageID bigint identity
		primary key
			with (fillfactor = 80)
,
	LanguageName nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	LanguageCode nvarchar(2) not null
		unique
			with (fillfactor = 80)
)
go

create table Language_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LanguageVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	LanguageName nvarchar(50) not null,
	LanguageCode nvarchar(2) not null,
	LanguageID bigint not null
		constraint Language_History_LanguageID_FK
			references Language
				on delete cascade,
	unique (LanguageID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on Language_History (LanguageID)
		with (fillfactor = 80)
go

create unique index Language_History_Unique
	on Language_History (LanguageID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table MinimumDivision
(
	LowFactor varchar(7) not null,
	HiFactor varchar(7) not null,
	EffectiveDate smalldatetime not null,
	MinDivisionAmt decimal(9,2) not null
)
go

create index IX1
	on MinimumDivision (LowFactor)
		with (fillfactor = 80)
go

create index IX2
	on MinimumDivision (HiFactor)
		with (fillfactor = 80)
go

create index IX3
	on MinimumDivision (LowFactor, HiFactor)
		with (fillfactor = 80)
go

create index IX4
	on MinimumDivision (EffectiveDate)
		with (fillfactor = 80)
go

create index IX5
	on MinimumDivision (LowFactor, HiFactor, EffectiveDate)
		with (fillfactor = 80)
go

create table Persona
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	PersonaID bigint identity
		primary key
			with (fillfactor = 80)
,
	PersonaName nvarchar(50) not null
		unique
			with (fillfactor = 80)
)
go

create table Persona_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	PersonaVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	PersonaName nvarchar(50) not null,
	PersonaID bigint not null
		constraint Persona_History_PersonaID_FK
			references Persona
				on delete cascade,
	unique (PersonaID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on Persona_History (PersonaID)
		with (fillfactor = 80)
go

create unique index Persona_History_Unique
	on Persona_History (PersonaID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table Plus30Factor
(
	Zip_Range varchar(11) not null
		constraint PK_Plus30Factor
			primary key
				with (fillfactor = 80)
,
	EffectiveDate smalldatetime not null,
	Plus30FactorAmt decimal(9,2) not null
)
go

create index IX1
	on Plus30Factor (Zip_Range)
		with (fillfactor = 80)
go

create index IX2
	on Plus30Factor (Zip_Range, EffectiveDate)
		with (fillfactor = 80)
go

create index IX3
	on Plus30Factor (EffectiveDate)
		with (fillfactor = 80)
go

create table Plus30InterchangeList
(
	Zip varchar(3) not null
		constraint PK_Plus30InterchangeList
			primary key
				with (fillfactor = 80)
,
	Description varchar(50)
)
go

create table PlusFactor
(
	Zip varchar(11) not null,
	PCode varchar(7) not null,
	EffectiveDate smalldatetime not null,
	PlusFactorAmt decimal(9,2) not null,
	constraint PK_PlusFactor
		primary key (Zip, PCode, EffectiveDate)
			with (fillfactor = 80)
)
go

create index IX1
	on PlusFactor (Zip)
		with (fillfactor = 80)
go

create index IX2
	on PlusFactor (PCode)
		with (fillfactor = 80)
go

create index IX3
	on PlusFactor (Zip, PCode)
		with (fillfactor = 80)
go

create index IX4
	on PlusFactor (EffectiveDate)
		with (fillfactor = 80)
go

create index IX5
	on PlusFactor (Zip, PCode, EffectiveDate)
		with (fillfactor = 80)
go

create table RateBase
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RateBaseID bigint identity
		primary key
			with (fillfactor = 80)
,
	RateBaseName nvarchar(50) not null,
	Description nvarchar(max),
	EffectiveDate date,
	ProductNumber nvarchar(50),
	Release nvarchar(50)
)
go

create unique index UQ__RateBase__D46ADF7040286278
	on RateBase (RateBaseName, EffectiveDate)
		with (fillfactor = 80)
go

create table RateBase_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RateBaseVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RateBaseName nvarchar(50) not null,
	RateBaseID bigint not null
		constraint RateBase_History_RateBaseID_FK
			references RateBase
				on delete cascade,
	Description nvarchar(max),
	EffectiveDate date,
	ProductNumber nvarchar(50),
	Release nvarchar(50),
	unique (RateBaseID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RateBase_History (RateBaseID)
		with (fillfactor = 80)
go

create unique index RateBase_History_Unique
	on RateBase_History (RateBaseID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table Region
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RegionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RegionName nvarchar(50) not null,
	RegionCode nvarchar(4) not null,
	CountryID bigint not null
		constraint Region_CountryID_FK
			references Country
				on delete cascade,
	unique (CountryID, RegionCode)
		with (fillfactor = 80)
,
	unique (CountryID, RegionName)
		with (fillfactor = 80)
)
go

create table Province
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ProvinceID bigint identity
		primary key
			with (fillfactor = 80)
,
	ProvinceName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	RegionID bigint not null
		constraint Province_RegionID_FK
			references Region
				on delete cascade,
	unique (RegionID, ProvinceName)
		with (fillfactor = 80)
,
	unique (RegionID, ProvinceCode)
		with (fillfactor = 80)
)
go

create table BasingPoint
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	BasingPointID bigint identity
		primary key
			with (fillfactor = 80)
,
	BasingPointName nvarchar(50) not null,
	ProvinceID bigint not null
		constraint BasingPoint_ProvinceID_FK
			references Province
				on delete cascade,
	unique (ProvinceID, BasingPointName)
		with (fillfactor = 80)
)
go

create index IX
	on BasingPoint (ProvinceID)
		with (fillfactor = 80)
go

create table City
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CityID bigint identity
		primary key
			with (fillfactor = 80)
,
	CityName nvarchar(50) not null,
	ProvinceID bigint not null
		constraint City_ProvinceID_FK
			references Province
				on delete cascade,
	unique (CityName, ProvinceID)
		with (fillfactor = 80)
)
go

create index IX
	on City (ProvinceID)
		with (fillfactor = 80)
go

create index IX1
	on Province (RegionID)
		with (fillfactor = 80)
go

create index IX
	on Region (CountryID)
		with (fillfactor = 80)
go

create table Region_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RegionVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RegionName nvarchar(50) not null,
	RegionCode nvarchar(4) not null,
	CountryVersionID bigint not null
		constraint Region_History_CountryVersionID_FK
			references Country_History,
	RegionID bigint not null
		constraint Region_History_RegionID_FK
			references Region
				on delete cascade,
	unique (RegionID, VersionNum)
		with (fillfactor = 80)
)
go

create table Province_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ProvinceVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ProvinceName nvarchar(50) not null,
	ProvinceCode nvarchar(2) not null,
	ProvinceID bigint not null
		constraint Province_History_ProvinceID_FK
			references Province
				on delete cascade,
	RegionVersionID bigint not null
		constraint Province_History_RegionVersionID_FK
			references Region_History,
	unique (ProvinceID, VersionNum)
		with (fillfactor = 80)
)
go

create table BasingPoint_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	BasingPointVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	BasingPointName nvarchar(50) not null,
	BasingPointID bigint not null
		constraint BasingPoint_History_BasingPointID_FK
			references BasingPoint
				on delete cascade,
	ProvinceVersionID bigint not null
		constraint BasingPoint_History_ProvinceVersionID_FK
			references Province_History,
	unique (BasingPointID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index BasingPoint_History_Unique
	on BasingPoint_History (BasingPointID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on BasingPoint_History (BasingPointID)
		with (fillfactor = 80)
go

create index IX2
	on BasingPoint_History (ProvinceVersionID)
		with (fillfactor = 80)
go

create table City_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CityVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	CityName nvarchar(50) not null,
	CityID bigint not null
		constraint City_History_CityID_FK
			references City
				on delete cascade,
	ProvinceVersionID bigint not null
		constraint City_History_ProvinceVersionID_FK
			references Province_History,
	unique (CityID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index City_History_Unique
	on City_History (CityID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on City_History (CityID)
		with (fillfactor = 80)
go

create index IX2
	on City_History (ProvinceVersionID)
		with (fillfactor = 80)
go

create index IX1
	on Province_History (ProvinceID)
		with (fillfactor = 80)
go

create index IX2
	on Province_History (RegionVersionID)
		with (fillfactor = 80)
go

create unique index Province_History_Unique
	on Province_History (ProvinceID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on Region_History (RegionID)
		with (fillfactor = 80)
go

create index IX2
	on Region_History (CountryVersionID)
		with (fillfactor = 80)
go

create unique index Region_History_Unique
	on Region_History (RegionID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestAccessorials
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestAccessorialsID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	IsValidData bit not null
)
go

create table RequestAccessorials_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestAccessorialsVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null,
	IsValidData bit not null,
	RequestAccessorialsID bigint not null
		constraint RequestAccessorials_History_RequestAccessorialsID_FK
			references RequestAccessorials
				on delete cascade,
	unique (RequestAccessorialsID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RequestAccessorials_History (RequestAccessorialsID)
		with (fillfactor = 80)
go

create unique index RequestAccessorials_History_Unique
	on RequestAccessorials_History (RequestAccessorialsID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestLane
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestLaneID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	IsValidData bit not null,
	NumSections int not null,
	NumLanes int not null,
	NumUnpublishedLanes int not null,
	NumEditedLanes int not null,
	NumDuplicateLanes int not null,
	NumDoNotMeetCommitmentLanes int not null
)
go

create table RequestLane_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestLaneVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null,
	IsValidData bit not null,
	NumSections int not null,
	NumLanes int not null,
	NumUnpublishedLanes int not null,
	NumEditedLanes int not null,
	NumDuplicateLanes int not null,
	NumDoNotMeetCommitmentLanes int not null,
	RequestLaneID bigint not null
		constraint RequestLane_History_RequestLaneID_FK
			references RequestLane
				on delete cascade,
	unique (RequestLaneID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RequestLane_History (RequestLaneID)
		with (fillfactor = 80)
go

create unique index RequestLane_History_Unique
	on RequestLane_History (RequestLaneID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestLog
(
	ReferenceId bigint identity
		primary key
			with (fillfactor = 80)
,
	Request nvarchar(max) not null,
	Response nvarchar(max) not null,
	Timestamp datetime2 not null,
	System nvarchar(99) not null,
	IsSuccesful bit not null,
	ErrorLog nvarchar(max)
)
go

create table RequestProfile
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestProfileID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	IsValidData bit not null,
	UsingStandardTariff bit,
	ExcludeFromFAKRating bit,
	UseActualWeight bit,
	IsClassDensity bit,
	AvgWeightedDensity numeric(19,6),
	OverrideDensity numeric(19,6),
	SubjectToCube numeric(19,6),
	LinearLengthRule numeric(19,6),
	WeightPerLinearLengthRule numeric(19,6),
	AvgWeightedClass numeric(19,6),
	OverrideClass numeric(19,6),
	FreightElements nvarchar(max),
	Shipments nvarchar(max),
	ShippingControls nvarchar(max),
	Competitors nvarchar(max),
	ClassControls nvarchar(max)
)
go

create table RequestProfile_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestProfileVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null,
	IsValidData bit not null,
	UsingStandardTariff bit,
	ExcludeFromFAKRating bit,
	UseActualWeight bit,
	IsClassDensity bit,
	AvgWeightedDensity numeric(19,6),
	OverrideDensity numeric(19,6),
	SubjectToCube numeric(19,6),
	LinearLengthRule numeric(19,6),
	WeightPerLinearLengthRule numeric(19,6),
	AvgWeightedClass numeric(19,6),
	OverrideClass numeric(19,6),
	FreightElements nvarchar(max),
	Shipments nvarchar(max),
	ShippingControls nvarchar(max),
	Competitors nvarchar(max),
	ClassControls nvarchar(max),
	RequestProfileID bigint not null
		constraint RequestProfile_History_RequestProfileID_FK
			references RequestProfile,
	unique (RequestProfileID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RequestProfile_History (RequestProfileID)
		with (fillfactor = 80)
go

create unique index RequestProfile_History_Unique
	on RequestProfile_History (RequestProfileID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestSectionLanePricingPoint_Staging
(
	RequestSectionLanePricingPointStagingID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionLanePricingPointID bigint not null,
	RequestSectionLaneID bigint not null,
	RequestLaneID bigint not null,
	PricingPointNumber nvarchar(32) not null,
	OriginPostalCodeID bigint not null,
	OriginPostalCodeName nvarchar(10) not null,
	DestinationPostalCodeID bigint not null,
	DestinationPostalCodeName nvarchar(10) not null,
	PricingPointHashCode varbinary(8000) not null,
	Cost nvarchar(max) not null,
	NewCost nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	NewDrRate nvarchar(max) not null,
	FakRate nvarchar(max) not null,
	NewFakRate nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	NewProfitability nvarchar(max) not null,
	SplitsAll nvarchar(max) not null,
	NewSplitsAll nvarchar(max) not null,
	SplitsAllUsagePercentage decimal(19,6) not null,
	NewSplitsAllUsagePercentage decimal(19,6) not null,
	PickupCount int,
	NewPickupCount int,
	DeliveryCount int,
	NewDeliveryCount int,
	DockAdjustment decimal(19,6),
	NewDockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	NewMargin nvarchar(max) not null,
	Density nvarchar(max) not null,
	NewDensity nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	NewPickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	NewDeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	NewAccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	NewAccessorialsPercentage nvarchar(max) not null,
	IsActive bit not null,
	NewIsActive bit not null,
	IsInactiveViewable bit not null,
	NewIsInactiveViewable bit not null,
	IsUpdated bit not null,
	ContextID nvarchar(32) not null,
	ContextCreatedOn nvarchar(32) not null,
	PricingRates nvarchar(max),
	WorkflowErrors nvarchar(max),
	unique (ContextID, PricingPointNumber)
		with (fillfactor = 80)
,
	unique (ContextID, RequestSectionLanePricingPointID)
		with (fillfactor = 80)
,
	unique (ContextID, RequestSectionLaneID, PricingPointHashCode)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestSectionLanePricingPoint_Staging (ContextID, RequestSectionLaneID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSectionLanePricingPoint_Staging (ContextID, RequestSectionLaneID, PricingPointNumber)
		with (fillfactor = 80)
go

create index IX3
	on RequestSectionLanePricingPoint_Staging (ContextID, RequestSectionLaneID, OriginPostalCodeID)
		with (fillfactor = 80)
go

create index IX4
	on RequestSectionLanePricingPoint_Staging (ContextID, RequestSectionLaneID, DestinationPostalCodeID)
		with (fillfactor = 80)
go

create index IX5
	on RequestSectionLanePricingPoint_Staging (ContextID, RequestLaneID)
		with (fillfactor = 80)
go

create index IX6
	on RequestSectionLanePricingPoint_Staging (ContextID, RequestLaneID)
		with (fillfactor = 80)
go

create index IX7
	on RequestSectionLanePricingPoint_Staging (ContextID, IsUpdated)
		with (fillfactor = 80)
go

create index IX8
	on RequestSectionLanePricingPoint_Staging (ContextID, RequestSectionLaneID, IsUpdated)
		with (fillfactor = 80)
go

create table RequestSectionLane_Staging
(
	RequestSectionLaneStagingID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionLaneID bigint not null,
	RequestSectionID bigint not null,
	RequestLaneID bigint not null,
	LaneNumber nvarchar(32) not null,
	IsPublished bit not null,
	IsEdited bit not null,
	IsDuplicate bit not null,
	IsLaneGroup bit not null,
	OriginProvinceID bigint,
	OriginProvinceCode nvarchar(2),
	OriginRegionID bigint,
	OriginRegionCode nvarchar(4),
	OriginCountryID bigint,
	OriginCountryCode nvarchar(2),
	OriginTerminalID bigint,
	OriginTerminalCode nvarchar(3),
	OriginZoneID bigint,
	OriginZoneName nvarchar(50),
	OriginBasingPointID bigint,
	OriginBasingPointName nvarchar(50),
	OriginServicePointID bigint,
	OriginServicePointName nvarchar(50),
	OriginPostalCodeID bigint,
	OriginPostalCodeName nvarchar(10),
	OriginPointTypeID bigint not null,
	OriginPointTypeName nvarchar(50) not null,
	OriginCode nvarchar(50) not null,
	DestinationProvinceID bigint,
	DestinationProvinceCode nvarchar(2),
	DestinationRegionID bigint,
	DestinationRegionCode nvarchar(4),
	DestinationCountryID bigint,
	DestinationCountryCode nvarchar(2),
	DestinationTerminalID bigint,
	DestinationTerminalCode nvarchar(3),
	DestinationZoneID bigint,
	DestinationZoneName nvarchar(50),
	DestinationBasingPointID bigint,
	DestinationBasingPointName nvarchar(50),
	DestinationServicePointID bigint,
	DestinationServicePointName nvarchar(50),
	DestinationPostalCodeID bigint,
	DestinationPostalCodeName nvarchar(10),
	DestinationPointTypeID bigint not null,
	DestinationPointTypeName nvarchar(50) not null,
	DestinationCode nvarchar(50) not null,
	LaneHashCode varbinary(8000) not null,
	BasingPointHashCode varbinary(8000),
	Cost nvarchar(max),
	NewCost nvarchar(max),
	IsActive bit not null,
	NewIsActive bit not null,
	IsInactiveViewable bit not null,
	NewIsInactiveViewable bit not null,
	IsBetween bit not null,
	NewIsBetween bit not null,
	DoNotMeetCommitment bit not null,
	NewDoNotMeetCommitment bit not null,
	Commitment nvarchar(max),
	NewCommitment nvarchar(max),
	CustomerRate nvarchar(max) not null,
	NewCustomerRate nvarchar(max) not null,
	CustomerDiscount nvarchar(max) not null,
	NewCustomerDiscount nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	NewDrRate nvarchar(max) not null,
	PartnerRate nvarchar(max) not null,
	NewPartnerRate nvarchar(max) not null,
	PartnerDiscount nvarchar(max) not null,
	NewPartnerDiscount nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	NewProfitability nvarchar(max) not null,
	PickupCount int,
	NewPickupCount int,
	DeliveryCount int,
	NewDeliveryCount int,
	DockAdjustment decimal(19,6),
	NewDockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	NewMargin nvarchar(max) not null,
	Density nvarchar(max) not null,
	NewDensity nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	NewPickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	NewDeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	NewAccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	NewAccessorialsPercentage nvarchar(max) not null,
	IsUpdated bit not null,
	ContextID nvarchar(32) not null,
	ContextCreatedOn nvarchar(32) not null,
	PricingRates nvarchar(max),
	WorkflowErrors nvarchar(max),
	unique (ContextID, RequestSectionLaneID)
		with (fillfactor = 80)
,
	unique (ContextID, RequestSectionID, LaneHashCode)
		with (fillfactor = 80)
,
	unique (ContextID, LaneNumber)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestSectionLane_Staging (ContextID, RequestSectionID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSectionLane_Staging (ContextID, RequestSectionID, LaneNumber)
		with (fillfactor = 80)
go

create index IX3
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginProvinceID)
		with (fillfactor = 80)
go

create index IX4
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationProvinceID)
		with (fillfactor = 80)
go

create index IX5
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginPostalCodeID)
		with (fillfactor = 80)
go

create index IX6
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationPostalCodeID)
		with (fillfactor = 80)
go

create index IX7
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginTerminalID)
		with (fillfactor = 80)
go

create index IX8
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationTerminalID)
		with (fillfactor = 80)
go

create index IX9
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginRegionID)
		with (fillfactor = 80)
go

create index IX10
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationRegionID)
		with (fillfactor = 80)
go

create index IX11
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginZoneID)
		with (fillfactor = 80)
go

create index IX12
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationZoneID)
		with (fillfactor = 80)
go

create index IX13
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginBasingPointID)
		with (fillfactor = 80)
go

create index IX14
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationBasingPointID)
		with (fillfactor = 80)
go

create index IX15
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginCountryID)
		with (fillfactor = 80)
go

create index IX16
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationCountryID)
		with (fillfactor = 80)
go

create index IX17
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginServicePointID)
		with (fillfactor = 80)
go

create index IX18
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationServicePointID)
		with (fillfactor = 80)
go

create index IX19
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginPointTypeID)
		with (fillfactor = 80)
go

create index IX20
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationPointTypeID)
		with (fillfactor = 80)
go

create index IX21
	on RequestSectionLane_Staging (ContextID, RequestSectionID, OriginCode)
		with (fillfactor = 80)
go

create index IX22
	on RequestSectionLane_Staging (ContextID, RequestSectionID, DestinationCode)
		with (fillfactor = 80)
go

create index IX23
	on RequestSectionLane_Staging (ContextID, RequestLaneID)
		with (fillfactor = 80)
go

create index IX24
	on RequestSectionLane_Staging (ContextID, IsUpdated)
		with (fillfactor = 80)
go

create index IX25
	on RequestSectionLane_Staging (ContextID, RequestSectionID, IsUpdated)
		with (fillfactor = 80)
go

create table RequestStatusType
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestStatusTypeID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestStatusTypeName nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	NextRequestStatusType nvarchar(max) not null,
	AssignedPersona nvarchar(50) not null,
	Editor nvarchar(50),
	QueuePersonas nvarchar(max) not null,
	IsSecondary bit not null,
	IsFinal bit not null
)
go

create table RequestStatusType_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestStatusTypeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestStatusTypeName nvarchar(50) not null,
	RequestStatusTypeID bigint not null
		constraint RequestStatusType_History_RequestStatusTypeID_FK
			references RequestStatusType
				on delete cascade,
	NextRequestStatusType nvarchar(max) not null,
	AssignedPersona nvarchar(50) not null,
	Editor nvarchar(50),
	QueuePersonas nvarchar(max) not null,
	IsSecondary bit not null,
	IsFinal bit not null,
	unique (RequestStatusTypeID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RequestStatusType_History (RequestStatusTypeID)
		with (fillfactor = 80)
go

create unique index RequestStatusType_History_Unique
	on RequestStatusType_History (RequestStatusTypeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestType
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestTypeID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestTypeName nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	ApplyToCustomerUnderReview bit not null,
	ApplyToRevision bit,
	AllowSalesCommitment bit
)
go

create table RequestType_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestTypeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestTypeName nvarchar(50) not null,
	ApplyToCustomerUnderReview bit not null,
	ApplyToRevision bit,
	AllowSalesCommitment bit,
	RequestTypeID bigint not null
		constraint RequestType_History_RequestTypeID_FK
			references RequestType
				on delete cascade,
	unique (RequestTypeID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RequestType_History (RequestTypeID)
		with (fillfactor = 80)
go

create unique index RequestType_History_Unique
	on RequestType_History (RequestTypeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table Section3
(
	LowZipCode varchar(7),
	HiZipCode varchar(7),
	Factor varchar(6)
)
go

create index IX1
	on Section3 (LowZipCode)
		with (fillfactor = 80)
go

create index IX2
	on Section3 (HiZipCode)
		with (fillfactor = 80)
go

create index IX3
	on Section3 (LowZipCode, HiZipCode)
		with (fillfactor = 80)
go

create table Section4
(
	LowZipCode varchar(7),
	HiZipCode varchar(7),
	Factor_Exception varchar(6)
)
go

create index IX1
	on Section4 (LowZipCode)
		with (fillfactor = 80)
go

create index IX2
	on Section4 (HiZipCode)
		with (fillfactor = 80)
go

create index IX3
	on Section4 (LowZipCode, HiZipCode)
		with (fillfactor = 80)
go

create table Section6
(
	ZipCode1 varchar(8),
	ZipCode2 varchar(8),
	Factor_Minimum varchar(3)
)
go

create index IX1
	on Section6 (ZipCode1)
		with (fillfactor = 80)
go

create index IX2
	on Section6 (ZipCode2)
		with (fillfactor = 80)
go

create index IX3
	on Section6 (ZipCode1, ZipCode2)
		with (fillfactor = 80)
go

create table ServiceOffering
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServiceOfferingID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServiceOfferingName nvarchar(50) not null
		unique
			with (fillfactor = 80)
)
go

create table LaneCostWeightBreakLevel
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	WeightBreakLevelID bigint identity
		primary key
			with (fillfactor = 80)
,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null,
	ServiceOfferingID bigint not null
		constraint LaneCostWeightBreakLevel_ServiceOfferingID_FK
			references ServiceOffering
				on delete cascade,
	unique (ServiceOfferingID, WeightBreakLowerBound)
		with (fillfactor = 80)
,
	unique (ServiceOfferingID, WeightBreakLevelName)
		with (fillfactor = 80)
)
go

create index IX
	on LaneCostWeightBreakLevel (ServiceOfferingID)
		with (fillfactor = 80)
go

create table RequestSectionLanePointType
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLanePointTypeID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionLanePointTypeName nvarchar(50) not null,
	ServiceOfferingID bigint not null
		constraint RequestSectionLanePointType_ServiceOfferingID_FK
			references ServiceOffering
				on delete cascade,
	IsDensityPricing bit not null,
	LocationHierarchy int not null,
	IsPointType bit not null,
	IsGroupType bit not null,
	unique (ServiceOfferingID, IsDensityPricing, LocationHierarchy)
		with (fillfactor = 80)
,
	unique (ServiceOfferingID, IsDensityPricing, RequestSectionLanePointTypeName)
		with (fillfactor = 80)
)
go

create table ServiceLevel
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServiceLevelID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServiceLevelName nvarchar(50) not null,
	ServiceLevelCode nvarchar(3) not null,
	PricingType nvarchar(50),
	ServiceOfferingID bigint not null
		constraint ServiceLevel_ServiceOfferingID_FK
			references ServiceOffering
				on delete cascade,
	unique (ServiceOfferingID, ServiceLevelName)
		with (fillfactor = 80)
,
	unique (ServiceOfferingID, ServiceLevelCode)
		with (fillfactor = 80)
)
go

create table GriReview
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	GriReviewID bigint identity
		primary key
			with (fillfactor = 80)
,
	ExpiryOn datetime2,
	StartOn datetime2,
	UniStatus nvarchar(max) not null,
	GriAmount float,
	GriPercentage float,
	MinRevenue float,
	MaxRevenue float,
	MinOperatingRatio float,
	MaxOperatingRatio float,
	CurrentRateBase nvarchar(100),
	CurrentEffectiveDate datetime2,
	CurrentTmRatebase nvarchar(100),
	FutureRateBase nvarchar(100),
	FutureEffectiveDate datetime2,
	FutureTmRatebase nvarchar(100),
	NewEffectiveDate datetime2,
	NewExpiryDate datetime2,
	CreatedOn datetime2 not null,
	UpdatedOn datetime2 not null,
	ServiceLevelID bigint not null
		constraint GriReview_ServiceLevelID_1b5f054f_fk_ServiceLevel_ServiceLevelID
			references ServiceLevel
)
go

create index GriReview_ServiceLevelID_1b5f054f
	on GriReview (ServiceLevelID)
		with (fillfactor = 80)
go

create table GriReview_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	GriReviewVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ExpiryOn datetime2,
	StartOn datetime2,
	UniStatus nvarchar(max) not null,
	GriAmount float,
	GriPercentage float,
	MinRevenue float,
	MaxRevenue float,
	MinOperatingRatio float,
	MaxOperatingRatio float,
	CurrentRateBase nvarchar(100),
	CurrentEffectiveDate datetime2,
	CurrentTmRatebase nvarchar(100),
	FutureRateBase nvarchar(100),
	FutureEffectiveDate datetime2,
	FutureTmRatebase nvarchar(100),
	NewEffectiveDate datetime2,
	NewExpiryDate datetime2,
	CreatedOn datetime2 not null,
	UpdatedOn datetime2 not null,
	GriReviewID bigint not null
		constraint GriReviewHistory_GriReviewID_56d12b6b_fk_GriReview_GriReviewID
			references GriReview,
	ServiceLevelID bigint
		constraint GriReview_History_ServiceLevelID_f4c07540_fk_ServiceLevel_ServiceLevelID
			references ServiceLevel
)
go

create index GriReviewHistory_GriReviewID_56d12b6b
	on GriReview_History (GriReviewID)
		with (fillfactor = 80)
go

create index GriReviewHistory_ServiceLevelID_e6b9da77
	on GriReview_History (ServiceLevelID)
		with (fillfactor = 80)
go

create index IX
	on ServiceLevel (ServiceOfferingID)
		with (fillfactor = 80)
go

create table ServiceMode
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServiceModeID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServiceModeName nvarchar(50) not null,
	ServiceModeCode nvarchar not null,
	ServiceOfferingID bigint not null
		constraint ServiceMode_ServiceOfferingID_FK
			references ServiceOffering,
	unique (ServiceOfferingID, ServiceModeCode)
		with (fillfactor = 80)
)
go

create index IX
	on ServiceMode (ServiceOfferingID)
		with (fillfactor = 80)
go

create table ServiceOffering_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServiceOfferingVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServiceOfferingName nvarchar(50) not null,
	ServiceOfferingID bigint not null
		constraint ServiceOffering_History_ServiceOfferingID_FK
			references ServiceOffering
				on delete cascade,
	unique (ServiceOfferingID, VersionNum)
		with (fillfactor = 80)
)
go

create table LaneCostWeightBreakLevel_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	WeightBreakLevelVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null,
	ServiceOfferingVersionID bigint not null
		constraint LaneCostWeightBreakLevel_History_ServiceOfferingVersionID_FK
			references ServiceOffering_History,
	WeightBreakLevelID bigint not null
		constraint LaneCostWeightBreakLevel_History_WeightBreakLevelID_FK
			references LaneCostWeightBreakLevel
				on delete cascade,
	unique (WeightBreakLevelID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on LaneCostWeightBreakLevel_History (ServiceOfferingVersionID)
		with (fillfactor = 80)
go

create index IX2
	on LaneCostWeightBreakLevel_History (WeightBreakLevelID)
		with (fillfactor = 80)
go

create unique index LaneCostWeightBreakLevel_History_Unique
	on LaneCostWeightBreakLevel_History (WeightBreakLevelID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestSectionLanePointType_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLanePointTypeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionLanePointTypeID bigint not null
		constraint RequestSectionLanePointType_History_RequestSectionLanePointTypeID_FK
			references RequestSectionLanePointType
				on delete cascade,
	RequestSectionLanePointTypeName nvarchar(50) not null,
	ServiceOfferingVersionID bigint not null
		constraint RequestSectionLanePointType_History_ServiceOfferingVersionID_FK
			references ServiceOffering_History,
	IsDensityPricing bit not null,
	LocationHierarchy int not null,
	IsPointType bit not null,
	IsGroupType bit not null,
	unique (RequestSectionLanePointTypeID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RequestSectionLanePointType_History (RequestSectionLanePointTypeID)
		with (fillfactor = 80)
go

create unique index RequestSectionLanePointType_History_Unique
	on RequestSectionLanePointType_History (RequestSectionLanePointTypeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table ServiceLevel_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServiceLevelVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServiceLevelName nvarchar(50) not null,
	ServiceLevelCode nvarchar(3) not null,
	PricingType nvarchar(50),
	ServiceLevelID bigint not null
		constraint ServiceLevel_History_ServiceLevelID_FK
			references ServiceLevel
				on delete cascade,
	ServiceOfferingVersionID bigint not null
		constraint ServiceLevel_History_ServiceOfferingVersionID_FK
			references ServiceOffering_History,
	unique (ServiceLevelID, VersionNum)
		with (fillfactor = 90)
)
go

create index IX1
	on ServiceLevel_History (ServiceLevelID)
		with (fillfactor = 80)
go

create index IX2
	on ServiceLevel_History (ServiceOfferingVersionID)
		with (fillfactor = 80)
go

create unique index ServiceLevel_History_Unique
	on ServiceLevel_History (ServiceLevelID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 90)
go

create table ServiceMode_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServiceModeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServiceModeName nvarchar(50) not null,
	ServiceModeCode nvarchar not null,
	ServiceModeID bigint not null
		constraint ServiceMode_History_ServiceModeID_FK
			references ServiceMode
				on delete cascade,
	ServiceOfferingVersionID bigint not null
		constraint ServiceMode_History_ServiceOfferingVersionID_FK
			references ServiceOffering_History,
	unique (ServiceModeID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on ServiceMode_History (ServiceModeID)
		with (fillfactor = 80)
go

create index IX2
	on ServiceMode_History (ServiceModeVersionID)
		with (fillfactor = 80)
go

create unique index ServiceMode_History_Unique
	on ServiceMode_History (ServiceModeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on ServiceOffering_History (ServiceOfferingID)
		with (fillfactor = 80)
go

create unique index ServiceOffering_History_Unique
	on ServiceOffering_History (ServiceOfferingID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table ServicePoint
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServicePointID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServicePointName nvarchar(50) not null,
	BasingPointID bigint
		constraint ServicePoint_BasingPointID_FK
			references BasingPoint
				on delete cascade,
	ProvinceID bigint not null
		constraint ServicePoint_ProvinceID_FK
			references Province
)
go

create table PostalCode
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	PostalCodeID bigint identity
		primary key
			with (fillfactor = 80)
,
	PostalCodeName nvarchar(10) not null,
	ServicePointID bigint not null
		constraint PostalCode_ServicePointID_FK
			references ServicePoint
				on delete cascade,
	unique (PostalCodeName, ServicePointID)
		with (fillfactor = 80)
)
go

create index IX
	on PostalCode (ServicePointID)
		with (fillfactor = 80)
go

create index IX1
	on ServicePoint (BasingPointID, ServicePointName)
		with (fillfactor = 80)
go

create index IX2
	on ServicePoint (BasingPointID)
		with (fillfactor = 80)
go

create index IX3
	on ServicePoint (ProvinceID)
		with (fillfactor = 80)
go

create unique index ServicePoint_Unique
	on ServicePoint (BasingPointID, ServicePointName)
	where [BasingPointID] IS NOT NULL
		with (fillfactor = 80)
go

create table ServicePoint_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ServicePointVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServicePointName nvarchar(50) not null,
	ServicePointID bigint not null
		constraint ServicePoint_History_ServicePointID_FK
			references ServicePoint
				on delete cascade,
	BasingPointVersionID bigint
		constraint ServicePoint_History_BasingPointVersionID_FK
			references BasingPoint_History,
	ProvinceVersionID bigint not null
		constraint ServicePoint_History_ProvinceVersionID_FK
			references Province_History,
	unique (ServicePointID, VersionNum)
		with (fillfactor = 80)
)
go

create table PostalCode_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	PostalCodeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	PostalCodeName nvarchar(10) not null,
	PostalCodeID bigint not null
		constraint PostalCode_History_PostalCodeID_FK
			references PostalCode
				on delete cascade,
	ServicePointVersionID bigint not null
		constraint PostalCode_History_ServicePointVersionID_FK
			references ServicePoint_History,
	unique (PostalCodeID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on PostalCode_History (PostalCodeID)
		with (fillfactor = 80)
go

create index IX2
	on PostalCode_History (ServicePointVersionID)
		with (fillfactor = 80)
go

create unique index PostalCode_History_Unique
	on PostalCode_History (PostalCodeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on ServicePoint_History (ServicePointID)
		with (fillfactor = 80)
go

create index IX2
	on ServicePoint_History (BasingPointVersionID)
		with (fillfactor = 80)
go

create index IX3
	on ServicePoint_History (ProvinceVersionID)
		with (fillfactor = 80)
go

create unique index ServicePoint_History_Unique
	on ServicePoint_History (ServicePointID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table SpeedSheet
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	SpeedSheetID bigint identity
		primary key
			with (fillfactor = 80)
,
	Margin numeric(19,6) not null,
	MaxDensity numeric(19,6) not null,
	MinDensity numeric(19,6) not null,
	ServiceOfferingID bigint not null
		unique
			with (fillfactor = 80)
		constraint SpeedSheet_ServiceOfferingID_FK
			references ServiceOffering
				on delete cascade
)
go

create table SpeedSheet_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	SpeedSheetVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	Margin numeric(19,6) not null,
	MaxDensity numeric(19,6) not null,
	MinDensity numeric(19,6) not null,
	ServiceOfferingVersionID bigint not null
		constraint SpeedSheet_History_ServiceOfferingVersionID_FK
			references ServiceOffering_History,
	SpeedSheetID bigint not null
		constraint SpeedSheet_History_SpeedSheetID_FK
			references SpeedSheet
				on delete cascade,
	unique (SpeedSheetID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on SpeedSheet_History (SpeedSheetID)
		with (fillfactor = 80)
go

create index IX2
	on SpeedSheet_History (ServiceOfferingVersionID)
		with (fillfactor = 80)
go

create unique index SpeedSheet_History_Unique
	on SpeedSheet_History (SpeedSheetID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table SubServiceLevel
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	SubServiceLevelID bigint identity
		primary key
			with (fillfactor = 80)
,
	ServiceLevelID bigint not null
		constraint SubServiceLevel_ServiceLevelID_FK
			references ServiceLevel
				on delete cascade,
	SubServiceLevelName nvarchar(50) not null,
	SubServiceLevelCode nvarchar(2) not null,
	constraint SubServiceLevel_ServiceLevelID_SubServiceLevelName_SubServiceLevelCode_027679c8_uniq
		unique (ServiceLevelID, SubServiceLevelName, SubServiceLevelCode)
)
go

create index IX
	on SubServiceLevel (ServiceLevelID)
		with (fillfactor = 80)
go

create table SubServiceLevel_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	SubServiceLevelVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	SubServiceLevelName nvarchar(50) not null,
	SubServiceLevelCode nvarchar(2) not null,
	SubServiceLevelID bigint not null
		constraint SubServiceLevel_History_ServiceLevelID_FK
			references SubServiceLevel
				on delete cascade,
	ServiceLevelVersionID bigint not null
		constraint SubServiceLevel_History_ServiceOfferingVersionID_FK
			references ServiceLevel_History,
	unique (SubServiceLevelID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on SubServiceLevel_History (SubServiceLevelID)
		with (fillfactor = 80)
go

create index IX2
	on SubServiceLevel_History (ServiceLevelVersionID)
		with (fillfactor = 80)
go

create unique index SubServiceLevel_History_Unique
	on SubServiceLevel_History (SubServiceLevelID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table Terminal
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TerminalID bigint identity
		primary key
			with (fillfactor = 80)
,
	TerminalCode nvarchar(3) not null,
	TerminalName nvarchar(40) not null,
	CityID bigint not null
		constraint Terminal_CityID_FK
			references City
				on delete cascade,
	RegionID bigint not null
		constraint Terminal_RegionID_FK
			references Region,
	unique (TerminalCode, CityID)
		with (fillfactor = 80)
)
go

create table BrokerContractCost
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	BrokerContractCostID bigint identity
		primary key
			with (fillfactor = 80)
,
	Cost nvarchar(max) not null,
	ServiceLevelID bigint,
	TerminalID bigint not null
		constraint BrokerContractCost_TerminalID_FK
			references Terminal
				on delete cascade,
	SubServiceLevelID bigint
		constraint BrokerContractCost_SubServiceLevelID_076af111_fk_SubServiceLevel_SubServiceLevelID
			references SubServiceLevel,
	unique (TerminalID, SubServiceLevelID)
		with (fillfactor = 90)
)
go

create index IX1
	on BrokerContractCost (TerminalID)
		with (fillfactor = 80)
go

create index IX2
	on BrokerContractCost (ServiceLevelID)
		with (fillfactor = 80)
go

create index BrokerContractCost_SubServiceLevelID_076af111
	on BrokerContractCost (SubServiceLevelID)
go

create table Lane
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LaneID bigint identity
		primary key
			with (fillfactor = 80)
,
	IsHeadhaul bit not null,
	DestinationTerminalID bigint not null
		constraint Lane_DestinationTerminalID_FK
			references Terminal
				on delete cascade,
	OriginTerminalID bigint not null
		constraint Lane_OriginTerminalID_FK
			references Terminal,
	ServiceLevelID bigint,
	SubServiceLevelID bigint
		constraint Lane_SubServiceLevelID_3e5bbd5a_fk_SubServiceLevel_SubServiceLevelID
			references SubServiceLevel,
	unique (OriginTerminalID, DestinationTerminalID, SubServiceLevelID)
		with (fillfactor = 90)
)
go

create table DockRoute
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	DockRouteID bigint identity
		primary key
			with (fillfactor = 80)
,
	RouteLegs nvarchar(max) not null,
	LaneID bigint not null
		unique
			with (fillfactor = 80)
		constraint DockRoute_LaneID_FK
			references Lane
				on delete cascade,
	IsExcludeDestination bit not null,
	IsExcludeSource bit not null
)
go

create index IX1
	on Lane (OriginTerminalID)
		with (fillfactor = 80)
go

create index IX2
	on Lane (DestinationTerminalID)
		with (fillfactor = 80)
go

create index IX3
	on Lane (ServiceLevelID)
		with (fillfactor = 80)
go

create index Lane_SubServiceLevelID_3e5bbd5a
	on Lane (SubServiceLevelID)
go

create table LaneCost
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LaneCostID bigint identity
		primary key
			with (fillfactor = 80)
,
	Cost nvarchar(max) not null,
	MinimumCost numeric(19,6) not null,
	LaneID bigint not null
		unique
			with (fillfactor = 80)
		constraint LaneCost_LaneID_FK
			references Lane
				on delete cascade
)
go

create table LaneRoute
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LaneRouteID bigint identity
		primary key
			with (fillfactor = 80)
,
	RouteLegs nvarchar(max) not null,
	LaneID bigint not null
		unique
			with (fillfactor = 80)
		constraint LaneRoute_LaneID_FK
			references Lane
				on delete cascade
)
go

create table LegCost
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LegCostID bigint identity
		primary key
			with (fillfactor = 80)
,
	Cost nvarchar(max) not null,
	LaneID bigint not null
		constraint LegCost_LaneID_FK
			references Lane
				on delete cascade,
	ServiceModeID bigint not null
		constraint LegCost_ServiceModeID_FK
			references ServiceMode
				on delete cascade,
	unique (LaneID, ServiceModeID)
		with (fillfactor = 80)
)
go

create index IX1
	on LegCost (LaneID)
		with (fillfactor = 80)
go

create index IX2
	on LegCost (ServiceModeID)
		with (fillfactor = 80)
go

create index IX1
	on Terminal (RegionID)
		with (fillfactor = 80)
go

create index IX2
	on Terminal (CityID)
		with (fillfactor = 80)
go

create table TerminalConversion
(
	column1 nvarchar(50) not null,
	column2 int not null
)
go

create table TerminalCost
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TerminalCostID bigint identity
		primary key
			with (fillfactor = 80)
,
	IsIntraRegionMovementEnabled bit not null,
	IntraRegionMovementFactor numeric(19,6) not null,
	Cost nvarchar(max) not null,
	ServiceOfferingID bigint not null
		constraint TerminalCost_ServiceOfferingID_FK
			references ServiceOffering
				on delete cascade,
	TerminalID bigint not null
		constraint TerminalCost_TerminalID_FK
			references Terminal
				on delete cascade,
	unique (TerminalID, ServiceOfferingID)
		with (fillfactor = 80)
)
go

create index IX1
	on TerminalCost (TerminalID)
		with (fillfactor = 80)
go

create index IX2
	on TerminalCost (ServiceOfferingID)
		with (fillfactor = 80)
go

create table TerminalCostWeightBreakLevel
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	WeightBreakLevelID bigint identity
		primary key
			with (fillfactor = 80)
,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null,
	ServiceOfferingID bigint not null
		constraint TerminalCostWeightBreakLevel_ServiceOfferingID_FK
			references ServiceOffering
				on delete cascade,
	unique (ServiceOfferingID, WeightBreakLowerBound)
		with (fillfactor = 80)
,
	unique (ServiceOfferingID, WeightBreakLevelName)
		with (fillfactor = 80)
)
go

create index IX
	on TerminalCostWeightBreakLevel (ServiceOfferingID)
		with (fillfactor = 80)
go

create table TerminalCostWeightBreakLevel_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	WeightBreakLevelVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	WeightBreakLevelName nvarchar(50) not null,
	WeightBreakLowerBound int not null,
	ServiceOfferingVersionID bigint not null
		constraint TerminalCostWeightBreakLevel_History_ServiceOfferingVersionID_FK
			references ServiceOffering_History,
	WeightBreakLevelID bigint not null
		constraint TerminalCostWeightBreakLevel_History_WeightBreakLevelID_FK
			references TerminalCostWeightBreakLevel
				on delete cascade,
	unique (WeightBreakLevelID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on TerminalCostWeightBreakLevel_History (ServiceOfferingVersionID)
		with (fillfactor = 80)
go

create index IX2
	on TerminalCostWeightBreakLevel_History (WeightBreakLevelID)
		with (fillfactor = 80)
go

create unique index TerminalCostWeightBreakLevel_History_Unique
	on TerminalCostWeightBreakLevel_History (WeightBreakLevelID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table TerminalServicePoint
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TerminalServicePointID bigint identity
		primary key
			with (fillfactor = 80)
,
	ExtraMiles int not null,
	ServicePointID bigint not null
		unique
			with (fillfactor = 80)
		constraint TerminalServicePoint_ServicePointID_FK
			references ServicePoint
				on delete cascade,
	TerminalID bigint not null
		constraint TerminalServicePoint_TerminalID_FK
			references Terminal
)
go

create index IX1
	on TerminalServicePoint (TerminalID)
		with (fillfactor = 80)
go

create table Terminal_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TerminalVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	TerminalCode nvarchar(3) not null,
	TerminalName nvarchar(40) not null,
	CityVersionID bigint not null
		constraint Terminal_History_CityVersionID_FK
			references City_History,
	RegionVersionID bigint not null
		constraint Terminal_History_RegionVersionID_FK
			references Region_History,
	TerminalID bigint not null
		constraint Terminal_History_TerminalID_FK
			references Terminal
				on delete cascade,
	unique (TerminalID, VersionNum)
		with (fillfactor = 80)
)
go

create table BrokerContractCost_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	BrokerContractCostVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	Cost nvarchar(max) not null,
	BrokerContractCostID bigint not null
		constraint BrokerContractCost_History_BrokerContractCostID_FK
			references BrokerContractCost
				on delete cascade,
	ServiceLevelVersionID bigint
		constraint BrokerContractCost_History_ServiceLevelVersionID_FK
			references ServiceLevel_History,
	TerminalVersionID bigint not null
		constraint BrokerContractCost_History_TerminalVersionID_FK
			references Terminal_History,
	SubServiceLevelVersionID bigint
		constraint BrokerContractCost_History_SubServiceLevelVersionID_4d6232a0_fk_SubServiceLevel_History_SubServiceLevelVersionID
			references SubServiceLevel_History,
	unique (BrokerContractCostID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index BrokerContractCost_History_Unique
	on BrokerContractCost_History (BrokerContractCostID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on BrokerContractCost_History (BrokerContractCostID)
		with (fillfactor = 80)
go

create index IX2
	on BrokerContractCost_History (TerminalVersionID)
		with (fillfactor = 80)
go

create index IX3
	on BrokerContractCost_History (ServiceLevelVersionID)
		with (fillfactor = 80)
go

create index BrokerContractCost_History_SubServiceLevelVersionID_4d6232a0
	on BrokerContractCost_History (SubServiceLevelVersionID)
go

create table Lane_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LaneVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	IsHeadhaul bit not null,
	DestinationTerminalVersionID bigint not null
		constraint Lane_History_DestinationTerminalVersionID_FK
			references Terminal_History,
	LaneID bigint not null
		constraint Lane_History_LaneID_FK
			references Lane
				on delete cascade,
	OriginTerminalVersionID bigint not null
		constraint Lane_History_OriginTerminalVersionID_FK
			references Terminal_History,
	ServiceLevelVersionID bigint
		constraint Lane_History_ServiceLevelVersionID_FK
			references ServiceLevel_History,
	SubServiceLevelVersionID bigint
		constraint Lane_History_SubServiceLevelVersionID_45b297cc_fk_SubServiceLevel_History_SubServiceLevelVersionID
			references SubServiceLevel_History,
	unique (LaneID, VersionNum)
		with (fillfactor = 80)
)
go

create table DockRoute_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	DockRouteVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RouteLegs nvarchar(max) not null,
	DockRouteID bigint not null
		constraint DockRoute_History_DockRouteID_FK
			references DockRoute
				on delete cascade,
	LaneVersionID bigint not null
		constraint DockRoute_History_LaneVersionID_FK
			references Lane_History,
	unique (DockRouteID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index DockRoute_History_Unique
	on DockRoute_History (DockRouteID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on DockRoute_History (DockRouteID)
		with (fillfactor = 80)
go

create index IX2
	on DockRoute_History (LaneVersionID)
		with (fillfactor = 80)
go

create table LaneCost_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LaneCostVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	Cost nvarchar(max) not null,
	MinimumCost numeric(19,6) not null,
	LaneCostID bigint not null
		constraint LaneCost_History_LaneCostID_FK
			references LaneCost
				on delete cascade,
	LaneVersionID bigint not null
		constraint LaneCost_History_LaneVersionID_FK
			references Lane_History,
	unique (LaneCostID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on LaneCost_History (LaneCostID)
		with (fillfactor = 80)
go

create index IX2
	on LaneCost_History (LaneVersionID)
		with (fillfactor = 80)
go

create unique index LaneCost_History_Unique
	on LaneCost_History (LaneCostID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table LaneRoute_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LaneRouteVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RouteLegs nvarchar(max) not null,
	LaneRouteID bigint not null
		constraint LaneRoute_History_LaneRouteID_FK
			references LaneRoute
				on delete cascade,
	LaneVersionID bigint not null
		constraint LaneRoute_History_LaneVersionID_FK
			references Lane_History,
	unique (LaneRouteID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX@
	on LaneRoute_History (LaneVersionID)
		with (fillfactor = 80)
go

create index IX1
	on LaneRoute_History (LaneRouteID)
		with (fillfactor = 80)
go

create unique index LaneRoute_History_Unique
	on LaneRoute_History (LaneRouteID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on Lane_History (LaneID)
		with (fillfactor = 80)
go

create index IX2
	on Lane_History (OriginTerminalVersionID)
		with (fillfactor = 80)
go

create index IX3
	on Lane_History (DestinationTerminalVersionID)
		with (fillfactor = 80)
go

create index IX4
	on Lane_History (ServiceLevelVersionID)
		with (fillfactor = 80)
go

create unique index Lane_History_Unique
	on Lane_History (LaneID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index Lane_History_SubServiceLevelVersionID_45b297cc
	on Lane_History (SubServiceLevelVersionID)
go

create table LegCost_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LegCostVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	Cost nvarchar(max) not null,
	LaneVersionID bigint not null
		constraint LegCost_History_LaneVersionID_FK
			references Lane_History,
	LegCostID bigint not null
		constraint LegCost_History_LegCostID_FK
			references LegCost
				on delete cascade,
	ServiceModeVersionID bigint not null
		constraint LegCost_History_ServiceModeVersionID_FK
			references ServiceMode_History,
	unique (LegCostID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on LegCost_History (LegCostID)
		with (fillfactor = 80)
go

create index IX2
	on LegCost_History (LaneVersionID)
		with (fillfactor = 80)
go

create index IX3
	on LegCost_History (ServiceModeVersionID)
		with (fillfactor = 80)
go

create unique index LegCost_History_Unique
	on LegCost_History (LegCostID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table TerminalCost_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TerminalCostVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	IsIntraRegionMovementEnabled bit not null,
	IntraRegionMovementFactor numeric(19,6) not null,
	Cost nvarchar(max) not null,
	ServiceOfferingVersionID bigint not null
		constraint TerminalCost_History_ServiceOfferingVersionID_FK
			references ServiceOffering_History,
	TerminalCostID bigint not null
		constraint TerminalCost_History_TerminalCostID_FK
			references TerminalCost
				on delete cascade,
	TerminalVersionID bigint not null
		constraint TerminalCost_History_TerminalVersionID_FK
			references Terminal_History,
	unique (TerminalCostID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX@
	on TerminalCost_History (ServiceOfferingVersionID)
		with (fillfactor = 80)
go

create index IX1
	on TerminalCost_History (TerminalCostID)
		with (fillfactor = 80)
go

create index IX3
	on TerminalCost_History (TerminalVersionID)
		with (fillfactor = 80)
go

create unique index TerminalCost_History_Unique
	on TerminalCost_History (TerminalCostID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table TerminalServicePoint_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TerminalServicePointVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ExtraMiles int not null,
	ServicePointVersionID bigint not null
		constraint TerminalServicePoint_History_ServicePointVersionID_FK
			references ServicePoint_History,
	TerminalServicePointID bigint not null
		constraint TerminalServicePoint_History_TerminalServicePointID_FK
			references TerminalServicePoint
				on delete cascade,
	TerminalVersionID bigint not null
		constraint TerminalServicePoint_History_TerminalVersionID_FK
			references Terminal_History,
	unique (TerminalServicePointID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on TerminalServicePoint_History (TerminalServicePointID)
		with (fillfactor = 80)
go

create index IX2
	on TerminalServicePoint_History (ServicePointVersionID)
		with (fillfactor = 80)
go

create index IX3
	on TerminalServicePoint_History (TerminalVersionID)
		with (fillfactor = 80)
go

create unique index TerminalServicePoint_History_Unique
	on TerminalServicePoint_History (TerminalServicePointID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on Terminal_History (CityVersionID)
		with (fillfactor = 80)
go

create index IX2
	on Terminal_History (RegionVersionID)
		with (fillfactor = 80)
go

create index IX3
	on Terminal_History (TerminalID)
		with (fillfactor = 80)
go

create unique index Terminal_History_Unique
	on Terminal_History (TerminalID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table Unit
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UnitID bigint identity
		primary key
			with (fillfactor = 80)
,
	UnitName nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	UnitSymbol nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	UnitType nvarchar(50) not null
)
go

create table UnitConversion
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UnitConversionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ConversionFactor numeric(19,6) not null,
	FromUnitID bigint not null
		constraint UnitConversion_FromUnitID_FK
			references Unit
				on delete cascade,
	ToUnitID bigint not null
		constraint UnitConversion_ToUnitID_FK
			references Unit,
	unique (FromUnitID, ToUnitID)
		with (fillfactor = 80)
)
go

create index IX1
	on UnitConversion (FromUnitID)
		with (fillfactor = 80)
go

create index IX2
	on UnitConversion (ToUnitID)
		with (fillfactor = 80)
go

create table Unit_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UnitVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	UnitName nvarchar(50) not null,
	UnitSymbol nvarchar(50) not null,
	UnitType nvarchar(50) not null,
	UnitID bigint not null
		constraint Unit_History_UnitID_FK
			references Unit
				on delete cascade,
	unique (UnitID, VersionNum)
		with (fillfactor = 80)
)
go

create table UnitConversion_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UnitConversionVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ConversionFactor numeric(19,6) not null,
	FromUnitVersionID bigint not null
		constraint UnitConversion_History_FromUnitVersionID_FK
			references Unit_History,
	ToUnitVersionID bigint not null
		constraint UnitConversion_History_ToUnitVersionID_FK
			references Unit_History,
	UnitConversionID bigint not null
		constraint UnitConversion_History_UnitConversionID_FK
			references UnitConversion
				on delete cascade,
	unique (UnitConversionID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on UnitConversion_History (UnitConversionID)
		with (fillfactor = 80)
go

create index IX2
	on UnitConversion_History (FromUnitVersionID)
		with (fillfactor = 80)
go

create index IX3
	on UnitConversion_History (ToUnitVersionID)
		with (fillfactor = 80)
go

create unique index UnitConversion_History_Unique
	on UnitConversion_History (UnitConversionID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on Unit_History (UnitID)
		with (fillfactor = 80)
go

create unique index Unit_History_Unique
	on Unit_History (UnitID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table [User]
(
	password nvarchar(128) not null,
	last_login datetime2,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UserID bigint identity
		primary key
			with (fillfactor = 80)
,
	UserName nvarchar(50) not null,
	UserEmail nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	AzureID nvarchar(36),
	PersonaID bigint
		constraint User_PersonaID_FK
			references Persona
				on delete cascade,
	AzureIsActive bit not null,
	IsAway bit not null,
	HasSelfAssign bit not null,
	CanProcessSCS bit not null,
	CanProcessRequests bit not null,
	CanProcessReviews bit not null,
	UserManagerID bigint
		constraint User_UserManagerID_FK
			references [User]
)
go

create table Account
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	AccountID bigint identity
		primary key
			with (fillfactor = 80)
,
	AccountNumber nvarchar(50) not null,
	AccountName nvarchar(100) not null,
	AccountAlias nvarchar(100),
	AddressLine1 nvarchar(100) not null,
	AddressLine2 nvarchar(100),
	PostalCode nvarchar(10) not null,
	ContactName nvarchar(100),
	ContactTitle nvarchar(100),
	Phone nvarchar(100),
	Email nvarchar(100),
	Website nvarchar(100),
	AccountOwnerID bigint
		constraint Account_AccountOwner_FK
			references [User]
				on delete cascade,
	CityID bigint
		constraint Account_CityID_1f69d611_fk_City_CityID
			references City,
	ExternalCityName nvarchar(100),
	ExternalERPID nvarchar(100)
)
go

create unique index Account_Unique
	on Account (AccountNumber)
	where [AccountNumber] IS NOT NULL
		with (fillfactor = 80)
go

create index IX
	on Account (AccountOwnerID)
		with (fillfactor = 80)
go

create table AccountTree
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	AccountTreeID bigint identity
		primary key
			with (fillfactor = 80)
,
	AccountID bigint not null
		unique
			with (fillfactor = 80)
		constraint AccountTree_AccountID_FK
			references Account
				on delete cascade,
	ParentAccountID bigint
		constraint AccountTree_ParentAccountID_FK
			references Account
)
go

create index IX
	on AccountTree (ParentAccountID)
		with (fillfactor = 80)
go

create table Customer
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CustomerID bigint identity
		primary key
			with (fillfactor = 80)
,
	CustomerName nvarchar(100),
	CustomerAlias nvarchar(100),
	CustomerAddressLine1 nvarchar(100),
	CustomerAddressLine2 nvarchar(100),
	PostalCode nvarchar(10),
	ContactName nvarchar(100),
	ContactTitle nvarchar(100),
	Phone nvarchar(100),
	Email nvarchar(100),
	Website nvarchar(100),
	IsValidData bit not null,
	AccountID bigint
		constraint Customer_AccountID_FK
			references Account
				on delete cascade,
	CityID bigint
		constraint Customer_CityID_FK
			references City,
	ServiceLevelID bigint not null
		constraint Customer_ServiceLevelID_FK
			references ServiceLevel
				on delete cascade
)
go

create unique index Customer_Unique
	on Customer (AccountID, ServiceLevelID)
	where [AccountID] IS NOT NULL
		with (fillfactor = 80)
go

create index IX1
	on Customer (AccountID, ServiceLevelID)
		with (fillfactor = 80)
go

create index IX2
	on Customer (CustomerName)
		with (fillfactor = 80)
go

create index IX3
	on Customer (AccountID)
		with (fillfactor = 80)
go

create index IX4
	on Customer (CityID)
		with (fillfactor = 80)
go

create index IX5
	on Customer (ServiceLevelID)
		with (fillfactor = 80)
go

create table ImportFile
(
	id char(32) not null
		primary key
			with (fillfactor = 80)
,
	FileName nvarchar(max) not null,
	RecordCount int not null,
	UniStatus nvarchar(max) not null,
	CreatedOn datetime2 not null,
	UpdatedOn datetime2 not null,
	CreatedBy bigint not null
		constraint ImportFile_CreatedBy_7c3f4572_fk_User_UserID
			references [User],
	RequestSectionID nvarchar(max),
	UniType nvarchar(max) not null,
	RateType nvarchar(max) not null,
	BetweenLaneCount int not null,
	DirectionalLaneCount int not null,
	DuplicateLaneCount int not null
)
go

create index ImportFile_CreatedBy_7c3f4572
	on ImportFile (CreatedBy)
		with (fillfactor = 80)
go

create table LastAssignedUser
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	LastAssignedUserID bigint identity
		primary key
			with (fillfactor = 80)
,
	PersonaName nvarchar(50) not null,
	ServiceLevelID bigint not null
		constraint LastAssignedUser_ServiceLevelID_FK
			references ServiceLevel
				on delete cascade,
	UserID bigint not null
		constraint LastAssignedUser_UserID_FK
			references [User]
				on delete cascade
)
go

create unique index UQ__LastAssi__FE076743E07BE18D
	on LastAssignedUser (PersonaName, ServiceLevelID, IsActive)
		with (fillfactor = 90)
go

create index IX1
	on LastAssignedUser (PersonaName)
		with (fillfactor = 80)
go

create index IX2
	on LastAssignedUser (ServiceLevelID)
		with (fillfactor = 80)
go

create table Notification
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	NotificationID bigint identity
		primary key
			with (fillfactor = 80)
,
	Message nvarchar(max) not null,
	Timestamp datetime2 not null,
	IsRead bit not null,
	UserID bigint not null
		constraint Notification_UserID_FK
			references [User]
				on delete cascade,
	Meta nvarchar(max)
)
go

create index IX
	on Notification (UserID)
		with (fillfactor = 80)
go

create table RequestInformation
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestInformationID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	IsValidData bit not null,
	IsNewBusiness bit,
	IsPayingByCreditCard bit,
	IsExtendedPayment bit,
	ExtendedPaymentDays int,
	Priority int,
	CurrencyID bigint
		constraint RequestInformation_CurrencyID_FK
			references Currency
				on delete cascade,
	CustomerID bigint not null
		constraint RequestInformation_CustomerID_FK
			references Customer,
	LanguageID bigint
		constraint RequestInformation_LanguageID_FK
			references Language
				on delete cascade,
	RequestTypeID bigint
		constraint RequestInformation_RequestTypeID_FK
			references RequestType
				on delete cascade,
	ExtendedPaymentTermsMargin float,
	EffectiveDate date,
	ExpiryDate date
)
go

create table Request
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	RequestCode nvarchar(32),
	InitiatedOn datetime2 not null,
	SubmittedOn datetime2,
	IsValidData bit not null,
	InitiatedBy bigint not null
		constraint Request_InitiatedBy_FK
			references [User]
				on delete cascade,
	RequestAccessorialsID bigint
		constraint Request_RequestAccessorialsID_FK
			references RequestAccessorials
				on delete cascade,
	RequestInformationID bigint
		constraint Request_RequestInformationID_FK
			references RequestInformation
				on delete cascade,
	RequestLaneID bigint
		constraint Request_RequestLaneID_FK
			references RequestLane
				on delete cascade,
	RequestProfileID bigint
		constraint Request_RequestProfileID_FK
			references RequestProfile
				on delete cascade,
	SubmittedBy bigint
		constraint Request_SubmittedBy_FK
			references [User],
	IsReview bit not null,
	RequestOwner bigint
		constraint Request_RequestOwner_ad7218ed_fk_User_UserID
			references [User],
	SpeedsheetName nvarchar(max),
	UniType nvarchar(max),
	LanguageID bigint
		constraint Request_LanguageID_07989c73_fk_Language_LanguageID
			references Language
)
go

create index IX1
	on Request (InitiatedBy)
		with (fillfactor = 80)
go

create index IX2
	on Request (RequestAccessorialsID)
		with (fillfactor = 80)
go

create index IX3
	on Request (RequestInformationID)
		with (fillfactor = 80)
go

create index IX4
	on Request (RequestLaneID)
		with (fillfactor = 80)
go

create index IX5
	on Request (RequestProfileID)
		with (fillfactor = 80)
go

create index IX6
	on Request (SubmittedBy)
		with (fillfactor = 80)
go

create index IX7
	on Request (IsReview)
		with (fillfactor = 80)
go

create unique index Request_Unique
	on Request (RequestCode)
	where [RequestCode] IS NOT NULL
		with (fillfactor = 80)
go

create index Request_RequestOwner_ad7218ed
	on Request (RequestOwner)
		with (fillfactor = 80)
go

create index Request_LanguageID_07989c73
	on Request (LanguageID)
		with (fillfactor = 80)
go

create table RequestEditorRight
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestEditorRightID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestID bigint not null
		constraint RequestEditorRight_RequestID_FK
			references Request,
	UserID bigint not null
		constraint RequestEditorRight_UserID_FK
			references [User],
	NotificationID bigint not null
		constraint RequestEditorRight_NotificationID_FK
			references Notification,
	unique (RequestID, UserID, NotificationID)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestEditorRight (RequestID)
		with (fillfactor = 80)
go

create index IX2
	on RequestEditorRight (UserID)
		with (fillfactor = 80)
go

create index IX3
	on RequestEditorRight (RequestID, UserID)
		with (fillfactor = 80)
go

create index IX1
	on RequestInformation (RequestTypeID)
		with (fillfactor = 80)
go

create index IX2
	on RequestInformation (LanguageID)
		with (fillfactor = 80)
go

create index IX3
	on RequestInformation (CustomerID)
		with (fillfactor = 80)
go

create index IX4
	on RequestInformation (CurrencyID)
		with (fillfactor = 80)
go

create table RequestQueue
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestQueueID bigint identity
		primary key
			with (fillfactor = 80)
,
	UserPersona nvarchar(50) not null,
	AssignedOn datetime2 not null,
	DueDate datetime2,
	CompletedOn datetime2,
	IsSecondary bit not null,
	IsFinal bit not null,
	IsActionable bit not null,
	Attachment nvarchar(max),
	RequestID bigint not null
		constraint RequestQueue_RequestID_FK
			references Request
				on delete cascade,
	RequestStatusTypeID bigint not null
		constraint RequestQueue_RequestStatusTypeID_FK
			references RequestStatusType
				on delete cascade,
	UserID bigint not null
		constraint RequestQueue_UserID_FK
			references [User]
)
go

create index IX1
	on RequestQueue (RequestID)
		with (fillfactor = 80)
go

create index IX2
	on RequestQueue (UserID)
		with (fillfactor = 80)
go

create index IX3
	on RequestQueue (RequestStatusTypeID)
		with (fillfactor = 80)
go

create index IX4
	on RequestQueue (AssignedOn)
		with (fillfactor = 80)
go

create index IX5
	on RequestQueue (DueDate)
		with (fillfactor = 80)
go

create index IX6
	on RequestQueue (CompletedOn)
		with (fillfactor = 80)
go

create index IX7
	on RequestQueue (UserPersona)
		with (fillfactor = 80)
go

create index IX8
	on RequestQueue (IsSecondary)
		with (fillfactor = 80)
go

create index IX9
	on RequestQueue (IsFinal)
		with (fillfactor = 80)
go

create table RequestSectionLaneImportQueue
(
	id char(32) not null
		primary key
			with (fillfactor = 80)
,
	RequestSectionID nvarchar(max),
	SectionName nvarchar(max),
	RequestSectionLaneID nvarchar(max),
	OriginGroupTypeName nvarchar(max),
	OriginGroupCode nvarchar(max),
	OriginPointTypeName nvarchar(max),
	OriginPointCode nvarchar(max),
	DestinationGroupTypeName nvarchar(max),
	DestinationGroupCode nvarchar(max),
	DestinationPointTypeName nvarchar(max),
	DestinationPointCode nvarchar(max),
	IsBetween nvarchar(max),
	WeightBreak nvarchar(max) not null,
	StatusMessage nvarchar(max),
	UniStatus nvarchar(max) not null,
	CreatedOn datetime2 not null,
	UpdatedOn datetime2 not null,
	CreatedBy bigint not null
		constraint RequestSectionLaneImportQueue_CreatedBy_f4b64862_fk_User_UserID
			references [User],
	[File] char(32) not null
		constraint RequestSectionLaneImportQueue_File_c0c627d7_fk_ImportFile_id
			references ImportFile,
	DestinationGroupId nvarchar(max),
	DestinationGroupTypeId nvarchar(max),
	DestinationPointId nvarchar(max),
	DestinationPointTypeId nvarchar(max),
	OriginGroupTypeId nvarchar(max),
	OriginGroupId nvarchar(max),
	OriginPointId nvarchar(max),
	OriginPointTypeId nvarchar(max),
	UniType nvarchar(max) not null,
	InitialRecOrder int
)
go

create index RequestSectionLaneImportQueue_CreatedBy_f4b64862
	on RequestSectionLaneImportQueue (CreatedBy)
		with (fillfactor = 80)
go

create index RequestSectionLaneImportQueue_File_c0c627d7
	on RequestSectionLaneImportQueue ([File])
		with (fillfactor = 80)
go

create table RequestSectionLanePricingPointImportQueue
(
	id char(32) not null
		primary key
			with (fillfactor = 80)
,
	RequestSectionID nvarchar(max),
	SectionName nvarchar(max),
	RequestSectionLaneID nvarchar(max),
	OriginPointCode nvarchar(max),
	DestinationPointCode nvarchar(max),
	RequestSectionLanePricingPointID nvarchar(max),
	OriginPostCodeID nvarchar(max),
	OriginPostalCodeName nvarchar(max),
	DestinationPostCodeID nvarchar(max),
	DestinationPostalCodeName nvarchar(max),
	WeightBreak nvarchar(max) not null,
	StatusMessage nvarchar(max),
	UniStatus nvarchar(max) not null,
	CreatedOn datetime2 not null,
	UpdatedOn datetime2 not null,
	CreatedBy bigint not null
		constraint RequestSectionLanePricingPointImportQueue_CreatedBy_d2ddc88d_fk_User_UserID
			references [User],
	[File] char(32) not null
		constraint RequestSectionLanePricingPointImportQueue_File_79baf973_fk_ImportFile_id
			references ImportFile,
	DestinationPostalCodeId int,
	OriginPostalCodeId int,
	UniType nvarchar(max) not null,
	InitialRecOrder int
)
go

create index RequestSectionLanePricingPointImportQueue_CreatedBy_d2ddc88d
	on RequestSectionLanePricingPointImportQueue (CreatedBy)
		with (fillfactor = 80)
go

create index RequestSectionLanePricingPointImportQueue_File_79baf973
	on RequestSectionLanePricingPointImportQueue ([File])
		with (fillfactor = 80)
go

create table RequestStatus
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestStatusID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestID bigint not null
		unique
			with (fillfactor = 80)
		constraint RequestStatus_RequestID_FK
			references Request
				on delete cascade,
	SalesRepresentativeID bigint
		constraint RequestStatus_SalesRepresentativeID_FK
			references [User],
	PricingAnalystID bigint
		constraint RequestStatus_PricingAnalystID_FK
			references [User],
	CreditAnalystID bigint
		constraint RequestStatus_CreditAnalystID_FK
			references [User],
	CurrentEditorID bigint
		constraint RequestStatus_CurrentEditorID_FK
			references [User],
	RequestStatusTypeID bigint
		constraint RequestStatus_RequestStatusTypeID_FK
			references RequestStatusType
				on delete cascade
)
go

create index IX1
	on RequestStatus (PricingAnalystID)
		with (fillfactor = 80)
go

create index IX2
	on RequestStatus (CurrentEditorID)
		with (fillfactor = 80)
go

create index IX3
	on RequestStatus (SalesRepresentativeID)
		with (fillfactor = 80)
go

create index IX4
	on RequestStatus (RequestStatusTypeID)
		with (fillfactor = 80)
go

create index IX5
	on RequestStatus (CreditAnalystID)
		with (fillfactor = 80)
go

create table Tariff
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TariffID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestID bigint not null
		unique
			with (fillfactor = 80)
		constraint Tariff_RequestID_FK
			references Request
				on delete cascade,
	RequestNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	PublishedOn datetime2,
	ExpiresOn datetime2,
	DocumentUrl nvarchar(max),
	IsValidData bit not null
)
go

create index IX1
	on [User] (AzureIsActive)
		with (fillfactor = 80)
go

create index IX2
	on [User] (IsAway)
		with (fillfactor = 80)
go

create index IX3
	on [User] (HasSelfAssign)
		with (fillfactor = 80)
go

create index IX4
	on [User] (PersonaID)
		with (fillfactor = 80)
go

create index IX5
	on [User] (UserManagerID)
		with (fillfactor = 80)
go

create table UserServiceLevel
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UserServiceLevelID bigint identity
		primary key
			with (fillfactor = 80)
,
	UserID bigint not null
		constraint UserServiceLevel_UserID_FK
			references [User]
				on delete cascade,
	ServiceLevelID bigint not null
		constraint UserServiceLevel_ServiceLevelID_FK
			references ServiceLevel
				on delete cascade,
	unique (UserID, ServiceLevelID)
		with (fillfactor = 90)
)
go

create index IX1
	on UserServiceLevel (UserID)
		with (fillfactor = 80)
go

create index IX2
	on UserServiceLevel (ServiceLevelID)
		with (fillfactor = 80)
go

create table UserTree
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UserTreeID bigint identity
		primary key
			with (fillfactor = 80)
,
	SalesManagerID bigint
		constraint UserTree_SalesManagerID_FK
			references [User],
	UserManagerID bigint
		constraint UserTree_UserManagerID_FK
			references [User],
	UserID bigint not null
		unique
			with (fillfactor = 80)
		constraint UserTree_UserID_FK
			references [User]
				on delete cascade
)
go

create index IX1
	on UserTree (UserID)
		with (fillfactor = 80)
go

create index IX2
	on UserTree (UserManagerID)
		with (fillfactor = 80)
go

create index IX3
	on UserTree (SalesManagerID)
		with (fillfactor = 80)
go

create table User_History
(
	password nvarchar(128) not null,
	last_login datetime2,
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UserVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	UserName nvarchar(50) not null,
	UserEmail nvarchar(50) not null,
	AzureID nvarchar(36),
	PersonaVersionID bigint
		constraint User_History_PersonaVersionID_FK
			references Persona_History,
	UserID bigint not null
		constraint User_History_UserID_FK
			references [User]
				on delete cascade,
	AzureIsActive bit not null,
	IsAway bit not null,
	HasSelfAssign bit not null,
	CanProcessSCS bit not null,
	CanProcessRequests bit not null,
	CanProcessReviews bit not null,
	UserManagerVersionID bigint
		constraint User_History_UserManagerVersionID_FK
			references User_History,
	unique (UserID, VersionNum)
		with (fillfactor = 80)
)
go

create table Account_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	AccountVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	AccountNumber nvarchar(50) not null,
	AccountName nvarchar(100) not null,
	AccountAlias nvarchar(100),
	AddressLine1 nvarchar(100) not null,
	AddressLine2 nvarchar(100),
	PostalCode nvarchar(10) not null,
	ContactName nvarchar(100),
	ContactTitle nvarchar(100),
	Phone nvarchar(100),
	Email nvarchar(100),
	Website nvarchar(100),
	AccountID bigint not null
		constraint Account_History_AccountID_FK
			references Account
				on delete cascade,
	AccountOwnerVersionID bigint
		constraint Account_History_AccountOwnerVersion_FK
			references User_History,
	CityVersionID bigint
		constraint Account_History_CityVersionID_fb1a6d8b_fk_City_History_CityVersionID
			references City_History,
	ExternalCityName nvarchar(100),
	ExternalERPID nvarchar(100),
	unique (AccountID, VersionNum)
		with (fillfactor = 80)
)
go

create table AccountTree_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	AccountTreeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	AccountTreeID bigint not null
		constraint AccountTree_History_AccountTreeID_FK
			references AccountTree
				on delete cascade,
	AccountVersionID bigint not null
		constraint AccountTree_History_AccountVersionID_FK
			references Account_History,
	ParentAccountVersionID bigint
		constraint AccountTree_History_ParentAccountVersionID_FK
			references Account_History,
	unique (AccountTreeID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index AccountTree_History_Unique
	on AccountTree_History (AccountTreeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on AccountTree_History (AccountTreeID)
		with (fillfactor = 80)
go

create index IX2
	on AccountTree_History (AccountVersionID)
		with (fillfactor = 80)
go

create index IX3
	on AccountTree_History (ParentAccountVersionID)
		with (fillfactor = 80)
go

create unique index Account_History_Unique
	on Account_History (AccountID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on Account_History (AccountID)
		with (fillfactor = 80)
go

create index IX2
	on Account_History (AccountOwnerVersionID)
		with (fillfactor = 80)
go

create table Customer_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	CustomerVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	CustomerName nvarchar(100),
	CustomerAlias nvarchar(100),
	CustomerAddressLine1 nvarchar(100),
	CustomerAddressLine2 nvarchar(100),
	PostalCode nvarchar(10),
	ContactName nvarchar(100),
	ContactTitle nvarchar(100),
	Phone nvarchar(100),
	Email nvarchar(100),
	Website nvarchar(100),
	IsValidData bit not null,
	AccountVersionID bigint
		constraint Customer_History_AccountVersionID_FK
			references Account_History,
	CityVersionID bigint
		constraint Customer_History_CityVersionID_FK
			references City_History,
	CustomerID bigint not null
		constraint Customer_History_CustomerID_FK
			references Customer
				on delete cascade,
	ServiceLevelVersionID bigint not null
		constraint Customer_History_ServiceLevelVersionID_FK
			references ServiceLevel_History,
	unique (CustomerID, VersionNum)
		with (fillfactor = 80)
)
go

create unique index Customer_History_Unique
	on Customer_History (CustomerID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on Customer_History (AccountVersionID)
		with (fillfactor = 80)
go

create index IX2
	on Customer_History (CityVersionID)
		with (fillfactor = 80)
go

create index IX3
	on Customer_History (CustomerID)
		with (fillfactor = 80)
go

create index IX4
	on Customer_History (ServiceLevelVersionID)
		with (fillfactor = 80)
go

create table Notification_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	NotificationVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	Message nvarchar(max) not null,
	Timestamp datetime2 not null,
	IsRead bit not null,
	NotificationID bigint not null
		constraint Notification_History_NotificationID_FK
			references Notification
				on delete cascade,
	UserVersionID bigint not null
		constraint Notification_History_UserID_FK
			references User_History,
	unique (NotificationID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on Notification_History (NotificationID)
		with (fillfactor = 80)
go

create unique index Notification_History_Unique
	on Notification_History (NotificationID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestInformation_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestInformationVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null,
	IsValidData bit not null,
	IsNewBusiness bit,
	IsPayingByCreditCard bit,
	IsExtendedPayment bit,
	ExtendedPaymentDays int,
	Priority int,
	CurrencyVersionID bigint
		constraint RequestInformation_History_CurrencyVersionID_FK
			references Currency_History,
	CustomerVersionID bigint not null
		constraint RequestInformation_History_CustomerVersionID_FK
			references Customer_History,
	LanguageVersionID bigint
		constraint RequestInformation_History_LanguageVersionID_FK
			references Language_History,
	RequestInformationID bigint not null
		constraint RequestInformation_History_RequestInformationID_FK
			references RequestInformation
				on delete cascade,
	RequestTypeVersionID bigint
		constraint RequestInformation_History_RequestTypeVersionID_FK
			references RequestType_History,
	ExtendedPaymentTermsMargin float,
	EffectiveDate date,
	ExpiryDate date,
	unique (RequestInformationID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestInformation_History (CurrencyVersionID)
		with (fillfactor = 80)
go

create index IX2
	on RequestInformation_History (CustomerVersionID)
		with (fillfactor = 80)
go

create index IX3
	on RequestInformation_History (LanguageVersionID)
		with (fillfactor = 80)
go

create index IX4
	on RequestInformation_History (RequestInformationID)
		with (fillfactor = 80)
go

create index IX5
	on RequestInformation_History (RequestTypeVersionID)
		with (fillfactor = 80)
go

create unique index RequestInformation_History_Unique
	on RequestInformation_History (RequestInformationID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table Request_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestNumber nvarchar(32) not null,
	RequestCode nvarchar(32) not null,
	InitiatedOn datetime2 not null,
	SubmittedOn datetime2,
	IsValidData bit not null,
	InitiatedByVersion bigint not null
		constraint Request_History_InitiatedByVersion_FK
			references User_History,
	RequestID bigint not null
		constraint Request_History_RequestID_FK
			references Request
				on delete cascade,
	RequestAccessorialsVersionID bigint
		constraint Request_History_RequestAccessorialsVersionID_FK
			references RequestAccessorials_History,
	RequestInformationVersionID bigint
		constraint Request_History_RequestInformationVersionID_FK
			references RequestInformation_History,
	RequestLaneVersionID bigint
		constraint Request_History_RequestLaneVersionID_FK
			references RequestLane_History,
	RequestProfileVersionID bigint
		constraint Request_History_RequestProfileVersionID_FK
			references RequestProfile_History,
	SubmittedByVersion bigint
		constraint Request_History_SubmittedByVersion_FK
			references User_History,
	IsReview bit not null,
	SpeedsheetName nvarchar(max),
	UniType nvarchar(max),
	LanguageID bigint
		constraint Request_History_LanguageID_2eca38dd_fk_Language_LanguageID
			references Language,
	unique (RequestID, VersionNum)
		with (fillfactor = 80)
)
go

create table RequestEditorRight_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestEditorRightVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestEditorRightID bigint not null
		constraint RequestEditorRight_History_RequestEditorRightID_FK
			references RequestEditorRight
				on delete cascade,
	RequestVersionID bigint not null
		constraint RequestEditorRight_History_RequestVersionID_FK
			references Request_History,
	UserVersionID bigint not null
		constraint RequestEditorRight_History_UserVersionID_FK
			references User_History,
	NotificationVersionID bigint not null
		constraint RequestEditorRight_History_NotificationVersionID_FK
			references Notification_History,
	unique (RequestEditorRightID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestEditorRight_History (RequestEditorRightID)
		with (fillfactor = 80)
go

create index IX2
	on RequestEditorRight_History (UserVersionID)
		with (fillfactor = 80)
go

create index IX3
	on RequestEditorRight_History (RequestVersionID)
		with (fillfactor = 80)
go

create index IX4
	on RequestEditorRight_History (RequestVersionID, UserVersionID)
		with (fillfactor = 80)
go

create unique index RequestEditorRight_History_Unique
	on RequestEditorRight_History (RequestEditorRightID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestQueue_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestQueueVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	UserPersona nvarchar(50) not null,
	AssignedOn datetime2 not null,
	DueDate datetime2,
	CompletedOn datetime2,
	IsSecondary bit not null,
	IsFinal bit not null,
	IsActionable bit not null,
	Attachment nvarchar(max),
	RequestQueueID bigint not null
		constraint RequestQueue_History_RequestQueueID_FK
			references RequestQueue
				on delete cascade,
	RequestStatusTypeVersionID bigint not null
		constraint RequestQueue_History_RequestStatusTypeVersionID_FK
			references RequestStatusType_History,
	RequestVersionID bigint not null
		constraint RequestQueue_History_RequestVersionID_FK
			references Request_History,
	UserVersionID bigint not null
		constraint RequestQueue_History_UserVersionID_FK
			references User_History,
	unique (RequestQueueID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestQueue_History (RequestQueueID)
		with (fillfactor = 80)
go

create index IX2
	on RequestQueue_History (RequestQueueVersionID)
		with (fillfactor = 80)
go

create unique index RequestQueue_History_Unique
	on RequestQueue_History (RequestQueueID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table RequestStatus_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestStatusVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestVersionID bigint not null
		constraint RequestStatus_History_RequestVersionID_FK
			references Request_History,
	RequestStatusID bigint not null
		constraint RequestStatus_History_RequestStatusVersionID_FK
			references RequestStatus
				on delete cascade,
	SalesRepresentativeVersionID bigint
		constraint RequestStatus_History_SalesRepresentativeVersionID_FK
			references User_History,
	PricingAnalystVersionID bigint
		constraint RequestStatus_History_PricingAnalystVersionID_FK
			references User_History,
	CreditAnalystVersionID bigint
		constraint RequestStatus_History_CreditAnalystVersionID_FK
			references User_History,
	CurrentEditorVersionID bigint
		constraint RequestStatus_History_CurrentEditorVersionID_FK
			references User_History,
	RequestStatusTypeVersionID bigint
		constraint RequestStatus_History_RequestStatusTypeVersionID_FK
			references RequestStatusType_History,
	unique (RequestStatusID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX
	on RequestStatus_History (RequestStatusID)
		with (fillfactor = 80)
go

create unique index RequestStatus_History_Unique
	on RequestStatus_History (RequestStatusID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on Request_History (InitiatedByVersion)
		with (fillfactor = 80)
go

create index IX2
	on Request_History (RequestAccessorialsVersionID)
		with (fillfactor = 80)
go

create index IX3
	on Request_History (RequestID)
		with (fillfactor = 80)
go

create index IX4
	on Request_History (RequestInformationVersionID)
		with (fillfactor = 80)
go

create index IX5
	on Request_History (RequestLaneVersionID)
		with (fillfactor = 80)
go

create index IX6
	on Request_History (RequestProfileVersionID)
		with (fillfactor = 80)
go

create index IX7
	on Request_History (SubmittedByVersion)
		with (fillfactor = 80)
go

create unique index Request_History_Unique
	on Request_History (RequestID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index Request_History_LanguageID_2eca38dd
	on Request_History (LanguageID)
		with (fillfactor = 80)
go

create table Tariff_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	TariffVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestVersionID bigint not null
		constraint Tariff_History_RequestVersionID_FK
			references Request_History,
	RequestNumber nvarchar(32) not null,
	PublishedOn datetime2,
	ExpiresOn datetime2,
	DocumentUrl nvarchar(max),
	IsValidData bit not null,
	TariffID bigint not null
		constraint Tariff_History_TariffID_FK
			references Tariff
				on delete cascade,
	unique (TariffID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on Tariff_History (RequestVersionID)
		with (fillfactor = 80)
go

create index IX2
	on Tariff_History (RequestNumber)
		with (fillfactor = 80)
go

create index IX3
	on Tariff_History (TariffID)
		with (fillfactor = 80)
go

create unique index Tariff_History_Unique
	on Tariff_History (TariffID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table UserServiceLevel_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UserServiceLevelVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	UserServiceLevelID bigint not null
		constraint UserServiceLevel_History_UserServiceLevelID_FK
			references UserServiceLevel
				on delete cascade,
	UserVersionID bigint not null
		constraint UserServiceLevel_History_UserVersionID_FK
			references User_History,
	ServiceLevelVersionID bigint not null
		constraint UserServiceLevel_History_ServiceLevelVersionID_FK
			references ServiceLevel_History,
	unique (UserServiceLevelID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on UserServiceLevel_History (UserServiceLevelID)
		with (fillfactor = 80)
go

create index IX2
	on UserServiceLevel_History (UserVersionID)
		with (fillfactor = 80)
go

create index IX3
	on UserServiceLevel_History (ServiceLevelVersionID)
		with (fillfactor = 80)
go

create unique index UserServiceLevel_History_Unique
	on UserServiceLevel_History (UserServiceLevelID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table UserTree_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	UserTreeVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	SalesManagerVersionID bigint
		constraint UserTree_History_SalesManagerVersionID_FK
			references User_History,
	UserManagerVersionID bigint
		constraint UserTree_History_UserManagerVersionID_FK
			references User_History,
	UserTreeID bigint not null
		constraint UserTree_History_UserTreeID_FK
			references UserTree
				on delete cascade,
	UserVersionID bigint not null
		constraint UserTree_History_UserVersionID_FK
			references User_History
)
go

create index IX1
	on UserTree_History (SalesManagerVersionID)
		with (fillfactor = 80)
go

create index IX2
	on UserTree_History (UserManagerVersionID)
		with (fillfactor = 80)
go

create index IX3
	on UserTree_History (UserTreeID)
		with (fillfactor = 80)
go

create index IX4
	on UserTree_History (UserTreeID, VersionNum)
		with (fillfactor = 80)
go

create index IX5
	on UserTree_History (UserVersionID)
		with (fillfactor = 80)
go

create unique index UserTree_History_Unique
	on UserTree_History (UserTreeID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on User_History (UserID)
		with (fillfactor = 80)
go

create unique index User_History_Unique
	on User_History (UserID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table WeightBreakHeader
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	WeightBreakHeaderID bigint identity
		primary key
			with (fillfactor = 80)
,
	WeightBreakHeaderName nvarchar(50) not null,
	UnitFactor numeric(19,6) not null,
	MaximumValue numeric(19,6) not null,
	AsRating bit not null,
	HasMin bit not null,
	HasMax bit not null,
	BaseRate bit not null,
	Levels nvarchar(max) not null,
	ServiceLevelID bigint not null
		constraint WeightBreakHeader_ServiceLevelID_FK
			references ServiceLevel,
	UnitID bigint not null
		constraint WeightBreakHeader_UnitID_FK
			references Unit
				on delete cascade,
	unique (ServiceLevelID, WeightBreakHeaderName)
)
go

create table RequestSection
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionID bigint identity
		primary key
			with (fillfactor = 80)
,
	SectionNumber nvarchar(50) not null
		unique
			with (fillfactor = 80)
,
	SectionName nvarchar(50) not null,
	WeightBreak nvarchar(max) not null,
	IsDensityPricing bit not null,
	OverrideDensity numeric(19,6),
	Commodity nvarchar(100),
	NumLanes int not null,
	NumUnpublishedLanes int not null,
	NumEditedLanes int not null,
	NumDuplicateLanes int not null,
	NumDoNotMeetCommitmentLanes int not null,
	EquipmentTypeID bigint
		constraint RequestSection_EquipmentTypeID_FK
			references EquipmentType
				on delete cascade,
	OverrideClassID bigint
		constraint RequestSection_OverrideClassID_FK
			references FreightClass
				on delete cascade,
	RateBaseID bigint
		constraint RequestSection_RateBaseID_FK
			references RateBase
				on delete cascade,
	RequestLaneID bigint not null
		constraint RequestSection_RequestLaneID_FK
			references RequestLane
				on delete cascade,
	SubServiceLevelID bigint not null
		constraint RequestSection_SubServiceLevelID_FK
			references SubServiceLevel
				on delete cascade,
	WeightBreakHeaderID bigint not null
		constraint RequestSection_WeightBreakHeaderID_FK
			references WeightBreakHeader
				on delete cascade,
	AsRating bit not null,
	BaseRate bit not null,
	HasMax bit not null,
	HasMin bit not null,
	UnitFactor numeric(19,6) not null,
	WeightBreakDetails nvarchar(max) not null
)
go

create index IX1
	on RequestSection (RequestLaneID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSection (RequestLaneID, SectionNumber)
		with (fillfactor = 80)
go

create index IX1
	on WeightBreakHeader (UnitID)
		with (fillfactor = 80)
go

create index IX2
	on WeightBreakHeader (ServiceLevelID)
		with (fillfactor = 80)
go

create table WeightBreakHeader_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	WeightBreakHeaderVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	WeightBreakHeaderName nvarchar(50) not null,
	UnitFactor numeric(19,6) not null,
	MaximumValue numeric(19,6) not null,
	AsRating bit not null,
	HasMin bit not null,
	HasMax bit not null,
	BaseRate bit not null,
	Levels nvarchar(max) not null,
	ServiceLevelVersionID bigint not null
		constraint WeightBreakHeader_History_ServiceLevelVersionID_FK
			references ServiceLevel_History,
	UnitVersionID bigint not null
		constraint WeightBreakHeader_History_UnitVersionID_FK
			references Unit_History,
	WeightBreakHeaderID bigint not null
		constraint WeightBreakHeader_History_WeightBreakHeaderID_FK
			references WeightBreakHeader
				on delete cascade,
	unique (WeightBreakHeaderID, VersionNum)
		with (fillfactor = 80)
)
go

create table RequestSection_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	SectionNumber nvarchar(50) not null,
	SectionName nvarchar(50) not null,
	Commodity nvarchar(100),
	WeightBreak nvarchar(max) not null,
	IsDensityPricing bit not null,
	OverrideDensity numeric(19,6),
	NumLanes int not null,
	NumUnpublishedLanes int not null,
	NumEditedLanes int not null,
	NumDuplicateLanes int not null,
	NumDoNotMeetCommitmentLanes int not null,
	EquipmentTypeVersionID bigint
		constraint RequestSection_History_EquipmentTypeID_FK
			references EquipmentType_History,
	OverrideClassVersionID bigint
		constraint RequestSection_History_OverrideClassID_FK
			references FreightClass_History,
	RateBaseVersionID bigint
		constraint RequestSection_History_RateBaseID_FK
			references RateBase_History,
	RequestLaneVersionID bigint not null
		constraint RequestSection_History_RequestLaneID_FK
			references RequestLane_History,
	RequestSectionID bigint not null
		constraint RequestSection_History_RequestSectionID_FK
			references RequestSection
				on delete cascade,
	SubServiceLevelVersionID bigint not null
		constraint RequestSection_History_SubServiceLevelID_FK
			references SubServiceLevel_History,
	WeightBreakHeaderVersionID bigint not null
		constraint RequestSection_History_WeightBreakHeaderVersionID_FK
			references WeightBreakHeader_History,
	unique (RequestSectionID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestSection_History (RequestLaneVersionID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSection_History (RequestLaneVersionID, SectionNumber)
		with (fillfactor = 80)
go

create index IX3
	on RequestSection_History (RequestSectionID)
		with (fillfactor = 80)
go

create unique index RequestSection_History_Unique
	on RequestSection_History (RequestSectionID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on WeightBreakHeader_History (ServiceLevelVersionID)
		with (fillfactor = 80)
go

create index IX2
	on WeightBreakHeader_History (UnitVersionID)
		with (fillfactor = 80)
go

create index IX3
	on WeightBreakHeader_History (WeightBreakHeaderID)
		with (fillfactor = 80)
go

create unique index WeightBreakHeader_History_Unique
	on WeightBreakHeader_History (WeightBreakHeaderID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table Zone
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ZoneID bigint identity
		primary key
			with (fillfactor = 80)
,
	ZoneName nvarchar(50) not null
		unique
			with (fillfactor = 80)
)
go

create table RequestSectionLane
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLaneID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionID bigint not null
		constraint RequestSectionLane_RequestSectionID_FK
			references RequestSection
				on delete cascade,
	LaneNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	IsPublished bit not null,
	IsEdited bit not null,
	IsDuplicate bit not null,
	IsBetween bit not null,
	IsLaneGroup bit not null,
	OriginProvinceID bigint
		constraint RequestSectionLane_OriginProvinceID_FK
			references Province,
	OriginProvinceCode nvarchar(2),
	OriginRegionID bigint
		constraint RequestSectionLane_OriginRegionID_FK
			references Region,
	OriginRegionCode nvarchar(4),
	OriginCountryID bigint
		constraint RequestSectionLane_OriginCountryID_FK
			references Country,
	OriginCountryCode nvarchar(2),
	OriginTerminalID bigint
		constraint RequestSectionLane_OriginTerminalID_FK
			references Terminal,
	OriginTerminalCode nvarchar(3),
	OriginZoneID bigint
		constraint RequestSectionLane_OriginZoneID_FK
			references Zone,
	OriginZoneName nvarchar(50),
	OriginBasingPointID bigint
		constraint RequestSectionLane_OriginBasingPointID_FK
			references BasingPoint,
	OriginBasingPointName nvarchar(50),
	OriginServicePointID bigint
		constraint RequestSectionLane_OriginServicePointID_FK
			references ServicePoint,
	OriginServicePointName nvarchar(50),
	OriginPostalCodeID bigint
		constraint RequestSectionLane_OriginPostalCodeID_FK
			references PostalCode,
	OriginPostalCodeName nvarchar(10),
	OriginPointTypeID bigint not null
		constraint RequestSectionLane_OriginPointTypeID_FK
			references RequestSectionLanePointType,
	OriginPointTypeName nvarchar(50) not null,
	OriginCode nvarchar(50) not null,
	DestinationProvinceID bigint
		constraint RequestSectionLane_DestinationProvinceID_FK
			references Province,
	DestinationProvinceCode nvarchar(2),
	DestinationRegionID bigint
		constraint RequestSectionLane_DestinationRegionID_FK
			references Region,
	DestinationRegionCode nvarchar(4),
	DestinationCountryID bigint
		constraint RequestSectionLane_DestinationCountryID_FK
			references Country,
	DestinationCountryCode nvarchar(2),
	DestinationTerminalID bigint
		constraint RequestSectionLane_DestinationTerminalID_FK
			references Terminal,
	DestinationTerminalCode nvarchar(3),
	DestinationZoneID bigint
		constraint RequestSectionLane_DestinationZoneID_FK
			references Zone,
	DestinationZoneName nvarchar(50),
	DestinationBasingPointID bigint
		constraint RequestSectionLane_DestinationBasingPointID_FK
			references BasingPoint,
	DestinationBasingPointName nvarchar(50),
	DestinationServicePointID bigint
		constraint RequestSectionLane_DestinationServicePointID_FK
			references ServicePoint,
	DestinationServicePointName nvarchar(50),
	DestinationPostalCodeID bigint
		constraint RequestSectionLane_DestinationPostalCodeID_FK
			references PostalCode,
	DestinationPostalCodeName nvarchar(10),
	DestinationPointTypeID bigint not null
		constraint RequestSectionLane_DestinationPointTypeID_FK
			references RequestSectionLanePointType,
	DestinationPointTypeName nvarchar(50) not null,
	DestinationCode nvarchar(50) not null,
	LaneHashCode varbinary(8000) not null,
	BasingPointHashCode varbinary(8000),
	Cost nvarchar(max) not null,
	DoNotMeetCommitment bit not null,
	Commitment nvarchar(max),
	CustomerRate nvarchar(max) not null,
	CustomerDiscount nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	PartnerRate nvarchar(max) not null,
	PartnerDiscount nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	PickupCount int,
	DeliveryCount int,
	DockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	CostOverrideAccessorialsPercentage nvarchar(max),
	CostOverrideAccessorialsValue nvarchar(max),
	CostOverrideDeliveryCost nvarchar(max),
	CostOverrideDeliveryCount int,
	CostOverrideDensity nvarchar(max),
	CostOverrideDockAdjustment numeric(19,6),
	CostOverrideMargin nvarchar(max),
	CostOverridePickupCost nvarchar(max),
	CostOverridePickupCount int,
	PricingRates nvarchar(max),
	WorkflowErrors nvarchar(max),
	IsExcluded bit,
	unique (RequestSectionID, LaneHashCode)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestSectionLane (RequestSectionID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSectionLane (RequestSectionID, LaneNumber)
		with (fillfactor = 80)
go

create index IX3
	on RequestSectionLane (RequestSectionID, OriginProvinceID)
		with (fillfactor = 80)
go

create index IX4
	on RequestSectionLane (RequestSectionID, DestinationProvinceID)
		with (fillfactor = 80)
go

create index IX5
	on RequestSectionLane (RequestSectionID, OriginPostalCodeID)
		with (fillfactor = 80)
go

create index IX6
	on RequestSectionLane (RequestSectionID, DestinationPostalCodeID)
		with (fillfactor = 80)
go

create index IX7
	on RequestSectionLane (RequestSectionID, OriginTerminalID)
		with (fillfactor = 80)
go

create index IX8
	on RequestSectionLane (RequestSectionID, DestinationTerminalID)
		with (fillfactor = 80)
go

create index IX9
	on RequestSectionLane (RequestSectionID, OriginRegionID)
		with (fillfactor = 80)
go

create index IX10
	on RequestSectionLane (RequestSectionID, DestinationRegionID)
		with (fillfactor = 80)
go

create index IX11
	on RequestSectionLane (RequestSectionID, OriginZoneID)
		with (fillfactor = 80)
go

create index IX12
	on RequestSectionLane (RequestSectionID, DestinationZoneID)
		with (fillfactor = 80)
go

create index IX13
	on RequestSectionLane (RequestSectionID, OriginBasingPointID)
		with (fillfactor = 80)
go

create index IX14
	on RequestSectionLane (RequestSectionID, DestinationBasingPointID)
		with (fillfactor = 80)
go

create index IX15
	on RequestSectionLane (RequestSectionID, OriginCountryID)
		with (fillfactor = 80)
go

create index IX16
	on RequestSectionLane (RequestSectionID, DestinationCountryID)
		with (fillfactor = 80)
go

create index IX17
	on RequestSectionLane (RequestSectionID, OriginServicePointID)
		with (fillfactor = 80)
go

create index IX18
	on RequestSectionLane (RequestSectionID, DestinationServicePointID)
		with (fillfactor = 80)
go

create index IX19
	on RequestSectionLane (RequestSectionID, OriginPointTypeID)
		with (fillfactor = 80)
go

create index IX20
	on RequestSectionLane (RequestSectionID, DestinationPointTypeID)
		with (fillfactor = 80)
go

create index IX21
	on RequestSectionLane (RequestSectionID, OriginCode)
		with (fillfactor = 80)
go

create index IX22
	on RequestSectionLane (RequestSectionID, DestinationCode)
		with (fillfactor = 80)
go

create table RequestSectionLanePricingPoint
(
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLanePricingPointID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionLaneID bigint not null
		constraint RequestSectionLanePricingPoint_RequestSectionLaneID_FK
			references RequestSectionLane
				on delete cascade,
	PricingPointNumber nvarchar(32) not null
		unique
			with (fillfactor = 80)
,
	OriginPostalCodeID bigint not null
		constraint RequestSectionLanePricingPoint_OriginPostalCodeID_FK
			references PostalCode,
	OriginPostalCodeName nvarchar(10) not null,
	DestinationPostalCodeID bigint not null
		constraint RequestSectionLanePricingPoint_DestinationPostalCodeID_FK
			references PostalCode
				on delete cascade,
	DestinationPostalCodeName nvarchar(10) not null,
	PricingPointHashCode varbinary(8000) not null,
	Cost nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	FakRate nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	SplitsAll nvarchar(max) not null,
	SplitsAllUsagePercentage decimal(19,6) not null,
	PickupCount int,
	DeliveryCount int,
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	CostOverrideAccessorialsPercentage nvarchar(max),
	CostOverrideAccessorialsValue nvarchar(max),
	CostOverrideDeliveryCost nvarchar(max),
	CostOverrideDeliveryCount int,
	CostOverrideDensity nvarchar(max),
	CostOverrideDockAdjustment numeric(19,6),
	CostOverrideMargin nvarchar(max),
	CostOverridePickupCost nvarchar(max),
	CostOverridePickupCount int,
	DockAdjustment numeric(19,6),
	PricingRates nvarchar(max),
	WorkflowErrors nvarchar(max),
	unique (RequestSectionLaneID, PricingPointHashCode)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestSectionLanePricingPoint (RequestSectionLaneID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSectionLanePricingPoint (RequestSectionLaneID, PricingPointNumber)
		with (fillfactor = 80)
go

create index IX3
	on RequestSectionLanePricingPoint (RequestSectionLaneID, OriginPostalCodeID)
		with (fillfactor = 80)
go

create index IX4
	on RequestSectionLanePricingPoint (RequestSectionLaneID, DestinationPostalCodeID)
		with (fillfactor = 80)
go

create table Zone_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	ZoneVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	ZoneName nvarchar(50) not null,
	ZoneID bigint not null
		constraint Zone_History_ZoneID_FK
			references Zone
				on delete cascade,
	unique (ZoneID, VersionNum)
		with (fillfactor = 80)
)
go

create table RequestSectionLane_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLaneVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionLaneID bigint not null
		constraint RequestSectionLane_History_RequestSectionLaneID_FK
			references RequestSectionLane
				on delete cascade,
	RequestSectionVersionID bigint not null
		constraint RequestSectionLane_History_RequestSectionVersionID_FK
			references RequestSection_History,
	LaneNumber nvarchar(32) not null,
	IsPublished bit not null,
	IsEdited bit not null,
	IsDuplicate bit not null,
	IsBetween bit not null,
	IsLaneGroup bit not null,
	OriginProvinceVersionID bigint
		constraint RequestSectionLane_History_OriginProvinceVersionID_FK
			references Province_History,
	OriginProvinceCode nvarchar(2),
	OriginRegionVersionID bigint
		constraint RequestSectionLane_History_OriginRegionVersionID_FK
			references Region_History,
	OriginRegionCode nvarchar(4),
	OriginCountryVersionID bigint
		constraint RequestSectionLane_History_OriginCountryVersionID_FK
			references Country_History,
	OriginCountryCode nvarchar(2),
	OriginTerminalVersionID bigint
		constraint RequestSectionLane_History_OriginTerminalVersionID_FK
			references Terminal_History,
	OriginTerminalCode nvarchar(3),
	OriginZoneVersionID bigint
		constraint RequestSectionLane_History_OriginZoneVersionID_FK
			references Zone_History,
	OriginZoneName nvarchar(50),
	OriginBasingPointVersionID bigint
		constraint RequestSectionLane_History_OriginBasingPointVersionID_FK
			references BasingPoint_History,
	OriginBasingPointName nvarchar(50),
	OriginServicePointVersionID bigint
		constraint RequestSectionLane_History_OriginServicePointVersionID_FK
			references ServicePoint_History,
	OriginServicePointName nvarchar(50),
	OriginPostalCodeVersionID bigint
		constraint RequestSectionLane_History_OriginPostalCodeVersionID_FK
			references PostalCode_History,
	OriginPostalCodeName nvarchar(10),
	OriginPointTypeVersionID bigint not null
		constraint RequestSectionLane_History_OriginPointTypeVersionID_FK
			references RequestSectionLanePointType_History,
	OriginPointTypeName nvarchar(50) not null,
	OriginCode nvarchar(50) not null,
	DestinationProvinceVersionID bigint
		constraint RequestSectionLane_History_DestinationProvinceVersionID_FK
			references Province_History,
	DestinationProvinceCode nvarchar(2),
	DestinationRegionVersionID bigint
		constraint RequestSectionLane_History_DestinationRegionVersionID_FK
			references Region_History,
	DestinationRegionCode nvarchar(4),
	DestinationCountryVersionID bigint
		constraint RequestSectionLane_History_DestinationCountryVersionID_FK
			references Country_History,
	DestinationCountryCode nvarchar(2),
	DestinationTerminalVersionID bigint
		constraint RequestSectionLane_History_DestinationTerminalVersionID_FK
			references Terminal_History,
	DestinationTerminalCode nvarchar(3),
	DestinationZoneVersionID bigint
		constraint RequestSectionLane_History_DestinationZoneVersionID_FK
			references Zone_History,
	DestinationZoneName nvarchar(50),
	DestinationBasingPointVersionID bigint
		constraint RequestSectionLane_History_DestinationBasingPointVersionID_FK
			references BasingPoint_History,
	DestinationBasingPointName nvarchar(50),
	DestinationServicePointVersionID bigint
		constraint RequestSectionLane_History_DestinationServicePointVersionID_FK
			references ServicePoint_History,
	DestinationServicePointName nvarchar(50),
	DestinationPostalCodeVersionID bigint
		constraint RequestSectionLane_History_DestinationPostalCodeVersionID_FK
			references PostalCode_History,
	DestinationPostalCodeName nvarchar(10),
	DestinationPointTypeVersionID bigint not null
		constraint RequestSectionLane_History_DestinationPointTypeVersionID_FK
			references RequestSectionLanePointType_History,
	DestinationPointTypeName nvarchar(50) not null,
	DestinationCode nvarchar(50) not null,
	LaneHashCode varbinary(8000) not null,
	BasingPointHashCode varbinary(8000),
	Cost nvarchar(max),
	DoNotMeetCommitment bit not null,
	Commitment nvarchar(max),
	CustomerRate nvarchar(max) not null,
	CustomerDiscount nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	PartnerRate nvarchar(max) not null,
	PartnerDiscount nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	PickupCount int,
	DeliveryCount int,
	DockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	CostOverrideAccessorialsPercentage nvarchar(max),
	CostOverrideAccessorialsValue nvarchar(max),
	CostOverrideDeliveryCost nvarchar(max),
	CostOverrideDeliveryCount int,
	CostOverrideDensity nvarchar(max),
	CostOverrideDockAdjustment numeric(19,6),
	CostOverrideMargin nvarchar(max),
	CostOverridePickupCost nvarchar(max),
	CostOverridePickupCount int,
	PricingRates nvarchar(max),
	WorkflowErrors nvarchar(max),
	IsExcluded bit,
	unique (RequestSectionLaneID, VersionNum)
		with (fillfactor = 80)
)
go

create table RequestSectionLanePricingPoint_History
(
	VersionNum int not null,
	IsLatestVersion bit not null,
	UpdatedOn datetime2 not null,
	UpdatedBy nvarchar(50) not null,
	BaseVersion int,
	Comments nvarchar(4000) not null,
	IsActive bit not null,
	IsInactiveViewable bit not null,
	RequestSectionLanePricingPointVersionID bigint identity
		primary key
			with (fillfactor = 80)
,
	RequestSectionLanePricingPointID bigint not null
		constraint RequestSectionLanePricingPoint_History_RequestSectionLanePricingPointID_FK
			references RequestSectionLanePricingPoint
				on delete cascade,
	RequestSectionLaneVersionID bigint not null
		constraint RequestSectionLanePricingPoint_History_RequestSectionLaneVersionID_FK
			references RequestSectionLane_History,
	PricingPointNumber nvarchar(32) not null,
	OriginPostalCodeVersionID bigint not null
		constraint RequestSectionLanePricingPoint_History_OriginPostalCodeVersionID_FK
			references PostalCode_History,
	OriginPostalCodeName nvarchar(10) not null,
	DestinationPostalCodeVersionID bigint not null
		constraint RequestSectionLanePricingPoint_History_DestinationPostalCodeVersionID_FK
			references PostalCode_History,
	DestinationPostalCodeName nvarchar(10) not null,
	PricingPointHashCode varbinary(8000) not null,
	Cost nvarchar(max) not null,
	DrRate nvarchar(max) not null,
	FakRate nvarchar(max) not null,
	Profitability nvarchar(max) not null,
	SplitsAll nvarchar(max) not null,
	SplitsAllUsagePercentage decimal(19,6) not null,
	PickupCount int,
	DeliveryCount int,
	DockAdjustment decimal(19,6),
	Margin nvarchar(max) not null,
	Density nvarchar(max) not null,
	PickupCost nvarchar(max) not null,
	DeliveryCost nvarchar(max) not null,
	AccessorialsValue nvarchar(max) not null,
	AccessorialsPercentage nvarchar(max) not null,
	CostOverrideAccessorialsPercentage nvarchar(max),
	CostOverrideAccessorialsValue nvarchar(max),
	CostOverrideDeliveryCost nvarchar(max),
	CostOverrideDeliveryCount int,
	CostOverrideDensity nvarchar(max),
	CostOverrideDockAdjustment numeric(19,6),
	CostOverrideMargin nvarchar(max),
	CostOverridePickupCost nvarchar(max),
	CostOverridePickupCount int,
	PricingRates nvarchar(max),
	WorkflowErrors nvarchar(max),
	unique (RequestSectionLanePricingPointID, VersionNum)
		with (fillfactor = 80)
)
go

create index IX1
	on RequestSectionLanePricingPoint_History (RequestSectionLanePricingPointID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSectionLanePricingPoint_History (RequestSectionLanePricingPointID, PricingPointNumber)
		with (fillfactor = 80)
go

create index IX3
	on RequestSectionLanePricingPoint_History (RequestSectionLaneVersionID, PricingPointNumber)
		with (fillfactor = 80)
go

create index IX4
	on RequestSectionLanePricingPoint_History (RequestSectionLaneVersionID)
		with (fillfactor = 80)
go

create unique index RequestSectionLanePricingPoint_History_Unique
	on RequestSectionLanePricingPoint_History (RequestSectionLanePricingPointID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX1
	on RequestSectionLane_History (RequestSectionVersionID)
		with (fillfactor = 80)
go

create index IX2
	on RequestSectionLane_History (RequestSectionLaneID)
		with (fillfactor = 80)
go

create unique index RequestSectionLane_History_Unique
	on RequestSectionLane_History (RequestSectionLaneID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create index IX
	on Zone_History (ZoneID)
		with (fillfactor = 80)
go

create unique index Zone_History_Unique
	on Zone_History (ZoneID, IsLatestVersion)
	where [IsLatestVersion]=1
		with (fillfactor = 80)
go

create table auth_group
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	name nvarchar(80) not null
		unique
			with (fillfactor = 80)
)
go

create table sys.backup_metadata_store
(
	backup_metadata_uuid uniqueidentifier not null,
	database_guid uniqueidentifier not null,
	physical_database_name nvarchar(128) not null,
	time_zone smallint not null,
	first_lsn numeric(25) not null,
	last_lsn numeric(25) not null,
	checkpoint_lsn numeric(25) not null,
	database_backup_lsn numeric(25) not null,
	backup_start_date datetime2 not null,
	backup_finish_date datetime2 not null,
	backup_type char not null,
	backup_storage_redundancy nvarchar(64),
	database_version int not null,
	backup_size numeric(20) not null,
	compressed_backup_size numeric(20) not null,
	server_name nvarchar(128) not null,
	is_damaged bit,
	last_recovery_fork_guid uniqueidentifier,
	differential_base_lsn numeric(25),
	differential_base_guid uniqueidentifier,
	backup_path nvarchar(260) not null,
	last_valid_restore_time datetime2,
	compression_algorithm nvarchar(32)
)
go

create unique clustered index IX_backup_metadata_uuid
	on sys.backup_metadata_store (backup_metadata_uuid)
go

create index IX_backup_metadata_type_finish_date
	on sys.backup_metadata_store (backup_type, backup_finish_date)
go

create table sys.database_firewall_rules_table
(
	id int identity,
	name sysname not null,
	start_ip_address varchar(45) not null,
	end_ip_address varchar(45) not null,
	start_ip_address_value bigint not null,
	end_ip_address_value bigint not null,
	create_date datetime not null,
	modify_date datetime not null
)
go

create clustered index idx_database_firewall_rules_unique
	on sys.database_firewall_rules_table (name)
go

create index idx_database_firewall_rules_ip_address_values
	on sys.database_firewall_rules_table (start_ip_address_value, end_ip_address_value)
go

create table sys.db_ledger_blocks
(
	block_id bigint not null,
	version smallint not null,
	transactions_root_hash varbinary(32),
	block_size int not null,
	previous_block_hash varbinary(32)
)
go

create unique clustered index ci_block_id
	on sys.db_ledger_blocks (block_id)
go

create table sys.db_ledger_transactions
(
	transaction_id bigint not null,
	block_id bigint not null,
	transaction_ordinal int not null,
	version tinyint not null,
	type tinyint not null,
	commit_ts datetime2 not null,
	table_hashes varbinary(max),
	commit_LSN varbinary(10),
	transaction_description nvarchar(max),
	principal_name sysname not null
)
go

create unique clustered index ci_block_id
	on sys.db_ledger_transactions (block_id, transaction_ordinal)
go

create unique index nci_transaction_id
	on sys.db_ledger_transactions (transaction_id)
go

create table debug_pp
(
	ID bigint not null,
	Value nvarchar(max)
)
go

create table django_celery_results_taskresult
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	task_id nvarchar(255) not null
		unique
			with (fillfactor = 80)
,
	status nvarchar(50) not null,
	content_type nvarchar(128) not null,
	content_encoding nvarchar(64) not null,
	result nvarchar(max),
	date_done datetime2 not null,
	traceback nvarchar(max),
	meta nvarchar(max),
	task_args nvarchar(max),
	task_kwargs nvarchar(max),
	task_name nvarchar(255),
	worker nvarchar(100),
	date_created datetime2 not null
)
go

create index django_celery_results_taskresult_date_done_49edada6
	on django_celery_results_taskresult (date_done)
		with (fillfactor = 80)
go

create index django_celery_results_taskresult_status_cbbed23a
	on django_celery_results_taskresult (status)
		with (fillfactor = 80)
go

create index django_celery_results_taskresult_task_name_90987df3
	on django_celery_results_taskresult (task_name)
		with (fillfactor = 80)
go

create index django_celery_results_taskresult_worker_f8711389
	on django_celery_results_taskresult (worker)
		with (fillfactor = 80)
go

create index django_celery_results_taskresult_date_created_099f3424
	on django_celery_results_taskresult (date_created)
		with (fillfactor = 80)
go

create table django_content_type
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	app_label nvarchar(100) not null,
	model nvarchar(100) not null,
	constraint django_content_type_app_label_model_76bd3d3b_uniq
		unique (app_label, model)
			with (fillfactor = 80)
)
go

create table auth_permission
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	name nvarchar(255) not null,
	content_type_id int not null
		constraint auth_permission_content_type_id_2f476e4b_fk_django_content_type_id
			references django_content_type,
	codename nvarchar(100) not null,
	constraint auth_permission_content_type_id_codename_01ab375a_uniq
		unique (content_type_id, codename)
			with (fillfactor = 80)
)
go

create table User_user_permissions
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	user_id bigint not null
		constraint User_user_permissions_user_id
			references [User],
	permission_id int not null
		constraint User_user_permissions_permission_id
			references auth_permission,
	unique (user_id, permission_id)
		with (fillfactor = 80)
)
go

create index IX1
	on User_user_permissions (permission_id)
		with (fillfactor = 80)
go

create index IX2
	on User_user_permissions (user_id)
		with (fillfactor = 80)
go

create table auth_group_permissions
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	group_id int not null
		constraint auth_group_permissions_group_id_b120cbf9_fk_auth_group_id
			references auth_group,
	permission_id int not null
		constraint auth_group_permissions_permission_id_84c5c92e_fk_auth_permission_id
			references auth_permission,
	constraint auth_group_permissions_group_id_permission_id_0cd325b0_uniq
		unique (group_id, permission_id)
			with (fillfactor = 80)
)
go

create index auth_group_permissions_group_id_b120cbf9
	on auth_group_permissions (group_id)
		with (fillfactor = 80)
go

create index auth_group_permissions_permission_id_84c5c92e
	on auth_group_permissions (permission_id)
		with (fillfactor = 80)
go

create index auth_permission_content_type_id_2f476e4b
	on auth_permission (content_type_id)
		with (fillfactor = 80)
go

create table django_admin_log
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	action_time datetime2 not null,
	object_id nvarchar(max),
	object_repr nvarchar(200) not null,
	action_flag smallint not null
		constraint django_admin_log_action_flag_a8637d59_check
			check ([action_flag]>=0),
	change_message nvarchar(max) not null,
	content_type_id int
		constraint django_admin_log_content_type_id_c4bce8eb_fk_django_content_type_id
			references django_content_type,
	user_id bigint not null
		constraint django_admin_log_user_id_c564eba6_fk_auth_user_id
			references [User]
)
go

create index django_admin_log_content_type_id_c4bce8eb
	on django_admin_log (content_type_id)
		with (fillfactor = 80)
go

create index django_admin_log_user_id_c564eba6
	on django_admin_log (user_id)
		with (fillfactor = 80)
go

create table django_migrations
(
	id int identity
		primary key
			with (fillfactor = 80)
,
	app nvarchar(255) not null,
	name nvarchar(255) not null,
	applied datetime2 not null
)
go

create table django_session
(
	session_key nvarchar(40) not null
		primary key
			with (fillfactor = 80)
,
	session_data nvarchar(max) not null,
	expire_date datetime2 not null
)
go

create index django_session_expire_date_a5c62663
	on django_session (expire_date)
		with (fillfactor = 80)
go

create table sys.filestream_tombstone_2073058421
(
	oplsn_fseqno int not null,
	oplsn_bOffset int not null,
	oplsn_slotid int not null,
	file_id int not null,
	rowset_guid uniqueidentifier not null,
	column_guid uniqueidentifier,
	filestream_value_name nvarchar(260),
	transaction_sequence_num bigint not null,
	status bigint not null,
	size bigint
)
go

create unique clustered index FSTSClusIdx
	on sys.filestream_tombstone_2073058421 (oplsn_fseqno, oplsn_bOffset, oplsn_slotid)
go

create index FSTSNCIdx
	on sys.filestream_tombstone_2073058421 (file_id, rowset_guid, column_guid, oplsn_fseqno, oplsn_bOffset, oplsn_slotid)
go

create table sys.filetable_updates_2105058535
(
	table_id bigint not null,
	oplsn_fseqno int not null,
	oplsn_bOffset int not null,
	oplsn_slotid int not null,
	item_guid uniqueidentifier not null
)
go

create unique clustered index FFtUpdateIdx
	on sys.filetable_updates_2105058535 (table_id, oplsn_fseqno, oplsn_bOffset, oplsn_slotid, item_guid)
go

create table sys.persistent_version_store
(
	xdes_ts_push bigint not null,
	xdes_ts_tran bigint not null,
	subid_push int,
	subid_tran int,
	rowset_id bigint not null,
	sec_version_rid binary(8) not null,
	min_len smallint,
	seq_num bigint,
	prev_row_in_chain binary(8) not null,
	row_version varbinary(8000) not null
)
go

create table sys.persistent_version_store_long_term
(
	xdes_ts_push bigint not null,
	xdes_ts_tran bigint not null,
	subid_push int,
	subid_tran int,
	rowset_id bigint not null,
	sec_version_rid binary(8) not null,
	min_len smallint,
	seq_num bigint,
	prev_row_in_chain binary(8) not null,
	row_version varbinary(8000) not null
)
go

create table sys.plan_persist_context_settings
(
	context_settings_id bigint not null,
	set_options int not null,
	language_id smallint not null,
	date_format smallint not null,
	date_first tinyint not null,
	compatibility_level smallint not null,
	status smallint not null,
	required_cursor_options int not null,
	acceptable_cursor_options int not null,
	merge_action_type smallint not null,
	default_schema_id int not null,
	is_replication_specific bit not null,
	status2 tinyint not null
)
go

create unique clustered index plan_persist_context_settings_cidx
	on sys.plan_persist_context_settings (context_settings_id desc)
go

create table sys.plan_persist_plan
(
	plan_id bigint not null,
	query_id bigint not null,
	plan_group_id bigint,
	engine_version bigint not null,
	query_plan_hash binary(8) not null,
	query_plan varbinary(max),
	is_online_index_plan bit not null,
	is_trivial_plan bit not null,
	is_parallel_plan bit not null,
	is_forced_plan bit not null,
	force_failure_count bigint not null,
	last_force_failure_reason int not null,
	count_compiles bigint not null,
	initial_compile_start_time datetimeoffset not null,
	last_compile_start_time datetimeoffset not null,
	last_execution_time datetimeoffset,
	total_compile_duration bigint not null,
	last_compile_duration bigint not null,
	compatibility_level smallint not null,
	plan_flags int
)
go

create unique clustered index plan_persist_plan_cidx
	on sys.plan_persist_plan (plan_id)
go

create index plan_persist_plan_idx1
	on sys.plan_persist_plan (query_id desc)
go

create table sys.plan_persist_plan_feedback
(
	plan_feedback_id bigint not null,
	plan_id bigint not null,
	feature_id tinyint not null,
	feedback_data varbinary(max),
	state int not null,
	create_time datetimeoffset not null,
	last_updated_time datetimeoffset
)
go

create unique clustered index plan_feedback_cidx
	on sys.plan_persist_plan_feedback (plan_feedback_id)
go

create index plan_feedback_idx1
	on sys.plan_persist_plan_feedback (plan_id, feature_id)
go

create table sys.plan_persist_query
(
	query_id bigint not null,
	query_text_id bigint not null,
	context_settings_id bigint not null,
	object_id bigint,
	batch_sql_handle varbinary(64),
	query_hash binary(8) not null,
	is_internal_query bit not null,
	query_param_type tinyint not null,
	initial_compile_start_time datetimeoffset not null,
	last_compile_start_time datetimeoffset not null,
	last_execution_time datetimeoffset,
	last_compile_batch_sql_handle varbinary(64),
	last_compile_batch_offset_start bigint not null,
	last_compile_batch_offset_end bigint not null,
	compile_count bigint not null,
	total_compile_duration bigint not null,
	last_compile_duration bigint not null,
	total_parse_duration bigint not null,
	last_parse_duration bigint not null,
	total_parse_cpu_time bigint not null,
	last_parse_cpu_time bigint not null,
	total_bind_duration bigint not null,
	last_bind_duration bigint not null,
	total_bind_cpu_time bigint not null,
	last_bind_cpu_time bigint not null,
	total_optimize_duration bigint not null,
	last_optimize_duration bigint not null,
	total_optimize_cpu_time bigint not null,
	last_optimize_cpu_time bigint not null,
	total_compile_memory_kb bigint not null,
	last_compile_memory_kb bigint not null,
	max_compile_memory_kb bigint not null,
	status tinyint not null,
	statement_sql_handle varbinary(64),
	query_flags int
)
go

create unique clustered index plan_persist_query_cidx
	on sys.plan_persist_query (query_id)
go

create index plan_persist_query_idx1
	on sys.plan_persist_query (query_text_id, context_settings_id)
go

create table sys.plan_persist_query_hints
(
	query_hint_id bigint not null,
	query_id bigint not null,
	context_settings_id bigint not null,
	object_id bigint,
	statement_sql_handle varbinary(64) not null,
	query_param_type tinyint not null,
	batch_sql_handle varbinary(64),
	query_hash binary(8) not null,
	query_hints nvarchar(max),
	query_hints_flags int,
	last_query_hint_failure_reason int not null,
	query_hint_failure_count bigint not null,
	comment nvarchar(max)
)
go

create unique clustered index plan_persist_query_hints_cidx
	on sys.plan_persist_query_hints (query_hint_id)
go

create index plan_persist_query_hints_idx1
	on sys.plan_persist_query_hints (query_id)
go

create table sys.plan_persist_query_template_parameterization
(
	query_template_id bigint not null,
	query_template nvarchar(max),
	query_template_hash varbinary(16) not null,
	query_param_type tinyint not null,
	query_template_flags int,
	status tinyint not null,
	last_parameterization_failure_reason int not null,
	parameterization_failure_count bigint not null,
	comment nvarchar(max)
)
go

create unique clustered index plan_persist_query_template_parameterization_cidx
	on sys.plan_persist_query_template_parameterization (query_template_id)
go

create unique index plan_persist_query_template_parameterization_idx1
	on sys.plan_persist_query_template_parameterization (query_template_hash)
go

create table sys.plan_persist_query_text
(
	query_text_id bigint not null,
	query_sql_text nvarchar(max),
	statement_sql_handle varbinary(64) not null,
	is_part_of_encrypted_module bit not null,
	has_restricted_text bit not null,
	query_template_hash varbinary(16)
)
go

create unique clustered index plan_persist_query_text_cidx
	on sys.plan_persist_query_text (query_text_id)
go

create unique index plan_persist_query_text_idx1
	on sys.plan_persist_query_text (statement_sql_handle)
go

create table sys.plan_persist_runtime_stats
(
	runtime_stats_id bigint not null,
	plan_id bigint not null,
	runtime_stats_interval_id bigint not null,
	execution_type tinyint not null,
	first_execution_time datetimeoffset not null,
	last_execution_time datetimeoffset not null,
	count_executions bigint not null,
	total_duration bigint not null,
	last_duration bigint not null,
	min_duration bigint not null,
	max_duration bigint not null,
	sumsquare_duration float not null,
	total_cpu_time bigint not null,
	last_cpu_time bigint not null,
	min_cpu_time bigint not null,
	max_cpu_time bigint not null,
	sumsquare_cpu_time float not null,
	total_logical_io_reads bigint not null,
	last_logical_io_reads bigint not null,
	min_logical_io_reads bigint not null,
	max_logical_io_reads bigint not null,
	sumsquare_logical_io_reads float not null,
	total_logical_io_writes bigint not null,
	last_logical_io_writes bigint not null,
	min_logical_io_writes bigint not null,
	max_logical_io_writes bigint not null,
	sumsquare_logical_io_writes float not null,
	total_physical_io_reads bigint not null,
	last_physical_io_reads bigint not null,
	min_physical_io_reads bigint not null,
	max_physical_io_reads bigint not null,
	sumsquare_physical_io_reads float not null,
	total_clr_time bigint not null,
	last_clr_time bigint not null,
	min_clr_time bigint not null,
	max_clr_time bigint not null,
	sumsquare_clr_time float not null,
	total_dop bigint not null,
	last_dop bigint not null,
	min_dop bigint not null,
	max_dop bigint not null,
	sumsquare_dop float not null,
	total_query_max_used_memory bigint not null,
	last_query_max_used_memory bigint not null,
	min_query_max_used_memory bigint not null,
	max_query_max_used_memory bigint not null,
	sumsquare_query_max_used_memory float not null,
	total_rowcount bigint not null,
	last_rowcount bigint not null,
	min_rowcount bigint not null,
	max_rowcount bigint not null,
	sumsquare_rowcount float not null,
	total_num_physical_io_reads bigint,
	last_num_physical_io_reads bigint,
	min_num_physical_io_reads bigint,
	max_num_physical_io_reads bigint,
	sumsquare_num_physical_io_reads float,
	total_log_bytes_used bigint,
	last_log_bytes_used bigint,
	min_log_bytes_used bigint,
	max_log_bytes_used bigint,
	sumsquare_log_bytes_used float,
	total_tempdb_space_used bigint,
	last_tempdb_space_used bigint,
	min_tempdb_space_used bigint,
	max_tempdb_space_used bigint,
	sumsquare_tempdb_space_used float,
	total_page_server_io_reads bigint,
	last_page_server_io_reads bigint,
	min_page_server_io_reads bigint,
	max_page_server_io_reads bigint,
	sumsquare_page_server_io_reads float
)
go

create unique clustered index plan_persist_runtime_stats_cidx
	on sys.plan_persist_runtime_stats (plan_id, runtime_stats_interval_id, execution_type)
go

create unique index plan_persist_runtime_stats_idx1
	on sys.plan_persist_runtime_stats (runtime_stats_id)
go

create table sys.plan_persist_runtime_stats_interval
(
	runtime_stats_interval_id bigint not null,
	start_time datetimeoffset not null,
	end_time datetimeoffset not null,
	comment nvarchar(max)
)
go

create unique clustered index plan_persist_runtime_stats_interval_cidx
	on sys.plan_persist_runtime_stats_interval (runtime_stats_interval_id)
go

create index plan_persist_runtime_stats_interval_idx1
	on sys.plan_persist_runtime_stats_interval (end_time)
go

create table sys.plan_persist_wait_stats
(
	wait_stats_id bigint not null,
	runtime_stats_interval_id bigint not null,
	plan_id bigint not null,
	wait_category smallint not null,
	execution_type tinyint not null,
	count_executions bigint not null,
	total_query_wait_time_ms bigint not null,
	last_query_wait_time_ms bigint not null,
	min_query_wait_time_ms bigint not null,
	max_query_wait_time_ms bigint not null,
	sumsquare_query_wait_time_ms float not null
)
go

create unique clustered index plan_persist_wait_stats_cidx
	on sys.plan_persist_wait_stats (runtime_stats_interval_id, plan_id, wait_category, execution_type)
go

create unique index plan_persist_wait_stats_idx1
	on sys.plan_persist_wait_stats (wait_stats_id)
go

create table sys.queue_messages_1977058079
(
	status tinyint not null,
	priority tinyint not null,
	queuing_order bigint identity(0, 1),
	conversation_group_id uniqueidentifier not null,
	conversation_handle uniqueidentifier not null,
	message_sequence_number bigint not null,
	message_id uniqueidentifier not null,
	message_type_id int not null,
	service_id int not null,
	service_contract_id int not null,
	validation nchar not null,
	next_fragment int not null,
	fragment_size int not null,
	fragment_bitmap bigint not null,
	binary_message_body varbinary(max),
	message_enqueue_time datetime
)
go

create unique clustered index queue_clustered_index
	on sys.queue_messages_1977058079 (status, conversation_group_id, priority, conversation_handle, queuing_order)
go

create unique index queue_secondary_index
	on sys.queue_messages_1977058079 (status, priority, queuing_order, conversation_group_id, conversation_handle, service_id)
go

create table sys.queue_messages_2009058193
(
	status tinyint not null,
	priority tinyint not null,
	queuing_order bigint identity(0, 1),
	conversation_group_id uniqueidentifier not null,
	conversation_handle uniqueidentifier not null,
	message_sequence_number bigint not null,
	message_id uniqueidentifier not null,
	message_type_id int not null,
	service_id int not null,
	service_contract_id int not null,
	validation nchar not null,
	next_fragment int not null,
	fragment_size int not null,
	fragment_bitmap bigint not null,
	binary_message_body varbinary(max),
	message_enqueue_time datetime
)
go

create unique clustered index queue_clustered_index
	on sys.queue_messages_2009058193 (status, conversation_group_id, priority, conversation_handle, queuing_order)
go

create unique index queue_secondary_index
	on sys.queue_messages_2009058193 (status, priority, queuing_order, conversation_group_id, conversation_handle, service_id)
go

create table sys.queue_messages_2041058307
(
	status tinyint not null,
	priority tinyint not null,
	queuing_order bigint identity(0, 1),
	conversation_group_id uniqueidentifier not null,
	conversation_handle uniqueidentifier not null,
	message_sequence_number bigint not null,
	message_id uniqueidentifier not null,
	message_type_id int not null,
	service_id int not null,
	service_contract_id int not null,
	validation nchar not null,
	next_fragment int not null,
	fragment_size int not null,
	fragment_bitmap bigint not null,
	binary_message_body varbinary(max),
	message_enqueue_time datetime
)
go

create unique clustered index queue_clustered_index
	on sys.queue_messages_2041058307 (status, conversation_group_id, priority, conversation_handle, queuing_order)
go

create unique index queue_secondary_index
	on sys.queue_messages_2041058307 (status, priority, queuing_order, conversation_group_id, conversation_handle, service_id)
go

create table rest_framework_api_key_apikey
(
	id nvarchar(100) not null
		primary key
			with (fillfactor = 80)
,
	created datetime2 not null,
	name nvarchar(50) not null,
	revoked bit not null,
	expiry_date datetime2,
	hashed_key nvarchar(100) not null,
	prefix nvarchar(8) not null
		constraint rest_framework_api_key_apikey_prefix_4e0db5f8_uniq
			unique
				with (fillfactor = 80)
)
go

create index rest_framework_api_key_apikey_created_c61872d9
	on rest_framework_api_key_apikey (created)
		with (fillfactor = 80)
go

create table sys.sqlagent_job_history
(
	instance_id int identity,
	job_id uniqueidentifier not null,
	step_id int not null,
	sql_message_id int not null,
	sql_severity int not null,
	message nvarchar(4000),
	run_status int not null,
	run_date int not null,
	run_time int not null,
	run_duration int not null,
	operator_id_emailed int not null,
	operator_id_paged int not null,
	retries_attempted int not null
)
go

create unique clustered index sqlagent_job_history_clust
	on sys.sqlagent_job_history (instance_id)
go

create index sqlagent_job_history_nc1
	on sys.sqlagent_job_history (job_id)
go

create table sys.sqlagent_jobs
(
	job_id uniqueidentifier not null,
	name sysname not null,
	enabled bit not null,
	description nvarchar(512),
	start_step_id int not null,
	notify_level_eventlog bit not null,
	delete_level int not null,
	date_created datetime not null,
	date_modified datetime not null
)
go

create unique clustered index sqlagent_jobs_clust
	on sys.sqlagent_jobs (job_id)
go

create index sqlagent_jobs_nc1_name
	on sys.sqlagent_jobs (name)
go

create table sys.sqlagent_jobsteps
(
	job_id uniqueidentifier not null,
	step_id int not null,
	step_name sysname not null,
	subsystem nvarchar(40) not null,
	command nvarchar(max),
	flags int not null,
	additional_parameters nvarchar(max),
	cmdexec_success_code int not null,
	on_success_action tinyint not null,
	on_success_step_id int not null,
	on_fail_action tinyint not null,
	on_fail_step_id int not null,
	server sysname,
	database_name sysname,
	database_user_name sysname,
	retry_attempts int not null,
	retry_interval int not null,
	os_run_priority int not null,
	output_file_name nvarchar(200),
	last_run_outcome int not null,
	last_run_duration int not null,
	last_run_retries int not null,
	last_run_date int not null,
	last_run_time int not null,
	step_uid uniqueidentifier not null
)
go

create unique clustered index sqlagent_jobsteps_clust
	on sys.sqlagent_jobsteps (job_id, step_id)
go

create unique index sqlagent_jobsteps_nc1
	on sys.sqlagent_jobsteps (job_id, step_name)
go

create unique index sqlagent_jobsteps_nc2
	on sys.sqlagent_jobsteps (step_uid)
go

create table sys.sqlagent_jobsteps_logs
(
	log_id int identity,
	log_text nvarchar(max) not null,
	date_created datetime not null,
	step_uid uniqueidentifier not null
)
go

create index sqlagent_jobsteps_logs_nc1
	on sys.sqlagent_jobsteps_logs (step_uid, date_created)
go

create table sys.sysallocunits
(
	auid bigint not null,
	type tinyint not null,
	ownerid bigint not null,
	status int not null,
	fgid smallint not null,
	pgfirst binary(6) not null,
	pgroot binary(6) not null,
	pgfirstiam binary(6) not null,
	pcused bigint not null,
	pcdata bigint not null,
	pcreserved bigint not null
)
go

exec sp_addextendedproperty 'MS_name', N'ElasticDatabaseJobs', 'SCHEMA', 'sys', 'TABLE', 'sysallocunits'
go

create unique clustered index clust
	on sys.sysallocunits (auid)
go

create unique index nc
	on sys.sysallocunits (ownerid, type, auid)
go

create table sys.sysasymkeys
(
	id int not null,
	name sysname not null,
	thumbprint varbinary(64) not null,
	bitlength int not null,
	algorithm char(2) not null,
	modified datetime not null,
	pkey varbinary(4700),
	encrtype char(2) not null,
	pukey varbinary(max) not null
)
go

create unique clustered index cl
	on sys.sysasymkeys (id)
go

create unique index nc1
	on sys.sysasymkeys (name)
go

create unique index nc3
	on sys.sysasymkeys (thumbprint)
go

create table sys.sysaudacts
(
	class tinyint not null,
	id int not null,
	subid int not null,
	grantee int not null,
	audit_spec_id int not null,
	type char(4) not null,
	state char not null
)
go

create unique clustered index clust
	on sys.sysaudacts (class, id, subid, grantee, audit_spec_id, type)
go

create table sys.sysbinobjs
(
	class tinyint not null,
	id int not null,
	nsid int not null,
	name sysname not null,
	status int not null,
	type char(2) not null,
	intprop int not null,
	created datetime not null,
	modified datetime not null
)
go

create unique clustered index clst
	on sys.sysbinobjs (class, id)
go

create unique index nc1
	on sys.sysbinobjs (class, nsid, name)
go

create table sys.sysbinsubobjs
(
	class tinyint not null,
	idmajor int not null,
	subid int not null,
	name sysname not null,
	status int not null,
	intprop int not null
)
go

create unique clustered index clst
	on sys.sysbinsubobjs (class, idmajor, subid)
go

create unique index nc1
	on sys.sysbinsubobjs (name, idmajor, class)
go

create table sys.sysbrickfiles
(
	brickid int not null,
	dbid int not null,
	pruid int not null,
	fileid int not null,
	grpid int not null,
	status int not null,
	filetype tinyint not null,
	filestate tinyint not null,
	size int not null,
	maxsize int not null,
	growth int not null,
	lname sysname not null,
	pname nvarchar(260) not null,
	createlsn binary(10),
	droplsn binary(10),
	fileguid uniqueidentifier,
	internalstatus int not null,
	readonlylsn binary(10),
	readwritelsn binary(10),
	readonlybaselsn binary(10),
	firstupdatelsn binary(10),
	lastupdatelsn binary(10),
	backuplsn binary(10),
	diffbaselsn binary(10),
	diffbaseguid uniqueidentifier,
	diffbasetime datetime not null,
	diffbaseseclsn binary(10),
	redostartlsn binary(10),
	redotargetlsn binary(10),
	forkguid uniqueidentifier,
	forklsn binary(10),
	forkvc bigint not null,
	redostartforkguid uniqueidentifier
)
go

create unique clustered index clst
	on sys.sysbrickfiles (dbid, pruid, fileid)
go

create table sys.syscerts
(
	id int not null,
	name sysname not null,
	issuer varbinary(884) not null,
	snum varbinary(32) not null,
	thumbprint varbinary(64) not null,
	pkey varbinary(4700),
	encrtype char(2) not null,
	cert varbinary(max) not null,
	status int not null,
	lastpkeybackup datetime
)
go

create unique clustered index cl
	on sys.syscerts (id)
go

create unique index nc1
	on sys.syscerts (name)
go

create unique index nc2
	on sys.syscerts (issuer, snum)
go

create unique index nc3
	on sys.syscerts (thumbprint)
go

create table sys.syschildinsts
(
	lsid varbinary(85) not null,
	iname sysname not null,
	ipipename nvarchar(260) not null,
	pid int not null,
	status int not null,
	crdate datetime not null,
	modate datetime not null,
	sysdbpath nvarchar(260) not null
)
go

create unique clustered index cl
	on sys.syschildinsts (lsid)
go

create table sys.sysclones
(
	id int not null,
	subid int not null,
	partid int not null,
	version int not null,
	segid int not null,
	cloneid int not null,
	rowsetid bigint not null,
	dbfragid int not null,
	status int not null
)
go

create unique clustered index clst
	on sys.sysclones (id, subid, partid, version, segid, cloneid)
go

create table sys.sysclsobjs
(
	class tinyint not null,
	id int not null,
	name sysname not null,
	status int not null,
	type char(2) not null,
	intprop int not null,
	created datetime not null,
	modified datetime not null
)
go

create unique clustered index clst
	on sys.sysclsobjs (class, id)
go

create unique index nc
	on sys.sysclsobjs (name, class)
go

create table sys.syscolpars
(
	id int not null,
	number smallint not null,
	colid int not null,
	name sysname,
	xtype tinyint not null,
	utype int not null,
	length smallint not null,
	prec tinyint not null,
	scale tinyint not null,
	collationid int not null,
	status int not null,
	maxinrow smallint not null,
	xmlns int not null,
	dflt int not null,
	chk int not null,
	idtval varbinary(64)
)
go

create unique clustered index clst
	on sys.syscolpars (id, number, colid)
go

create unique index nc
	on sys.syscolpars (id, name, number)
go

create table sys.syscommittab
(
	commit_ts bigint not null,
	xdes_id bigint not null,
	commit_lbn bigint not null,
	commit_csn bigint not null,
	commit_time datetime not null,
	dbfragid int not null
)
go

create unique clustered index ci_commit_ts
	on sys.syscommittab (commit_ts, xdes_id)
go

create unique index si_xdes_id
	on sys.syscommittab (xdes_id) include (dbfragid)
go

create index si_commit_time_ts
	on sys.syscommittab (commit_time, commit_ts)
go

create table sys.syscompfragments
(
	cprelid int not null,
	fragid int not null,
	fragobjid int not null,
	ts binary(8) not null,
	status int not null,
	datasize bigint not null,
	itemcnt bigint not null,
	rowcnt bigint not null
)
go

create unique clustered index clst
	on sys.syscompfragments (cprelid, fragid)
go

create table sys.sysconvgroup
(
	id uniqueidentifier not null,
	service_id int not null,
	status int not null,
	refcount int not null
)
go

create unique clustered index clst
	on sys.sysconvgroup (id)
go

create table sys.syscscolsegments
(
	hobt_id bigint not null,
	column_id int not null,
	segment_id int not null,
	version int not null,
	encoding_type int not null,
	row_count int not null,
	status int not null,
	base_id bigint not null,
	magnitude float not null,
	primary_dictionary_id int not null,
	secondary_dictionary_id int not null,
	min_data_id bigint not null,
	max_data_id bigint not null,
	null_value bigint not null,
	on_disk_size bigint not null,
	data_ptr binary(16) not null,
	container_id smallint,
	bloom_filter_md bigint,
	bloom_filter_data_ptr varbinary(16),
	collation_id int,
	min_deep_data varbinary(18),
	max_deep_data varbinary(18)
)
go

create unique clustered index clust
	on sys.syscscolsegments (hobt_id, column_id, segment_id)
go

create table sys.syscsdictionaries
(
	hobt_id bigint not null,
	column_id int not null,
	dictionary_id int not null,
	version int not null,
	type int not null,
	flags bigint not null,
	last_id int not null,
	entry_count bigint not null,
	on_disk_size bigint not null,
	data_ptr binary(16) not null,
	container_id smallint
)
go

create unique clustered index clust
	on sys.syscsdictionaries (hobt_id, column_id, dictionary_id)
go

create table sys.syscsrowgroups
(
	hobt_id bigint not null,
	segment_id int not null,
	version int not null,
	ds_hobtid bigint,
	row_count int not null,
	status int not null,
	flags int not null,
	compressed_reason int not null,
	generation bigint not null,
	created_time datetime,
	closed_time datetime,
	container_id smallint,
	blob_id binary(16),
	metadata_offset int,
	metadata_size int
)
go

create unique clustered index clust
	on sys.syscsrowgroups (hobt_id, segment_id)
go

create table sys.sysdbfiles
(
	dbfragid int not null,
	fileid int not null,
	fileguid uniqueidentifier not null,
	pname nvarchar(260)
)
go

create unique clustered index clst
	on sys.sysdbfiles (dbfragid, fileid)
go

create table sys.sysdbfrag
(
	dbid int not null,
	fragid int not null,
	name sysname not null,
	brickid int not null,
	pruid int not null,
	status int not null
)
go

create unique clustered index cl
	on sys.sysdbfrag (dbid, fragid)
go

create unique index nc1
	on sys.sysdbfrag (dbid, brickid, pruid)
go

create table sys.sysdbreg
(
	id int not null,
	name sysname not null,
	sid varbinary(85),
	status int not null,
	status2 int not null,
	category int not null,
	crdate datetime not null,
	modified datetime not null,
	svcbrkrguid uniqueidentifier not null,
	scope int not null,
	cmptlevel tinyint not null
)
go

create unique clustered index clst
	on sys.sysdbreg (id)
go

create unique index nc1
	on sys.sysdbreg (name)
go

create unique index nc2
	on sys.sysdbreg (svcbrkrguid, scope)
go

create table sys.sysdercv
(
	diagid uniqueidentifier not null,
	initiator tinyint not null,
	handle uniqueidentifier not null,
	rcvseq bigint not null,
	rcvfrag int not null,
	status int not null,
	state char(2) not null,
	lifetime datetime not null,
	contract int not null,
	svcid int not null,
	convgroup uniqueidentifier not null,
	sysseq bigint not null,
	enddlgseq bigint not null,
	firstoorder bigint not null,
	lastoorder bigint not null,
	lastoorderfr int not null,
	dlgtimer datetime not null,
	dlgopened datetime not null,
	princid int not null,
	outseskey varbinary(4096) not null,
	outseskeyid uniqueidentifier not null,
	farprincid int not null,
	inseskey varbinary(4096) not null,
	inseskeyid uniqueidentifier not null,
	farsvc nvarchar(256) not null,
	farbrkrinst nvarchar(128),
	priority tinyint not null
)
go

create unique clustered index cl
	on sys.sysdercv (diagid, initiator)
go

create table sys.sysdesend
(
	handle uniqueidentifier not null,
	diagid uniqueidentifier not null,
	initiator tinyint not null,
	sendseq bigint not null,
	sendxact binary(6) not null
)
go

create unique clustered index cl
	on sys.sysdesend (handle)
go

create table sysdiagrams
(
	name sysname not null,
	principal_id int not null,
	diagram_id int identity
		primary key
			with (fillfactor = 80)
,
	version int,
	definition varbinary(max),
	constraint UK_principal_name
		unique (principal_id, name)
			with (fillfactor = 80)
)
go

create table sys.sysendpts
(
	id int not null,
	name sysname not null,
	protocol tinyint not null,
	type tinyint not null,
	bstat smallint not null,
	affinity bigint not null,
	pstat smallint not null,
	tstat smallint not null,
	typeint int not null,
	port1 int not null,
	port2 int not null,
	site nvarchar(128),
	dfltns nvarchar(384),
	wsdlproc nvarchar(776),
	dfltdb sysname,
	authrealm nvarchar(128),
	dfltdm nvarchar(128),
	maxconn int not null,
	encalg tinyint not null,
	authtype tinyint not null
)
go

create unique clustered index clst
	on sys.sysendpts (id)
go

create unique index nc1
	on sys.sysendpts (name)
go

create table sys.sysextfileformats
(
	file_format_id int not null,
	name nvarchar(128) not null,
	format_type nvarchar(100) not null,
	field_terminator nvarchar(10),
	string_delimiter nvarchar(10),
	date_format nvarchar(50),
	use_type_default int not null,
	serde_method nvarchar(255),
	row_terminator nvarchar(10),
	encoding nvarchar(10),
	data_compression nvarchar(255),
	first_row int,
	extractor nvarchar(255),
	null_values nvarchar(421),
	parser_version nvarchar(8)
)
go

create unique clustered index clidx1
	on sys.sysextfileformats (file_format_id)
go

create unique index ncidx1
	on sys.sysextfileformats (name)
go

create table sys.sysextsources
(
	data_source_id int not null,
	name nvarchar(128) not null,
	type_desc nvarchar(255) not null,
	type tinyint not null,
	location nvarchar(4000) not null,
	credential_id int not null,
	job_tracker_location nvarchar(4000),
	storage_key nvarchar(4000),
	user_name nvarchar(128),
	shard_map_manager_db nvarchar(128),
	shard_map_name nvarchar(128),
	connection_options nvarchar(4000),
	pushdown nvarchar(256) not null
)
go

create unique clustered index clidx1
	on sys.sysextsources (data_source_id)
go

create unique index ncidx1
	on sys.sysextsources (name)
go

create table sys.sysexttables
(
	object_id int not null,
	data_source_id int not null,
	file_format_id int,
	location nvarchar(4000),
	reject_type nvarchar(20),
	reject_value float,
	reject_sample_value float,
	sharding_dist_type tinyint not null,
	sharding_col_id int not null,
	source_schema_name nvarchar(128),
	source_table_name nvarchar(128),
	rejected_row_location nvarchar(4000)
)
go

create unique clustered index clidx1
	on sys.sysexttables (object_id)
go

create table sys.sysfgfrag
(
	fgid int not null,
	fgfragid int not null,
	dbfragid int not null,
	phfgid int not null,
	status int not null
)
go

create unique clustered index cl
	on sys.sysfgfrag (fgid, fgfragid, dbfragid, phfgid)
go

create table sys.sysfiles1
(
	status int not null,
	fileid smallint not null,
	name nchar(128) not null,
	filename nchar(260) not null
)
go

exec sp_addextendedproperty 'MS_name', N'ElasticDatabaseJobs', 'SCHEMA', 'sys', 'TABLE', 'sysfiles1'
go

create table sys.sysfoqueues
(
	id int not null,
	lsn binary(10) not null,
	epoch int,
	csn bigint,
	created datetime not null
)
go

create unique clustered index clst
	on sys.sysfoqueues (id, lsn)
go

create table sys.sysfos
(
	id int not null,
	tgid int not null,
	low varbinary(512) not null,
	high varbinary(512),
	rowcnt bigint,
	size bigint,
	csn bigint,
	epoch int,
	status char not null,
	history varbinary(6000),
	created datetime not null,
	modified datetime not null
)
go

create unique clustered index clst
	on sys.sysfos (id)
go

create unique index nc1
	on sys.sysfos (tgid, low, high)
go

create table sys.sysftinds
(
	id int not null,
	indid int not null,
	status int not null,
	crtype char not null,
	crstart datetime,
	crend datetime,
	crrows bigint not null,
	crerrors int not null,
	crschver binary(8) not null,
	crtsnext binary(8),
	sensitivity tinyint not null,
	bXVTDocidUseBaseT tinyint not null,
	batchsize int not null,
	nextdocid bigint not null,
	fgid int not null
)
go

create unique clustered index clst
	on sys.sysftinds (id)
go

create table sys.sysftproperties
(
	property_list_id int not null,
	property_id int not null,
	property_name nvarchar(256) not null,
	guid_identifier uniqueidentifier not null,
	int_identifier int not null,
	string_description nvarchar(512)
)
go

create unique clustered index clst
	on sys.sysftproperties (property_list_id, property_id)
go

create unique index nonclst
	on sys.sysftproperties (property_list_id, property_name)
go

create unique index nonclstgi
	on sys.sysftproperties (property_list_id, guid_identifier, int_identifier)
go

create table sys.sysftsemanticsdb
(
	database_id int not null,
	register_date datetime not null,
	registered_by int not null,
	version nvarchar(128) not null,
	fileguid uniqueidentifier not null
)
go

create unique clustered index cl
	on sys.sysftsemanticsdb (database_id)
go

create table sys.sysftstops
(
	stoplistid int not null,
	stopword nvarchar(64) not null,
	lcid int not null,
	status tinyint not null
)
go

create unique clustered index clst
	on sys.sysftstops (stoplistid, stopword, lcid)
go

create table sys.sysguidrefs
(
	class tinyint not null,
	id int not null,
	subid int not null,
	guid uniqueidentifier not null,
	status int not null
)
go

create unique clustered index cl
	on sys.sysguidrefs (id, class, subid)
go

create unique index nc
	on sys.sysguidrefs (guid, class)
go

create table sys.sysidxstats
(
	id int not null,
	indid int not null,
	name sysname,
	status int not null,
	intprop int not null,
	fillfact tinyint not null,
	type tinyint not null,
	tinyprop tinyint not null,
	dataspace int not null,
	lobds int not null,
	rowset bigint not null
)
go

create unique clustered index clst
	on sys.sysidxstats (id, indid)
go

create unique index nc
	on sys.sysidxstats (name, id)
go

create table sys.sysiscols
(
	idmajor int not null,
	idminor int not null,
	subid int not null,
	status int not null,
	intprop int not null,
	tinyprop1 tinyint not null,
	tinyprop2 tinyint not null,
	tinyprop3 tinyint not null,
	tinyprop4 tinyint not null
)
go

create unique clustered index clst
	on sys.sysiscols (idmajor, idminor, subid)
go

create unique index nc1
	on sys.sysiscols (idmajor, intprop, subid, idminor)
go

create table sys.syslnklgns
(
	srvid int not null,
	lgnid int,
	name sysname,
	status int not null,
	modate datetime not null,
	pwdhash varbinary(320)
)
go

create unique clustered index cl
	on sys.syslnklgns (srvid, lgnid)
go

create table sys.sysmultiobjrefs
(
	class tinyint not null,
	depid int not null,
	depsubid int not null,
	indepid int not null,
	indepsubid int not null,
	status int not null
)
go

create unique clustered index clst
	on sys.sysmultiobjrefs (depid, class, depsubid, indepid, indepsubid)
go

create unique index nc1
	on sys.sysmultiobjrefs (indepid, class, indepsubid, depid, depsubid)
go

create table sys.sysmultiobjvalues
(
	valclass tinyint not null,
	depid int not null,
	depsubid int not null,
	indepid int not null,
	indepsubid int not null,
	valnum int not null,
	value sql_variant,
	imageval varbinary(max)
)
go

create unique clustered index clust
	on sys.sysmultiobjvalues (valclass, depid, depsubid, indepid, indepsubid, valnum)
go

create unique index nc1
	on sys.sysmultiobjvalues (valclass, indepid, indepsubid, depid, depsubid, valnum)
go

create table sys.sysnsobjs
(
	class tinyint not null,
	id int not null,
	name sysname not null,
	nsid int not null,
	status int not null,
	intprop int not null,
	created datetime not null,
	modified datetime not null
)
go

create unique clustered index clst
	on sys.sysnsobjs (class, id)
go

create unique index nc
	on sys.sysnsobjs (name, nsid, class)
go

create table sys.sysobjkeycrypts
(
	class tinyint not null,
	id int not null,
	thumbprint varbinary(32) not null,
	type char(4) not null,
	crypto varbinary(max) not null,
	status int not null
)
go

create unique clustered index cl
	on sys.sysobjkeycrypts (class, id, thumbprint)
go

create table sys.sysobjvalues
(
	valclass tinyint not null,
	objid int not null,
	subobjid int not null,
	valnum int not null,
	value sql_variant,
	imageval varbinary(max)
)
go

create unique clustered index clst
	on sys.sysobjvalues (valclass, objid, subobjid, valnum)
go

create table sys.sysowners
(
	id int not null,
	name sysname not null,
	type char not null,
	sid varbinary(85),
	password varbinary(256),
	dfltsch sysname,
	status int not null,
	created datetime not null,
	modified datetime not null,
	deflanguage sysname
)
go

create unique clustered index clst
	on sys.sysowners (id)
go

create unique index nc1
	on sys.sysowners (name)
go

create unique index nc2
	on sys.sysowners (sid, id)
go

create table sys.sysphfg
(
	dbfragid int not null,
	phfgid int not null,
	fgid int not null,
	type char(2) not null,
	fgguid uniqueidentifier,
	lgfgid int,
	status int not null,
	name sysname not null
)
go

create unique clustered index cl
	on sys.sysphfg (phfgid)
go

create table sys.syspriorities
(
	priority_id int not null,
	name sysname not null,
	service_contract_id int,
	local_service_id int,
	remote_service_name nvarchar(256),
	priority tinyint not null
)
go

create unique clustered index cl
	on sys.syspriorities (priority_id)
go

create unique index nc
	on sys.syspriorities (service_contract_id, local_service_id, remote_service_name) include (priority)
go

create unique index nc2
	on sys.syspriorities (name)
go

create table sys.sysprivs
(
	class tinyint not null,
	id int not null,
	subid int not null,
	grantee int not null,
	grantor int not null,
	type char(4) not null,
	state char not null
)
go

create unique clustered index clust
	on sys.sysprivs (class, id, subid, grantee, grantor, type)
go

create table sys.syspru
(
	brickid int not null,
	dbid int not null,
	pruid int not null,
	fragid int not null,
	status int not null
)
go

create unique clustered index cl
	on sys.syspru (dbid, pruid)
go

create table sys.sysprufiles
(
	dbfragid int not null,
	fileid int not null,
	grpid int not null,
	status int not null,
	filetype tinyint not null,
	filestate tinyint not null,
	size int not null,
	maxsize int not null,
	growth int not null,
	lname sysname not null,
	pname nvarchar(260) not null,
	createlsn binary(10),
	droplsn binary(10),
	fileguid uniqueidentifier,
	internalstatus int not null,
	readonlylsn binary(10),
	readwritelsn binary(10),
	readonlybaselsn binary(10),
	firstupdatelsn binary(10),
	lastupdatelsn binary(10),
	backuplsn binary(10),
	diffbaselsn binary(10),
	diffbaseguid uniqueidentifier,
	diffbasetime datetime not null,
	diffbaseseclsn binary(10),
	redostartlsn binary(10),
	redotargetlsn binary(10),
	forkguid uniqueidentifier,
	forklsn binary(10),
	forkvc bigint not null,
	redostartforkguid uniqueidentifier
)
go

create unique clustered index clst
	on sys.sysprufiles (fileid)
go

create table sys.sysqnames
(
	qid int not null,
	hash int not null,
	nid int not null,
	name nvarchar(4000) not null
)
go

create unique clustered index clst
	on sys.sysqnames (qid, hash, nid)
go

create unique index nc1
	on sys.sysqnames (nid)
go

create table sys.sysremsvcbinds
(
	id int not null,
	name sysname not null,
	scid int not null,
	remsvc nvarchar(256),
	status int not null
)
go

create unique clustered index clst
	on sys.sysremsvcbinds (id)
go

create unique index nc1
	on sys.sysremsvcbinds (name)
go

create unique index nc2
	on sys.sysremsvcbinds (scid, remsvc)
go

create table sys.sysrmtlgns
(
	srvid int not null,
	name sysname,
	lgnid int,
	status int not null,
	modate datetime not null
)
go

create unique clustered index cl
	on sys.sysrmtlgns (srvid, name)
go

create table sys.sysrowsetrefs
(
	class tinyint not null,
	objid int not null,
	indexid int not null,
	rowsetnum int not null,
	rowsetid bigint not null,
	status int not null
)
go

create unique clustered index clust
	on sys.sysrowsetrefs (class, objid, indexid, rowsetnum)
go

create table sys.sysrowsets
(
	rowsetid bigint not null,
	ownertype tinyint not null,
	idmajor int not null,
	idminor int not null,
	numpart int not null,
	status int not null,
	fgidfs smallint not null,
	rcrows bigint not null,
	cmprlevel tinyint not null,
	fillfact tinyint not null,
	maxnullbit smallint not null,
	maxleaf int not null,
	maxint smallint not null,
	minleaf smallint not null,
	minint smallint not null,
	rsguid varbinary(16),
	lockres varbinary(8),
	scope_id int
)
go

create unique clustered index clust
	on sys.sysrowsets (rowsetid)
go

create table sys.sysrscols
(
	rsid bigint not null,
	rscolid int not null,
	hbcolid int not null,
	rcmodified bigint not null,
	ti int not null,
	cid int not null,
	ordkey smallint not null,
	maxinrowlen smallint not null,
	status int not null,
	offset int not null,
	nullbit int not null,
	bitpos smallint not null,
	colguid varbinary(16),
	ordlock int
)
go

create unique clustered index clst
	on sys.sysrscols (rsid, hbcolid)
go

create table sys.sysrts
(
	id int not null,
	name sysname not null,
	remsvc nvarchar(256),
	brkrinst nvarchar(128),
	addr nvarchar(256),
	miraddr nvarchar(256),
	lifetime datetime
)
go

create unique clustered index clst
	on sys.sysrts (id)
go

create unique index nc1
	on sys.sysrts (remsvc, brkrinst, id)
go

create unique index nc2
	on sys.sysrts (name)
go

create table sys.sysscalartypes
(
	id int not null,
	schid int not null,
	name sysname not null,
	xtype tinyint not null,
	length smallint not null,
	prec tinyint not null,
	scale tinyint not null,
	collationid int not null,
	status int not null,
	created datetime not null,
	modified datetime not null,
	dflt int not null,
	chk int not null
)
go

create unique clustered index clst
	on sys.sysscalartypes (id)
go

create unique index nc1
	on sys.sysscalartypes (schid, name)
go

create unique index nc2
	on sys.sysscalartypes (name, schid)
go

create table sys.sysschobjs
(
	id int not null,
	name sysname not null,
	nsid int not null,
	nsclass tinyint not null,
	status int not null,
	type char(2) not null,
	pid int not null,
	pclass tinyint not null,
	intprop int not null,
	created datetime not null,
	modified datetime not null,
	status2 int not null
)
go

create unique clustered index clst
	on sys.sysschobjs (id)
go

create unique index nc1
	on sys.sysschobjs (nsclass, nsid, name)
go

create unique index nc2
	on sys.sysschobjs (name, nsid, nsclass)
go

create index nc3
	on sys.sysschobjs (pid, pclass)
go

create table sys.sysseobjvalues
(
	valclass tinyint not null,
	id bigint not null,
	subid bigint not null,
	valnum int not null,
	value sql_variant,
	imageval varbinary(max)
)
go

exec sp_addextendedproperty 'MS_name', N'ElasticDatabaseJobs', 'SCHEMA', 'sys', 'TABLE', 'sysseobjvalues'
go

create unique clustered index clst
	on sys.sysseobjvalues (valclass, id, subid, valnum)
go

create table sys.syssingleobjrefs
(
	class tinyint not null,
	depid int not null,
	depsubid int not null,
	indepid int not null,
	indepsubid int not null,
	status int not null
)
go

create unique clustered index clst
	on sys.syssingleobjrefs (depid, class, depsubid)
go

create unique index nc1
	on sys.syssingleobjrefs (indepid, class, indepsubid, depid, depsubid)
go

create table sys.syssoftobjrefs
(
	depclass tinyint not null,
	depid int not null,
	indepclass tinyint not null,
	indepname sysname not null,
	indepschema sysname,
	indepdb sysname,
	indepserver sysname,
	number int not null,
	status int not null
)
go

create unique clustered index clst
	on sys.syssoftobjrefs (depid, depclass, indepname, indepschema, indepclass, number)
go

create unique index nc1
	on sys.syssoftobjrefs (indepname, indepschema, indepclass, depid, depclass, number)
go

create table sys.syssqlguides
(
	id int not null,
	name sysname not null,
	scopetype tinyint not null,
	scopeid int not null,
	hash varbinary(20),
	status int not null,
	created datetime not null,
	modified datetime not null,
	batchtext nvarchar(max),
	paramorhinttext nvarchar(max)
)
go

create unique clustered index clst
	on sys.syssqlguides (id)
go

create unique index nc1
	on sys.syssqlguides (name)
go

create unique index nc2
	on sys.syssqlguides (scopetype, scopeid, hash, id)
go

create table sys.systypedsubobjs
(
	class tinyint not null,
	idmajor int not null,
	subid int not null,
	name sysname,
	xtype tinyint not null,
	utype int not null,
	length smallint not null,
	prec tinyint not null,
	scale tinyint not null,
	collationid int not null,
	status int not null,
	intprop int not null
)
go

create unique clustered index clst
	on sys.systypedsubobjs (class, idmajor, subid)
go

create unique index nc
	on sys.systypedsubobjs (name, idmajor, class)
go

create table sys.sysusermsgs
(
	id int not null,
	msglangid smallint not null,
	severity smallint not null,
	status smallint not null,
	text nvarchar(1024) not null
)
go

create unique clustered index clst
	on sys.sysusermsgs (id, msglangid)
go

create table sys.syswebmethods
(
	id int not null,
	nmspace nvarchar(384),
	alias nvarchar(64) not null,
	objname nvarchar(776),
	status int not null
)
go

create unique clustered index clst
	on sys.syswebmethods (id, nmspace, alias)
go

create table sys.sysxlgns
(
	id int not null,
	name sysname not null,
	sid varbinary(85),
	status int not null,
	type char not null,
	crdate datetime not null,
	modate datetime not null,
	dbname sysname,
	lang sysname,
	pwdhash varbinary(256)
)
go

create unique clustered index cl
	on sys.sysxlgns (id)
go

create unique index nc1
	on sys.sysxlgns (name)
go

create unique index nc2
	on sys.sysxlgns (sid)
go

create table sys.sysxmitbody
(
	msgref bigint not null,
	count int not null,
	msgbody varbinary(max)
)
go

create unique clustered index clst
	on sys.sysxmitbody (msgref)
go

create table sys.sysxmitqueue
(
	dlgid uniqueidentifier not null,
	finitiator bit not null,
	tosvc nvarchar(256),
	tobrkrinst nvarchar(128),
	fromsvc nvarchar(256),
	frombrkrinst nvarchar(128),
	svccontr nvarchar(256),
	msgseqnum bigint not null,
	msgtype nvarchar(256),
	unackmfn int not null,
	status int not null,
	enqtime datetime not null,
	rsndtime datetime,
	dlgerr int not null,
	msgid uniqueidentifier not null,
	hdrpartlen smallint not null,
	hdrseclen smallint not null,
	msgenc tinyint not null,
	msgbodylen int not null,
	msgbody varbinary(max),
	msgref bigint
)
go

create unique clustered index clst
	on sys.sysxmitqueue (dlgid, finitiator, msgseqnum)
go

create table sys.sysxmlcomponent
(
	id int not null,
	xsdid int not null,
	uriord int not null,
	qual tinyint not null,
	nameid int not null,
	symspace char not null,
	nmscope int not null,
	kind char not null,
	deriv char not null,
	status int not null,
	enum char not null,
	defval nvarchar(4000)
)
go

create unique clustered index cl
	on sys.sysxmlcomponent (id)
go

create unique index nc1
	on sys.sysxmlcomponent (xsdid, uriord, qual, nameid, symspace, nmscope)
go

create table sys.sysxmlfacet
(
	compid int not null,
	ord int not null,
	kind char(2) not null,
	status smallint not null,
	dflt nvarchar(4000)
)
go

create unique clustered index cl
	on sys.sysxmlfacet (compid, ord)
go

create table sys.sysxmlplacement
(
	placingid int not null,
	ordinal int not null,
	placedid int not null,
	status int not null,
	minoccur int not null,
	maxoccur int not null,
	defval nvarchar(4000)
)
go

create unique clustered index cl
	on sys.sysxmlplacement (placingid, ordinal)
go

create unique index nc1
	on sys.sysxmlplacement (placedid, placingid, ordinal)
go

create table sys.sysxprops
(
	class tinyint not null,
	id int not null,
	subid int not null,
	name sysname not null,
	value sql_variant
)
go

create unique clustered index clust
	on sys.sysxprops (class, id, subid, name)
go

create table sys.sysxsrvs
(
	id int not null,
	name sysname not null,
	product sysname not null,
	provider sysname not null,
	status int not null,
	modate datetime not null,
	catalog sysname,
	cid int,
	connecttimeout int,
	querytimeout int
)
go

create unique clustered index cl
	on sys.sysxsrvs (id)
go

create unique index nc1
	on sys.sysxsrvs (name)
go

create table sys.td_state_injection_points_v2
(
	id int identity,
	pattern_id int not null,
	replacement_type int not null,
	offset int not null,
	length int not null
)
go

create unique clustered index idx_td_state_injection_points_v2_id
	on sys.td_state_injection_points_v2 (id)
go

create table sys.td_state_meta_v2
(
	id int identity,
	component_name nvarchar(256),
	version_num int not null,
	time_stamp_utc datetime2 not null,
	threat_id int,
	info nvarchar(max)
)
go

create unique clustered index idx_td_state_meta_v2_id
	on sys.td_state_meta_v2 (id)
go

create table sys.td_state_patterns_v2
(
	id int identity,
	version_num int not null,
	last_seen_time_utc datetime2 not null,
	application_name nvarchar(128),
	principal_name nvarchar(128),
	channel int not null,
	pattern nvarchar(max)
)
go

create unique clustered index idx_td_state_patterns_v2_id
	on sys.td_state_patterns_v2 (id)
go

create table sys.td_state_threats_v2
(
	id int identity,
	detector_name nvarchar(256),
	first_detection_time_utc datetime2 not null,
	last_detection_time_utc datetime2 not null,
	attack_count int not null,
	status int not null
)
go

create unique clustered index idx_td_state_threats_v2_id
	on sys.td_state_threats_v2 (id)
go

create table sys.td_state_vulnerabilities_v2
(
	id int identity,
	injection_point_id int not null,
	threat_id int not null
)
go

create unique clustered index idx_td_state_vulnerabilities_v2_id
	on sys.td_state_vulnerabilities_v2 (id)
go

create table sys.trace_xe_action_map
(
	trace_column_id smallint not null,
	package_name nvarchar(60) not null,
	xe_action_name nvarchar(60) not null
)
go

create table sys.trace_xe_event_map
(
	trace_event_id smallint not null,
	package_name nvarchar(60) not null,
	xe_event_name nvarchar(60) not null
)
go

create table sys.wpr_bucket_table
(
	bucket_id bigint not null,
	bucket_data varbinary(8000)
)
go

create unique clustered index wpr_bucket_clustered_idx
	on sys.wpr_bucket_table (bucket_id)
go

create view INFORMATION_SCHEMA.CHECK_CONSTRAINTS as
	-- missing source code
go

create view INFORMATION_SCHEMA.COLUMNS as
	-- missing source code
go

create view INFORMATION_SCHEMA.COLUMN_DOMAIN_USAGE as
	-- missing source code
go

create view INFORMATION_SCHEMA.COLUMN_PRIVILEGES as
	-- missing source code
go

create view INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE as
	-- missing source code
go

create view INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE as
	-- missing source code
go

create view INFORMATION_SCHEMA.DOMAINS as
	-- missing source code
go

create view INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS as
	-- missing source code
go

create view INFORMATION_SCHEMA.KEY_COLUMN_USAGE as
	-- missing source code
go

create view INFORMATION_SCHEMA.PARAMETERS as
	-- missing source code
go

create view INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS as
	-- missing source code
go

create view INFORMATION_SCHEMA.ROUTINES as
	-- missing source code
go

create view INFORMATION_SCHEMA.ROUTINE_COLUMNS as
	-- missing source code
go

create view INFORMATION_SCHEMA.SCHEMATA as
	-- missing source code
go

create view INFORMATION_SCHEMA.SEQUENCES as
	-- missing source code
go

create view INFORMATION_SCHEMA.TABLES as
	-- missing source code
go

create view INFORMATION_SCHEMA.TABLE_CONSTRAINTS as
	-- missing source code
go

create view INFORMATION_SCHEMA.TABLE_PRIVILEGES as
	-- missing source code
go

create view INFORMATION_SCHEMA.VIEWS as
	-- missing source code
go

create view INFORMATION_SCHEMA.VIEW_COLUMN_USAGE as
	-- missing source code
go

create view INFORMATION_SCHEMA.VIEW_TABLE_USAGE as
	-- missing source code
go

create view sys.all_columns as
	-- missing source code
go

grant select on sys.all_columns to [public]
go

create view sys.all_objects as
	-- missing source code
go

grant select on sys.all_objects to [public]
go

create view sys.all_parameters as
	-- missing source code
go

grant select on sys.all_parameters to [public]
go

create view sys.all_sql_modules as
	-- missing source code
go

grant select on sys.all_sql_modules to [public]
go

create view sys.all_views as
	-- missing source code
go

grant select on sys.all_views to [public]
go

create view sys.allocation_units as
	-- missing source code
go

grant select on sys.allocation_units to [public]
go

create view sys.assemblies as
	-- missing source code
go

grant select on sys.assemblies to [public]
go

create view sys.assembly_files as
	-- missing source code
go

grant select on sys.assembly_files to [public]
go

create view sys.assembly_modules as
	-- missing source code
go

grant select on sys.assembly_modules to [public]
go

create view sys.assembly_references as
	-- missing source code
go

grant select on sys.assembly_references to [public]
go

create view sys.assembly_types as
	-- missing source code
go

grant select on sys.assembly_types to [public]
go

create view sys.asymmetric_keys as
	-- missing source code
go

grant select on sys.asymmetric_keys to [public]
go

create view sys.certificates as
	-- missing source code
go

grant select on sys.certificates to [public]
go

create view sys.change_tracking_databases as
	-- missing source code
go

create view sys.change_tracking_tables as
	-- missing source code
go

grant select on sys.change_tracking_tables to [public]
go

create view sys.check_constraints as
	-- missing source code
go

grant select on sys.check_constraints to [public]
go

create view sys.column_encryption_key_values as
	-- missing source code
go

grant select on sys.column_encryption_key_values to [public]
go

create view sys.column_encryption_keys as
	-- missing source code
go

grant select on sys.column_encryption_keys to [public]
go

create view sys.column_master_key_definitions as
	-- missing source code
go

grant select on sys.column_master_key_definitions to [public]
go

create view sys.column_master_keys as
	-- missing source code
go

grant select on sys.column_master_keys to [public]
go

create view sys.column_store_dictionaries as
	-- missing source code
go

grant select on sys.column_store_dictionaries to [public]
go

create view sys.column_store_row_groups as
	-- missing source code
go

grant select on sys.column_store_row_groups to [public]
go

create view sys.column_store_segments as
	-- missing source code
go

grant select on sys.column_store_segments to [public]
go

create view sys.column_type_usages as
	-- missing source code
go

grant select on sys.column_type_usages to [public]
go

create view sys.column_xml_schema_collection_usages as
	-- missing source code
go

grant select on sys.column_xml_schema_collection_usages to [public]
go

create view sys.columns as
	-- missing source code
go

grant select on sys.columns to [public]
go

create view sys.computed_columns as
	-- missing source code
go

grant select on sys.computed_columns to [public]
go

create view sys.configurations as
	-- missing source code
go

create view sys.conversation_endpoints as
	-- missing source code
go

grant select on sys.conversation_endpoints to [public]
go

create view sys.conversation_groups as
	-- missing source code
go

grant select on sys.conversation_groups to [public]
go

create view sys.conversation_priorities as
	-- missing source code
go

grant select on sys.conversation_priorities to [public]
go

create view sys.credentials as
	-- missing source code
go

create view sys.crypt_properties as
	-- missing source code
go

grant select on sys.crypt_properties to [public]
go

create view sys.data_spaces as
	-- missing source code
go

grant select on sys.data_spaces to [public]
go

create view sys.database_audit_specification_details as
	-- missing source code
go

grant select on sys.database_audit_specification_details to [public]
go

create view sys.database_audit_specifications as
	-- missing source code
go

grant select on sys.database_audit_specifications to [public]
go

create view sys.database_automatic_tuning_mode as
	-- missing source code
go

grant select on sys.database_automatic_tuning_mode to [public]
go

create view sys.database_automatic_tuning_options as
	-- missing source code
go

grant select on sys.database_automatic_tuning_options to [public]
go

create view sys.database_connection_stats_ex as
	-- missing source code
go

create view sys.database_credentials as
	-- missing source code
go

grant select on sys.database_credentials to [public]
go

create view sys.database_event_session_actions as
	-- missing source code
go

grant select on sys.database_event_session_actions to [public]
go

create view sys.database_event_session_events as
	-- missing source code
go

grant select on sys.database_event_session_events to [public]
go

create view sys.database_event_session_fields as
	-- missing source code
go

grant select on sys.database_event_session_fields to [public]
go

create view sys.database_event_session_targets as
	-- missing source code
go

grant select on sys.database_event_session_targets to [public]
go

create view sys.database_event_sessions as
	-- missing source code
go

grant select on sys.database_event_sessions to [public]
go

create view sys.database_files as
	-- missing source code
go

grant select on sys.database_files to [public]
go

create view sys.database_firewall_rules as
	-- missing source code
go

grant select on sys.database_firewall_rules to [public]
go

create view sys.database_permissions as
	-- missing source code
go

grant select on sys.database_permissions to [public]
go

create view sys.database_principals as
	-- missing source code
go

grant select on sys.database_principals to [public]
go

create view sys.database_query_store_options as
	-- missing source code
go

create view sys.database_resource_governor_workload_groups as
	-- missing source code
go

grant select on sys.database_resource_governor_workload_groups to [public]
go

create view sys.database_role_members as
	-- missing source code
go

grant select on sys.database_role_members to [public]
go

create view sys.database_scoped_configurations as
	-- missing source code
go

grant select on sys.database_scoped_configurations to [public]
go

create view sys.database_scoped_credentials as
	-- missing source code
go

grant select on sys.database_scoped_credentials to [public]
go

create view sys.database_service_objectives as
	-- missing source code
go

create view sys.databases as
	-- missing source code
go

create view sys.default_constraints as
	-- missing source code
go

grant select on sys.default_constraints to [public]
go

create view sys.destination_data_spaces as
	-- missing source code
go

grant select on sys.destination_data_spaces to [public]
go

create view sys.dm_audit_actions as
	-- missing source code
go

create view sys.dm_audit_class_type_map as
	-- missing source code
go

create view sys.dm_broker_activated_tasks as
	-- missing source code
go

create view sys.dm_broker_forwarded_messages as
	-- missing source code
go

create view sys.dm_broker_queue_monitors as
	-- missing source code
go

create view sys.dm_cdc_errors as
	-- missing source code
go

create view sys.dm_cdc_log_scan_sessions as
	-- missing source code
go

create view sys.dm_cloud_database_epoch as
	-- missing source code
go

create view sys.dm_clr_appdomains as
	-- missing source code
go

create view sys.dm_clr_loaded_assemblies as
	-- missing source code
go

create view sys.dm_clr_properties as
	-- missing source code
go

create view sys.dm_clr_tasks as
	-- missing source code
go

create view sys.dm_cluster_endpoints as
	-- missing source code
go

create view sys.dm_column_encryption_enclave as
	-- missing source code
go

create view sys.dm_column_store_object_pool as
	-- missing source code
go

create view sys.dm_continuous_copy_status as
	-- missing source code
go

create view sys.dm_database_encryption_keys as
	-- missing source code
go

create view sys.dm_database_replica_states as
	-- missing source code
go

create view sys.dm_db_column_store_row_group_operational_stats as
	-- missing source code
go

create view sys.dm_db_column_store_row_group_physical_stats as
	-- missing source code
go

grant select on sys.dm_db_column_store_row_group_physical_stats to [public]
go

create view sys.dm_db_data_pools as
	-- missing source code
go

create view sys.dm_db_file_space_usage as
	-- missing source code
go

create view sys.dm_db_fts_index_physical_stats as
	-- missing source code
go

create view sys.dm_db_index_usage_stats as
	-- missing source code
go

create view sys.dm_db_log_space_usage as
	-- missing source code
go

create view sys.dm_db_missing_index_details as
	-- missing source code
go

create view sys.dm_db_missing_index_group_stats as
	-- missing source code
go

create view sys.dm_db_missing_index_group_stats_query as
	-- missing source code
go

create view sys.dm_db_missing_index_groups as
	-- missing source code
go

create view sys.dm_db_objects_impacted_on_version_change as
	-- missing source code
go

create view sys.dm_db_partition_stats as
	-- missing source code
go

create view sys.dm_db_persisted_sku_features as
	-- missing source code
go

create view sys.dm_db_resource_governor_configuration as
	-- missing source code
go

grant select on sys.dm_db_resource_governor_configuration to [public]
go

create view sys.dm_db_resource_stats as
	-- missing source code
go

create view sys.dm_db_script_level as
	-- missing source code
go

create view sys.dm_db_session_space_usage as
	-- missing source code
go

create view sys.dm_db_storage_pools as
	-- missing source code
go

create view sys.dm_db_task_space_usage as
	-- missing source code
go

create view sys.dm_db_tuning_recommendations as
	-- missing source code
go

create view sys.dm_db_uncontained_entities as
	-- missing source code
go

create view sys.dm_db_wait_stats as
	-- missing source code
go

create view sys.dm_db_workload_group_resource_stats as
	-- missing source code
go

grant select on sys.dm_db_workload_group_resource_stats to [public]
go

create view sys.dm_db_xtp_checkpoint_files as
	-- missing source code
go

create view sys.dm_db_xtp_checkpoint_internals as
	-- missing source code
go

create view sys.dm_db_xtp_checkpoint_stats as
	-- missing source code
go

create view sys.dm_db_xtp_gc_cycle_stats as
	-- missing source code
go

create view sys.dm_db_xtp_hash_index_stats as
	-- missing source code
go

create view sys.dm_db_xtp_index_stats as
	-- missing source code
go

create view sys.dm_db_xtp_memory_consumers as
	-- missing source code
go

create view sys.dm_db_xtp_nonclustered_index_stats as
	-- missing source code
go

create view sys.dm_db_xtp_object_stats as
	-- missing source code
go

create view sys.dm_db_xtp_table_memory_stats as
	-- missing source code
go

create view sys.dm_db_xtp_transactions as
	-- missing source code
go

create view sys.dm_exec_background_job_queue as
	-- missing source code
go

create view sys.dm_exec_background_job_queue_stats as
	-- missing source code
go

create view sys.dm_exec_cached_plans as
	-- missing source code
go

create view sys.dm_exec_compute_node_errors as
	-- missing source code
go

create view sys.dm_exec_compute_node_status as
	-- missing source code
go

create view sys.dm_exec_compute_nodes as
	-- missing source code
go

create view sys.dm_exec_compute_pools as
	-- missing source code
go

create view sys.dm_exec_connections as
	-- missing source code
go

create view sys.dm_exec_distributed_request_steps as
	-- missing source code
go

create view sys.dm_exec_distributed_requests as
	-- missing source code
go

create view sys.dm_exec_distributed_sql_requests as
	-- missing source code
go

create view sys.dm_exec_dms_services as
	-- missing source code
go

create view sys.dm_exec_dms_workers as
	-- missing source code
go

create view sys.dm_exec_external_operations as
	-- missing source code
go

create view sys.dm_exec_external_work as
	-- missing source code
go

create view sys.dm_exec_function_stats as
	-- missing source code
go

create view sys.dm_exec_procedure_stats as
	-- missing source code
go

create view sys.dm_exec_query_memory_grants as
	-- missing source code
go

create view sys.dm_exec_query_optimizer_info as
	-- missing source code
go

create view sys.dm_exec_query_optimizer_memory_gateways as
	-- missing source code
go

create view sys.dm_exec_query_profiles as
	-- missing source code
go

create view sys.dm_exec_query_resource_semaphores as
	-- missing source code
go

create view sys.dm_exec_query_stats as
	-- missing source code
go

create view sys.dm_exec_query_transformation_stats as
	-- missing source code
go

create view sys.dm_exec_requests as
	-- missing source code
go

create view sys.dm_exec_session_wait_stats as
	-- missing source code
go

create view sys.dm_exec_sessions as
	-- missing source code
go

create view sys.dm_exec_trigger_stats as
	-- missing source code
go

create view sys.dm_exec_valid_use_hints as
	-- missing source code
go

create view sys.dm_external_script_execution_stats as
	-- missing source code
go

create view sys.dm_external_script_requests as
	-- missing source code
go

create view sys.dm_external_script_resource_usage_stats as
	-- missing source code
go

create view sys.dm_fts_active_catalogs as
	-- missing source code
go

create view sys.dm_fts_fdhosts as
	-- missing source code
go

create view sys.dm_fts_index_population as
	-- missing source code
go

create view sys.dm_fts_memory_buffers as
	-- missing source code
go

create view sys.dm_fts_memory_pools as
	-- missing source code
go

create view sys.dm_fts_outstanding_batches as
	-- missing source code
go

create view sys.dm_fts_population_ranges as
	-- missing source code
go

create view sys.dm_fts_semantic_similarity_population as
	-- missing source code
go

create view sys.dm_geo_replication_link_status as
	-- missing source code
go

create view sys.dm_hpc_device_stats as
	-- missing source code
go

create view sys.dm_hpc_thread_proxy_stats as
	-- missing source code
go

create view sys.dm_io_pending_io_requests as
	-- missing source code
go

create view sys.dm_operation_status as
	-- missing source code
go

create view sys.dm_os_buffer_descriptors as
	-- missing source code
go

create view sys.dm_os_dispatcher_pools as
	-- missing source code
go

create view sys.dm_os_dispatchers as
	-- missing source code
go

create view sys.dm_os_hosts as
	-- missing source code
go

create view sys.dm_os_job_object as
	-- missing source code
go

create view sys.dm_os_latch_stats as
	-- missing source code
go

create view sys.dm_os_memory_allocations as
	-- missing source code
go

create view sys.dm_os_memory_broker_clerks as
	-- missing source code
go

create view sys.dm_os_memory_brokers as
	-- missing source code
go

create view sys.dm_os_memory_cache_clock_hands as
	-- missing source code
go

create view sys.dm_os_memory_cache_counters as
	-- missing source code
go

create view sys.dm_os_memory_cache_entries as
	-- missing source code
go

create view sys.dm_os_memory_cache_hash_tables as
	-- missing source code
go

create view sys.dm_os_memory_clerks as
	-- missing source code
go

create view sys.dm_os_memory_node_access_stats as
	-- missing source code
go

create view sys.dm_os_memory_nodes as
	-- missing source code
go

create view sys.dm_os_memory_objects as
	-- missing source code
go

create view sys.dm_os_memory_pools as
	-- missing source code
go

create view sys.dm_os_nodes as
	-- missing source code
go

create view sys.dm_os_performance_counters as
	-- missing source code
go

create view sys.dm_os_ring_buffers as
	-- missing source code
go

create view sys.dm_os_schedulers as
	-- missing source code
go

create view sys.dm_os_spinlock_stats as
	-- missing source code
go

create view sys.dm_os_stacks as
	-- missing source code
go

create view sys.dm_os_sublatches as
	-- missing source code
go

create view sys.dm_os_tasks as
	-- missing source code
go

create view sys.dm_os_threads as
	-- missing source code
go

create view sys.dm_os_wait_stats as
	-- missing source code
go

create view sys.dm_os_waiting_tasks as
	-- missing source code
go

create view sys.dm_os_worker_local_storage as
	-- missing source code
go

create view sys.dm_os_workers as
	-- missing source code
go

create view sys.dm_qn_subscriptions as
	-- missing source code
go

create view sys.dm_resource_governor_resource_pools as
	-- missing source code
go

create view sys.dm_resource_governor_resource_pools_history_ex as
	-- missing source code
go

create view sys.dm_resource_governor_workload_groups as
	-- missing source code
go

create view sys.dm_resource_governor_workload_groups_history_ex as
	-- missing source code
go

create view sys.dm_tran_aborted_transactions as
	-- missing source code
go

create view sys.dm_tran_active_snapshot_database_transactions as
	-- missing source code
go

create view sys.dm_tran_active_transactions as
	-- missing source code
go

create view sys.dm_tran_commit_table as
	-- missing source code
go

create view sys.dm_tran_current_snapshot as
	-- missing source code
go

create view sys.dm_tran_current_transaction as
	-- missing source code
go

create view sys.dm_tran_database_transactions as
	-- missing source code
go

create view sys.dm_tran_global_recovery_transactions as
	-- missing source code
go

create view sys.dm_tran_global_transactions as
	-- missing source code
go

create view sys.dm_tran_global_transactions_enlistments as
	-- missing source code
go

create view sys.dm_tran_global_transactions_log as
	-- missing source code
go

create view sys.dm_tran_locks as
	-- missing source code
go

create view sys.dm_tran_persistent_version_store_stats as
	-- missing source code
go

create view sys.dm_tran_session_transactions as
	-- missing source code
go

create view sys.dm_tran_top_version_generators as
	-- missing source code
go

create view sys.dm_tran_transactions_snapshot as
	-- missing source code
go

create view sys.dm_tran_version_store as
	-- missing source code
go

create view sys.dm_tran_version_store_space_usage as
	-- missing source code
go

create view sys.dm_user_db_resource_governance as
	-- missing source code
go

create view sys.dm_xe_database_session_event_actions as
	-- missing source code
go

create view sys.dm_xe_database_session_events as
	-- missing source code
go

create view sys.dm_xe_database_session_object_columns as
	-- missing source code
go

create view sys.dm_xe_database_session_targets as
	-- missing source code
go

create view sys.dm_xe_database_sessions as
	-- missing source code
go

create view sys.dm_xe_map_values as
	-- missing source code
go

create view sys.dm_xe_object_columns as
	-- missing source code
go

create view sys.dm_xe_objects as
	-- missing source code
go

create view sys.dm_xe_packages as
	-- missing source code
go

create view sys.dm_xtp_gc_queue_stats as
	-- missing source code
go

create view sys.dm_xtp_gc_stats as
	-- missing source code
go

create view sys.dm_xtp_system_memory_consumers as
	-- missing source code
go

create view sys.dm_xtp_threads as
	-- missing source code
go

create view sys.dm_xtp_transaction_recent_rows as
	-- missing source code
go

create view sys.dm_xtp_transaction_stats as
	-- missing source code
go

create view sys.edge_constraint_clauses as
	-- missing source code
go

grant select on sys.edge_constraint_clauses to [public]
go

create view sys.edge_constraints as
	-- missing source code
go

grant select on sys.edge_constraints to [public]
go

create view sys.elastic_pool_resource_stats_ex as
	-- missing source code
go

create view sys.event_log_ex as
	-- missing source code
go

create view sys.event_notification_event_types as
	-- missing source code
go

create view sys.event_notifications as
	-- missing source code
go

grant select on sys.event_notifications to [public]
go

create view sys.events as
	-- missing source code
go

grant select on sys.events to [public]
go

create view sys.extended_procedures as
	-- missing source code
go

grant select on sys.extended_procedures to [public]
go

create view sys.extended_properties as
	-- missing source code
go

grant select on sys.extended_properties to [public]
go

create view sys.external_data_sources as
	-- missing source code
go

grant select on sys.external_data_sources to [public]
go

create view sys.external_file_formats as
	-- missing source code
go

grant select on sys.external_file_formats to [public]
go

create view sys.external_libraries as
	-- missing source code
go

grant select on sys.external_libraries to [public]
go

create view sys.external_library_files as
	-- missing source code
go

grant select on sys.external_library_files to [public]
go

create view sys.external_library_setup_errors as
	-- missing source code
go

grant select on sys.external_library_setup_errors to [public]
go

create view sys.external_tables as
	-- missing source code
go

grant select on sys.external_tables to [public]
go

create view sys.federated_table_columns as
	-- missing source code
go

grant select on sys.federated_table_columns to [public]
go

create view sys.federation_distributions as
	-- missing source code
go

grant select on sys.federation_distributions to [public]
go

create view sys.federation_member_distributions as
	-- missing source code
go

grant select on sys.federation_member_distributions to [public]
go

create view sys.federation_members as
	-- missing source code
go

grant select on sys.federation_members to [public]
go

create view sys.federations as
	-- missing source code
go

grant select on sys.federations to [public]
go

create view sys.filegroups as
	-- missing source code
go

grant select on sys.filegroups to [public]
go

create view sys.filetable_system_defined_objects as
	-- missing source code
go

grant select on sys.filetable_system_defined_objects to [public]
go

create view sys.filetables as
	-- missing source code
go

grant select on sys.filetables to [public]
go

create view sys.foreign_key_columns as
	-- missing source code
go

grant select on sys.foreign_key_columns to [public]
go

create view sys.foreign_keys as
	-- missing source code
go

grant select on sys.foreign_keys to [public]
go

create view sys.fulltext_catalogs as
	-- missing source code
go

grant select on sys.fulltext_catalogs to [public]
go

create view sys.fulltext_document_types as
	-- missing source code
go

create view sys.fulltext_index_catalog_usages as
	-- missing source code
go

grant select on sys.fulltext_index_catalog_usages to [public]
go

create view sys.fulltext_index_columns as
	-- missing source code
go

grant select on sys.fulltext_index_columns to [public]
go

create view sys.fulltext_index_fragments as
	-- missing source code
go

grant select on sys.fulltext_index_fragments to [public]
go

create view sys.fulltext_indexes as
	-- missing source code
go

grant select on sys.fulltext_indexes to [public]
go

create view sys.fulltext_languages as
	-- missing source code
go

create view sys.fulltext_semantic_language_statistics_database as
	-- missing source code
go

create view sys.fulltext_semantic_languages as
	-- missing source code
go

create view sys.fulltext_stoplists as
	-- missing source code
go

grant select on sys.fulltext_stoplists to [public]
go

create view sys.fulltext_stopwords as
	-- missing source code
go

grant select on sys.fulltext_stopwords to [public]
go

create view sys.fulltext_system_stopwords as
	-- missing source code
go

create view sys.function_order_columns as
	-- missing source code
go

grant select on sys.function_order_columns to [public]
go

create view sys.hash_indexes as
	-- missing source code
go

grant select on sys.hash_indexes to [public]
go

create view sys.identity_columns as
	-- missing source code
go

grant select on sys.identity_columns to [public]
go

create view sys.index_columns as
	-- missing source code
go

grant select on sys.index_columns to [public]
go

create view sys.index_resumable_operations as
	-- missing source code
go

grant select on sys.index_resumable_operations to [public]
go

create view sys.indexes as
	-- missing source code
go

grant select on sys.indexes to [public]
go

create view sys.internal_partitions as
	-- missing source code
go

grant select on sys.internal_partitions to [public]
go

create view sys.internal_tables as
	-- missing source code
go

grant select on sys.internal_tables to [public]
go

create view sys.key_constraints as
	-- missing source code
go

grant select on sys.key_constraints to [public]
go

create view sys.key_encryptions as
	-- missing source code
go

grant select on sys.key_encryptions to [public]
go

create view sys.masked_columns as
	-- missing source code
go

grant select on sys.masked_columns to [public]
go

create view sys.memory_optimized_tables_internal_attributes as
	-- missing source code
go

grant select on sys.memory_optimized_tables_internal_attributes to [public]
go

create view sys.message_type_xml_schema_collection_usages as
	-- missing source code
go

grant select on sys.message_type_xml_schema_collection_usages to [public]
go

create view sys.messages as
	-- missing source code
go

create view sys.module_assembly_usages as
	-- missing source code
go

grant select on sys.module_assembly_usages to [public]
go

create view sys.numbered_procedure_parameters as
	-- missing source code
go

grant select on sys.numbered_procedure_parameters to [public]
go

create view sys.numbered_procedures as
	-- missing source code
go

grant select on sys.numbered_procedures to [public]
go

create view sys.objects as
	-- missing source code
go

grant select on sys.objects to [public]
go

create view sys.openkeys as
	-- missing source code
go

create view sys.parameter_type_usages as
	-- missing source code
go

grant select on sys.parameter_type_usages to [public]
go

create view sys.parameter_xml_schema_collection_usages as
	-- missing source code
go

grant select on sys.parameter_xml_schema_collection_usages to [public]
go

create view sys.parameters as
	-- missing source code
go

grant select on sys.parameters to [public]
go

create view sys.partition_functions as
	-- missing source code
go

grant select on sys.partition_functions to [public]
go

create view sys.partition_parameters as
	-- missing source code
go

grant select on sys.partition_parameters to [public]
go

create view sys.partition_range_values as
	-- missing source code
go

grant select on sys.partition_range_values to [public]
go

create view sys.partition_schemes as
	-- missing source code
go

grant select on sys.partition_schemes to [public]
go

create view sys.partitions as
	-- missing source code
go

grant select on sys.partitions to [public]
go

create view sys.periods as
	-- missing source code
go

grant select on sys.periods to [public]
go

create view sys.plan_guides as
	-- missing source code
go

grant select on sys.plan_guides to [public]
go

create view sys.procedures as
	-- missing source code
go

grant select on sys.procedures to [public]
go

create view sys.query_context_settings as
	-- missing source code
go

grant select on sys.query_context_settings to [public]
go

create view sys.query_store_plan as
	-- missing source code
go

grant select on sys.query_store_plan to [public]
go

create view sys.query_store_query as
	-- missing source code
go

grant select on sys.query_store_query to [public]
go

create view sys.query_store_query_text as
	-- missing source code
go

grant select on sys.query_store_query_text to [public]
go

create view sys.query_store_runtime_stats as
	-- missing source code
go

grant select on sys.query_store_runtime_stats to [public]
go

create view sys.query_store_runtime_stats_interval as
	-- missing source code
go

grant select on sys.query_store_runtime_stats_interval to [public]
go

create view sys.query_store_wait_stats as
	-- missing source code
go

grant select on sys.query_store_wait_stats to [public]
go

create view sys.registered_search_properties as
	-- missing source code
go

grant select on sys.registered_search_properties to [public]
go

create view sys.registered_search_property_lists as
	-- missing source code
go

grant select on sys.registered_search_property_lists to [public]
go

create view sys.remote_data_archive_databases as
	-- missing source code
go

grant select on sys.remote_data_archive_databases to [public]
go

create view sys.remote_data_archive_tables as
	-- missing source code
go

grant select on sys.remote_data_archive_tables to [public]
go

create view sys.remote_logins as
	-- missing source code
go

create view sys.remote_service_bindings as
	-- missing source code
go

grant select on sys.remote_service_bindings to [public]
go

create view sys.resource_governor_configuration as
	-- missing source code
go

create view sys.resource_governor_external_resource_pool_affinity as
	-- missing source code
go

create view sys.resource_governor_external_resource_pools as
	-- missing source code
go

create view sys.resource_governor_resource_pool_affinity as
	-- missing source code
go

create view sys.resource_governor_resource_pools as
	-- missing source code
go

create view sys.resource_governor_workload_groups as
	-- missing source code
go

create view sys.resource_stats_raw as
	-- missing source code
go

create view sys.resource_usage as
	-- missing source code
go

create view sys.routes as
	-- missing source code
go

grant select on sys.routes to [public]
go

create view sys.schemas as
	-- missing source code
go

grant select on sys.schemas to [public]
go

create view sys.securable_classes as
	-- missing source code
go

create view sys.security_policies as
	-- missing source code
go

grant select on sys.security_policies to [public]
go

create view sys.security_predicates as
	-- missing source code
go

grant select on sys.security_predicates to [public]
go

create view sys.selective_xml_index_namespaces as
	-- missing source code
go

grant select on sys.selective_xml_index_namespaces to [public]
go

create view sys.selective_xml_index_paths as
	-- missing source code
go

grant select on sys.selective_xml_index_paths to [public]
go

create view sys.sensitivity_classifications as
	-- missing source code
go

grant select on sys.sensitivity_classifications to [public]
go

create view sys.sequences as
	-- missing source code
go

grant select on sys.sequences to [public]
go

create view sys.server_memory_optimized_hybrid_buffer_pool_configuration as
	-- missing source code
go

create view sys.service_contract_message_usages as
	-- missing source code
go

grant select on sys.service_contract_message_usages to [public]
go

create view sys.service_contract_usages as
	-- missing source code
go

grant select on sys.service_contract_usages to [public]
go

create view sys.service_contracts as
	-- missing source code
go

grant select on sys.service_contracts to [public]
go

create view sys.service_message_types as
	-- missing source code
go

grant select on sys.service_message_types to [public]
go

create view sys.service_queue_usages as
	-- missing source code
go

grant select on sys.service_queue_usages to [public]
go

create view sys.service_queues as
	-- missing source code
go

grant select on sys.service_queues to [public]
go

create view sys.services as
	-- missing source code
go

grant select on sys.services to [public]
go

create view sys.spatial_index_tessellations as
	-- missing source code
go

grant select on sys.spatial_index_tessellations to [public]
go

create view sys.spatial_indexes as
	-- missing source code
go

grant select on sys.spatial_indexes to [public]
go

create view sys.spatial_reference_systems as
	-- missing source code
go

create view sys.sql_dependencies as
	-- missing source code
go

grant select on sys.sql_dependencies to [public]
go

create view sys.sql_expression_dependencies as
	-- missing source code
go

create view sys.sql_modules as
	-- missing source code
go

grant select on sys.sql_modules to [public]
go

create view sys.stats as
	-- missing source code
go

grant select on sys.stats to [public]
go

create view sys.stats_columns as
	-- missing source code
go

grant select on sys.stats_columns to [public]
go

create view sys.symmetric_keys as
	-- missing source code
go

grant select on sys.symmetric_keys to [public]
go

create view sys.synonyms as
	-- missing source code
go

grant select on sys.synonyms to [public]
go

create view sys.syscacheobjects as
	-- missing source code
go

create view sys.syscharsets as
	-- missing source code
go

create view sys.syscolumns as
	-- missing source code
go

grant select on sys.syscolumns to [public]
go

create view sys.syscomments as
	-- missing source code
go

grant select on sys.syscomments to [public]
go

create view sys.sysconfigures as
	-- missing source code
go

create view sys.sysconstraints as
	-- missing source code
go

grant select on sys.sysconstraints to [public]
go

create view sys.syscscontainers as
	-- missing source code
go

create view sys.syscurconfigs as
	-- missing source code
go

create view sys.syscursorcolumns as
	-- missing source code
go

create view sys.syscursorrefs as
	-- missing source code
go

create view sys.syscursors as
	-- missing source code
go

create view sys.syscursortables as
	-- missing source code
go

create view sys.sysdatabases as
	-- missing source code
go

create view sys.sysdepends as
	-- missing source code
go

grant select on sys.sysdepends to [public]
go

create view sys.sysdevices as
	-- missing source code
go

create view sys.sysfilegroups as
	-- missing source code
go

grant select on sys.sysfilegroups to [public]
go

create view sys.sysfiles as
	-- missing source code
go

grant select on sys.sysfiles to [public]
go

create view sys.sysforeignkeys as
	-- missing source code
go

grant select on sys.sysforeignkeys to [public]
go

create view sys.sysfulltextcatalogs as
	-- missing source code
go

grant select on sys.sysfulltextcatalogs to [public]
go

create view sys.sysindexes as
	-- missing source code
go

grant select on sys.sysindexes to [public]
go

create view sys.sysindexkeys as
	-- missing source code
go

grant select on sys.sysindexkeys to [public]
go

create view sys.syslanguages as
	-- missing source code
go

create view sys.syslockinfo as
	-- missing source code
go

create view sys.sysmembers as
	-- missing source code
go

grant select on sys.sysmembers to [public]
go

create view sys.sysmessages as
	-- missing source code
go

create view sys.sysobjects as
	-- missing source code
go

grant select on sys.sysobjects to [public]
go

create view sys.sysoledbusers as
	-- missing source code
go

create view sys.sysopentapes as
	-- missing source code
go

create view sys.sysperfinfo as
	-- missing source code
go

create view sys.syspermissions as
	-- missing source code
go

grant select on sys.syspermissions to [public]
go

create view sys.sysprocesses as
	-- missing source code
go

create view sys.sysprotects as
	-- missing source code
go

grant select on sys.sysprotects to [public]
go

create view sys.sysreferences as
	-- missing source code
go

grant select on sys.sysreferences to [public]
go

create view sys.sysservers as
	-- missing source code
go

create view sys.system_columns as
	-- missing source code
go

grant select on sys.system_columns to [public]
go

create view sys.system_objects as
	-- missing source code
go

grant select on sys.system_objects to [public]
go

create view sys.system_parameters as
	-- missing source code
go

grant select on sys.system_parameters to [public]
go

create view sys.system_sql_modules as
	-- missing source code
go

grant select on sys.system_sql_modules to [public]
go

create view sys.system_views as
	-- missing source code
go

grant select on sys.system_views to [public]
go

create view sys.systypes as
	-- missing source code
go

grant select on sys.systypes to [public]
go

create view sys.sysusers as
	-- missing source code
go

grant select on sys.sysusers to [public]
go

create view sys.table_types as
	-- missing source code
go

grant select on sys.table_types to [public]
go

create view sys.tables as
	-- missing source code
go

grant select on sys.tables to [public]
go

create view sys.time_zone_info as
	-- missing source code
go

grant select on sys.time_zone_info to [public]
go

create view sys.transmission_queue as
	-- missing source code
go

grant select on sys.transmission_queue to [public]
go

create view sys.trigger_event_types as
	-- missing source code
go

create view sys.trigger_events as
	-- missing source code
go

grant select on sys.trigger_events to [public]
go

create view sys.triggers as
	-- missing source code
go

grant select on sys.triggers to [public]
go

create view sys.trusted_assemblies as
	-- missing source code
go

create view sys.type_assembly_usages as
	-- missing source code
go

grant select on sys.type_assembly_usages to [public]
go

create view sys.types as
	-- missing source code
go

grant select on sys.types to [public]
go

create view sys.user_token as
	-- missing source code
go

create view sys.views as
	-- missing source code
go

grant select on sys.views to [public]
go

create view sys.xml_indexes as
	-- missing source code
go

grant select on sys.xml_indexes to [public]
go

create view sys.xml_schema_attributes as
	-- missing source code
go

grant select on sys.xml_schema_attributes to [public]
go

create view sys.xml_schema_collections as
	-- missing source code
go

grant select on sys.xml_schema_collections to [public]
go

create view sys.xml_schema_component_placements as
	-- missing source code
go

grant select on sys.xml_schema_component_placements to [public]
go

create view sys.xml_schema_components as
	-- missing source code
go

grant select on sys.xml_schema_components to [public]
go

create view sys.xml_schema_elements as
	-- missing source code
go

grant select on sys.xml_schema_elements to [public]
go

create view sys.xml_schema_facets as
	-- missing source code
go

grant select on sys.xml_schema_facets to [public]
go

create view sys.xml_schema_model_groups as
	-- missing source code
go

grant select on sys.xml_schema_model_groups to [public]
go

create view sys.xml_schema_namespaces as
	-- missing source code
go

grant select on sys.xml_schema_namespaces to [public]
go

create view sys.xml_schema_types as
	-- missing source code
go

grant select on sys.xml_schema_types to [public]
go

create view sys.xml_schema_wildcard_namespaces as
	-- missing source code
go

grant select on sys.xml_schema_wildcard_namespaces to [public]
go

create view sys.xml_schema_wildcards as
	-- missing source code
go

grant select on sys.xml_schema_wildcards to [public]
go

CREATE   PROCEDURE [dbo].[AccountTree_Insert_Bulk]
	@AccountTreeTableType AccountTreeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @AccountTreeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @AccountTree table
(
	[AccountTreeID] [bigint] NOT NULL,
    [ParentAccountID] BIGINT          NULL,
    [AccountID]         BIGINT          NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[AccountTree]
(
	[AccountID],
	[ParentAccountID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[AccountTreeID],
	 INSERTED.[AccountID],
	 INSERTED.[ParentAccountID]
INTO @AccountTree
(
	[AccountTreeID],
	[AccountID],
	[ParentAccountID]
)
SELECT T.[AccountID],
	A.[AccountID],
	1,
	1
FROM @AccountTreeTableType T
LEFT JOIN dbo.[Account] A ON T.[ParentAccountNumber] = A.[AccountNumber]


SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[AccountTree_History]
(
	[AccountTreeID],
	[AccountVersionID],
	[ParentAccountVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [AccountTreeID],
	 AH.[AccountVersionID],
	 PH.[AccountVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @AccountTree T
INNER JOIN dbo.Account_History AH ON T.AccountID = AH.AccountID AND AH.IsLatestVersion = 1
LEFT JOIN dbo.Account_History PH ON T.ParentAccountID = PH.AccountID AND AH.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Account_Insert_Bulk]
	@AccountTableType AccountTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @AccountTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Account table
(
	[AccountID] [bigint] NOT NULL,
	[AccountNumber]        NVARCHAR (50) NOT NULL,
	[AccountName]			NVARCHAR (100) NOT NULL,
	[AddressLine1]			NVARCHAR (100) NOT NULL,
    [AddressLine2]			NVARCHAR (100) NULL,
	[CityID]               BIGINT        NOT NULL,
    [PostalCode]           NVARCHAR (10)  NOT NULL,
	[Phone]                NVARCHAR (100) NULL,
    [ContactName]          NVARCHAR (100) NULL,
    [ContactTitle]         NVARCHAR (100) NULL,
    [Email]                NVARCHAR (100) NULL,
    [Website]              NVARCHAR (100) NULL
)

BEGIN TRAN

DECLARE @CityVersionID table
(
	[CityID] [bigint] NOT NULL,
	[CityVersionID] [bigint] NOT NULL
)

INSERT INTO @CityVersionID
(
	[CityID],
	[CityVersionID]
)
SELECT [CityID],
	[CityVersionID]
FROM [dbo].[City_History]
WHERE [IsLatestVersion] = 1
AND [CityID] IN (SELECT DISTINCT [CityID] FROM @AccountTableType)


INSERT INTO [dbo].[Account]
(
    [AccountNumber],
	[CityID],
	[AccountOwnerID],
    [AccountName],
    [AccountAlias],
    [AddressLine1],
    [AddressLine2],
    [PostalCode],
    [ContactName],
    [ContactTitle],
    [Phone],
    [Email],
    [Website],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[AccountID],
	INSERTED.[AccountNumber],
	INSERTED.[AccountName],
	INSERTED.[AddressLine1],
    INSERTED.[AddressLine2],
	INSERTED.[CityID],
    INSERTED.[PostalCode],
	INSERTED.[Phone],
    INSERTED.[ContactName],
    INSERTED.[ContactTitle],
    INSERTED.[Email],
    INSERTED.[Website]
INTO @Account
(
	[AccountID],
	[AccountNumber],
	[AccountName],
	[AddressLine1],
    [AddressLine2],
	[CityID],
    [PostalCode],
	[Phone],
    [ContactName],
    [ContactTitle],
    [Email],
    [Website]
)
SELECT [AccountNumber],
	[CityID],
	NULL,
    [AccountName],
    NULL,
    [AddressLine1],
    [AddressLine2],
    [PostalCode],
    [ContactName],
    [ContactTitle],
    LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([Phone], 'EXT', 'x'), ' ', ''),'(',''),')',''),'-',''),'xtn','x'),'exr','x'), 'xt','x'),'ex','x'),':',''),',','x'),'#','x'),'cell','|'),'poste','x'),'local','x'),'or','|'),'.',''),';','|'),'p','|'),'*','|'),'&',''),'/','|'))),
    [Email],
    [Website],
	1,
	1
FROM @AccountTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Account_History]
(
	[AccountID],
	[AccountNumber],
	[CityVersionID],
	[AccountOwnerVersionID],
    [AccountName],
    [AccountAlias],
    [AddressLine1],
    [AddressLine2],
    [PostalCode],
    [ContactName],
    [ContactTitle],
    [Phone],
    [Email],
    [Website],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT A.[AccountID],
	A.[AccountNumber],
	CVID.[CityVersionID],
	NULL,
    A.[AccountName],
    NULL,
    A.[AddressLine1],
    A.[AddressLine2],
    A.[PostalCode],
    A.[ContactName],
    A.[ContactTitle],
    A.[Phone],
    A.[Email],
    A.[Website],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Account A
INNER JOIN @CityVersionID CVID ON A.[CityID] = CVID.[CityID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[BasingPoint_Insert_Bulk]
	@BasingPointTableType BasingPointTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @BasingPointTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @BasingPoint table
(
	[BasingPointID] [bigint] NOT NULL,
	[BasingPointName] [nvarchar](50) NOT NULL,
	[ProvinceID] [bigint] NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[BasingPoint]
(
	[BasingPointName],
	[ProvinceID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.BasingPointID,
	 INSERTED.BasingPointName,
	 INSERTED.ProvinceID
INTO @BasingPoint
(
	[BasingPointID],
	[BasingPointName],
	[ProvinceID]
)
SELECT [BasingPointName],
	P.[ProvinceID],
	1,
	1
FROM @BasingPointTableType BP
INNER JOIN dbo.Country C ON BP.CountryCode = C.CountryCode
INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
INNER JOIN dbo.Province P ON R.RegionID = P.RegionID AND P.ProvinceCode = BP.ProvinceCode

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[BasingPoint_History]
(
	[BasingPointID],
	[BasingPointName],
	[ProvinceVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [BasingPointID],
	 [BasingPointName],
	 [ProvinceVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @BasingPoint BP
INNER JOIN dbo.Province_History PH ON BP.ProvinceID = PH.ProvinceID AND PH.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION dbo.BrokerContractCostByPickupDeliveryCount_Modify
(
	@Cost NVARCHAR(MAX),
	@Added BrokerContractCostWeightBreakLevelTableType READONLY,
	@Updated BrokerContractCostWeightBreakLevelTableType READONLY,
	@Deleted BrokerContractCostWeightBreakLevelTableType READONLY
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewCost NVARCHAR(MAX);

	DECLARE @Temp1 TABLE
(
		[PickupDeliveryCount] INT NOT NULL,
		[WeightBreakLevelName] NVARCHAR(50) NOT NULL,
		[WeightBreakLowerBound] INT NOT NULL,
		[Cost] DECIMAL(19,6) NOT NULL
)

	DECLARE @Temp2 TABLE
(
		[PickupDeliveryCount] INT NOT NULL,
		[WeightBreakLevelName] NVARCHAR(50) NOT NULL,
		[WeightBreakLowerBound] INT NOT NULL,
		[Cost] DECIMAL(19,6) NOT NULL
)

	DECLARE @Final TABLE
(
		[PickupDeliveryCount] INT NOT NULL,
		[WeightBreakLevelName] NVARCHAR(50) NOT NULL,
		[WeightBreakLowerBound] INT NOT NULL,
		[Cost] DECIMAL(19,6) NOT NULL
)

	INSERT INTO @Temp1
		(
		PickupDeliveryCount,
		WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
		)

	SELECT PickupDeliveryCount,
		WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
	FROM OPENJSON(@Cost,'$')
WITH (
	PickupDeliveryCount INT '$.PickupDeliveryCount',
	CostByPickupDeliveryCount NVARCHAR(MAX) '$.Cost' AS JSON
)
CROSS APPLY OPENJSON(CostByPickupDeliveryCount,'$')
WITH (
	WeightBreakLevelName NVARCHAR(50) '$.WeightBreakLevelName',
	WeightBreakLowerBound INT '$.WeightBreakLowerBound',
	Cost DECIMAL(19,6) '$.Cost'
)

	INSERT INTO @Temp2
		(
		PickupDeliveryCount,
		WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
		)
			SELECT PickupDeliveryCount, WeightBreakLevelName, WeightBreakLowerBound, Cost
		FROM @Temp1
		WHERE (WeightBreakLowerBound NOT IN (SELECT WeightBreakLowerBound
			FROM @Deleted) AND WeightBreakLevelName NOT IN (SELECT WeightBreakLevelName
			FROM @Deleted))
	UNION
		SELECT DISTINCT T.PickupDeliveryCount, A.WeightBreakLevelName, A.WeightBreakLowerBound, 0
		FROM @Temp1 T, @Added A

	INSERT INTO @Final
		(
		PickupDeliveryCount,
		WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
		)
			SELECT A.PickupDeliveryCount, B.WeightBreakLevelName, A.WeightBreakLowerBound, A.Cost
		FROM @Temp2 A
			INNER JOIN @Updated B ON A.WeightBreakLowerBound = B.WeightBreakLowerBound
	UNION
		SELECT PickupDeliveryCount, WeightBreakLevelName, WeightBreakLowerBound, Cost
		FROM @Temp2
		WHERE (WeightBreakLowerBound NOT IN (SELECT WeightBreakLowerBound
			FROM @Updated) AND WeightBreakLevelName NOT IN (SELECT WeightBreakLevelName
			FROM @Updated))

	SELECT @NewCost = (SELECT *
		FROM
			(SELECT DISTINCT PickupDeliveryCount,
				(SELECT WeightBreakLevelName, WeightBreakLowerBound, Cost
				FROM @Final B
				WHERE A.PickupDeliveryCount = B.PickupDeliveryCount
				FOR JSON AUTO) AS Cost
			FROM @Final A) AS C
		FOR JSON AUTO)

	RETURN @NewCost

END
go


CREATE FUNCTION dbo.BrokerContractCostByWeightBreak_Modify
(
	@Cost NVARCHAR(MAX),
	@Added BrokerContractCostWeightBreakLevelTableType READONLY,
	@Updated BrokerContractCostWeightBreakLevelTableType READONLY,
	@Deleted BrokerContractCostWeightBreakLevelTableType READONLY
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewCost NVARCHAR(MAX);

	DECLARE @RateBase DECIMAL(19,6);
	DECLARE @RateMax DECIMAL(19,6);
	DECLARE @CostByWeightBreak NVARCHAR(MAX);

	DECLARE @Temp1 TABLE
(
		[WeightBreakLevelName] NVARCHAR(50) NOT NULL,
		[WeightBreakLowerBound] INT NOT NULL,
		[Cost] DECIMAL(19,6) NOT NULL
)

	DECLARE @Temp2 TABLE
(
		[WeightBreakLevelName] NVARCHAR(50) NOT NULL,
		[WeightBreakLowerBound] INT NOT NULL,
		[Cost] DECIMAL(19,6) NOT NULL
)

	DECLARE @Final TABLE
(
		[WeightBreakLevelName] NVARCHAR(50) NOT NULL,
		[WeightBreakLowerBound] INT NOT NULL,
		[Cost] DECIMAL(19,6) NOT NULL
)

	SELECT @RateBase = RateBase,
		@RateMax = RateMax,
		@CostByWeightBreak = CostByWeightBreak
	FROM OPENJSON(@Cost,'$')
WITH (
	RateBase DECIMAL(19,6) '$.RateBase',
	RateMax DECIMAL(19,6) '$.RateMax',
	CostByWeightBreak NVARCHAR(MAX) '$.Cost' AS JSON
)

	INSERT INTO @Temp1
		(
		WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
		)
	SELECT WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
	FROM OPENJSON(@CostByWeightBreak,'$')
WITH (
	WeightBreakLevelName NVARCHAR(50) '$.WeightBreakLevelName',
	WeightBreakLowerBound INT '$.WeightBreakLowerBound',
	Cost DECIMAL(19,6) '$.Cost'
)

	INSERT INTO @Temp2
		(
		WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
		)
			SELECT WeightBreakLevelName, WeightBreakLowerBound, Cost
		FROM @Temp1
		WHERE (WeightBreakLowerBound NOT IN (SELECT WeightBreakLowerBound
			FROM @Deleted) AND WeightBreakLevelName NOT IN (SELECT WeightBreakLevelName
			FROM @Deleted))
	UNION
		SELECT DISTINCT WeightBreakLevelName, WeightBreakLowerBound, 0
		FROM @Added

	INSERT INTO @Final
		(
		WeightBreakLevelName,
		WeightBreakLowerBound,
		Cost
		)
			SELECT B.WeightBreakLevelName, A.WeightBreakLowerBound, A.Cost
		FROM @Temp2 A
			INNER JOIN @Updated B ON A.WeightBreakLowerBound = B.WeightBreakLowerBound
	UNION
		SELECT WeightBreakLevelName, WeightBreakLowerBound, Cost
		FROM @Temp2
		WHERE (WeightBreakLowerBound NOT IN (SELECT WeightBreakLowerBound
			FROM @Updated) AND WeightBreakLevelName NOT IN (SELECT WeightBreakLevelName
			FROM @Updated))

	SELECT @NewCost = (SELECT WeightBreakLevelName, WeightBreakLowerBound, Cost
		FROM @Final B
		FOR JSON AUTO)

	RETURN '{"RateBase":' + CAST(@RateBase AS NVARCHAR(50)) + ', "RateMax":' + CAST(@RateMax AS NVARCHAR(50)) + ', "Cost":' + @NewCost + '}'

END
go

CREATE   PROCEDURE [dbo].[BrokerContractCost_Create]
	@added BrokerContractCostWeightBreakLevelTableType READONLY,
	@TerminalID BIGINT,
	@ServiceLevelID BIGINT
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @updated BrokerContractCostWeightBreakLevelTableType;
DECLARE @deleted BrokerContractCostWeightBreakLevelTableType;

EXEC dbo.[BrokerContractCost_Update_Base] @added, @updated, @deleted, @TerminalID, @ServiceLevelID

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[BrokerContractCost_Delete]
	@deleted BrokerContractCostWeightBreakLevelTableType READONLY,
	@TerminalID BIGINT,
	@ServiceLevelID BIGINT
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @added BrokerContractCostWeightBreakLevelTableType;
DECLARE @updated BrokerContractCostWeightBreakLevelTableType;

EXEC dbo.[BrokerContractCost_Update_Base] @added, @updated, @deleted, @TerminalID, @ServiceLevelID

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[BrokerContractCost_Insert_Bulk]
	@BrokerContractCostTableType BrokerContractCostTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @BrokerContractCostTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @BrokerContractCost table
(
	[BrokerContractCostID] [bigint] NOT NULL,
	[TerminalID] [bigint] NOT NULL,
	[ServiceLevelID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

BEGIN TRAN

DECLARE @BrokerContractCostWithTerminalIDServiceLevelID table
(
	[TerminalID] [bigint] NOT NULL,
	[ServiceLevelID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @TerminalVersionID table
(
	[TerminalID] [bigint] NOT NULL,
	[TerminalVersionID] [bigint] NOT NULL
)

DECLARE @ServiceLevelVersionID table
(
	[ServiceLevelID] [bigint] NOT NULL,
	[ServiceLevelVersionID] [bigint] NOT NULL
)

INSERT INTO @BrokerContractCostWithTerminalIDServiceLevelID
(
	[TerminalID],
	[ServiceLevelID],
	[Cost]
)
SELECT T.[TerminalID],
	SL.[ServiceLevelID],
	dbo.FormatJsonField(BCTT.[Cost])
FROM @BrokerContractCostTableType BCTT
INNER JOIN [dbo].[Terminal] T ON BCTT.[TerminalCode] = T.[TerminalCode]
INNER JOIN [dbo].[ServiceOffering] SO ON BCTT.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID] AND SL.[ServiceLevelCode] = BCTT.[ServiceLevelCode]

INSERT INTO @TerminalVersionID
(
	[TerminalID],
	[TerminalVersionID]
)
SELECT [TerminalID],
	[TerminalVersionID]
FROM [dbo].[Terminal_History]
WHERE [IsLatestVersion] = 1
AND [TerminalID] IN (SELECT DISTINCT [TerminalID] FROM @BrokerContractCostWithTerminalIDServiceLevelID)

INSERT INTO @ServiceLevelVersionID
(
	[ServiceLevelID],
	[ServiceLevelVersionID]
)
SELECT [ServiceLevelID],
	[ServiceLevelVersionID]
FROM [dbo].[ServiceLevel_History]
WHERE [IsLatestVersion] = 1
AND [ServiceLevelID] IN (SELECT DISTINCT [ServiceLevelID] FROM @BrokerContractCostWithTerminalIDServiceLevelID)

INSERT INTO [dbo].[BrokerContractCost]
(
	[TerminalID],
	[ServiceLevelID],
	[Cost],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.BrokerContractCostID,
	 INSERTED.TerminalID,
	 INSERTED.ServiceLevelID,
	 INSERTED.Cost
INTO @BrokerContractCost
(
	[BrokerContractCostID],
	[TerminalID],
	[ServiceLevelID],
	[Cost]
)
SELECT [TerminalID],
	[ServiceLevelID],
	[Cost],
	1,
	1
FROM @BrokerContractCostWithTerminalIDServiceLevelID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[BrokerContractCost_History]
(
	[BrokerContractCostID],
	[TerminalVersionID],
	[ServiceLevelVersionID],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT BC.[BrokerContractCostID],
	 TVID.[TerminalVersionID],
	 SLVID.[ServiceLevelVersionID],
	 BC.[Cost],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @BrokerContractCost BC
INNER JOIN @TerminalVersionID TVID ON BC.[TerminalID] = TVID.[TerminalID]
INNER JOIN @ServiceLevelVersionID SLVID ON BC.[ServiceLevelID] = SLVID.[ServiceLevelID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION dbo.BrokerContractCost_Modify
(
	@Cost NVARCHAR(MAX),
	@Added BrokerContractCostWeightBreakLevelTableType READONLY,
	@Updated BrokerContractCostWeightBreakLevelTableType READONLY,
	@Deleted BrokerContractCostWeightBreakLevelTableType READONLY
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewCost NVARCHAR(MAX);

	DECLARE @CostByWeightBreakByPickupDeliveryCount NVARCHAR(MAX);
	DECLARE @CostByWeightBreak NVARCHAR(MAX);

	Select @CostByWeightBreakByPickupDeliveryCount = [value]
	FROM OPENJSON(@Cost, '$.CostComponents')
	WHERE [key] = 'CostByWeightBreakByPickupDeliveryCount'

	Select @CostByWeightBreak = [value]
	FROM OPENJSON(@Cost, '$.CostComponents')
	WHERE [key] = 'CostByWeightBreak'

	IF @CostByWeightBreakByPickupDeliveryCount IS NOT NULL AND LEN(REPLACE(@CostByWeightBreakByPickupDeliveryCount, '{}','')) > 0
BEGIN
		SELECT @NewCost = '{"CostComponents":{"CostByWeightBreakByPickupDeliveryCount":' + dbo.BrokerContractCostByPickupDeliveryCount_Modify(@CostByWeightBreakByPickupDeliveryCount, @Added, @Updated, @Deleted) + ',"CostByWeightBreak":""}}'
	END

	IF @CostByWeightBreak IS NOT NULL AND LEN(REPLACE(@CostByWeightBreak, '{}','')) > 0
BEGIN
		SELECT @NewCost = '{"CostComponents":{"CostByWeightBreakByPickupDeliveryCount":"","CostByWeightBreak":' + dbo.BrokerContractCostByWeightBreak_Modify(@CostByWeightBreak, @Added, @Updated, @Deleted) + '}}'
	END

	RETURN @NewCost;

END
go

CREATE   PROCEDURE [dbo].[BrokerContractCost_Update]
	@updated BrokerContractCostWeightBreakLevelTableType READONLY,
	@TerminalID BIGINT,
	@ServiceLevelID BIGINT
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @added BrokerContractCostWeightBreakLevelTableType;
DECLARE @deleted BrokerContractCostWeightBreakLevelTableType;

EXEC dbo.[BrokerContractCost_Update_Base] @added, @updated, @deleted, @TerminalID, @ServiceLevelID

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[BrokerContractCost_Update_Base]
	@Added BrokerContractCostWeightBreakLevelTableType READONLY,
	@Updated BrokerContractCostWeightBreakLevelTableType READONLY,
	@Deleted BrokerContractCostWeightBreakLevelTableType READONLY,
	@TerminalID BIGINT,
	@ServiceLevelID BIGINT
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ROWCOUNT1 INT,@InputCount INT;

BEGIN TRAN

DECLARE @Cost NVARCHAR(MAX);

DECLARE @BrokerContractCost table
(
	[BrokerContractCostVersionID] [bigint] NOT NULL,
	[BrokerContractCostID] [bigint] NOT NULL,
	[TerminalVersionID] [bigint] NOT NULL,
	[ServiceLevelVersionID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[VersionNum] [int] NOT NULL
)

INSERT INTO @BrokerContractCost
(
	[BrokerContractCostVersionID],
	[BrokerContractCostID],
	[TerminalVersionID],
	[ServiceLevelVersionID],
	[Cost],
	[IsActive],
	[IsInactiveViewable],
	[VersionNum]
)
SELECT BCH.[BrokerContractCostVersionID],
	BC.[BrokerContractCostID],
	BCH.[TerminalVersionID],
	BCH.[ServiceLevelVersionID],
	dbo.FormatJsonField(dbo.BrokerContractCost_Modify(BC.[Cost], @Added, @Updated, @Deleted)),
	BCH.[IsActive],
	BCH.[IsInactiveViewable],
	BCH.[VersionNum]
FROM [dbo].[BrokerContractCost_History] BCH
INNER JOIN [dbo].[BrokerContractCost] BC ON BCH.[BrokerContractCostID] = BC.[BrokerContractCostID] AND BCH.[IsLatestVersion] = 1
WHERE BC.TerminalID = @TerminalID AND BC.ServiceLevelID = @ServiceLevelID


UPDATE [dbo].[BrokerContractCost]
SET [Cost] = A.[Cost]
FROM @BrokerContractCost A
WHERE [dbo].[BrokerContractCost].[BrokerContractCostID] = A.[BrokerContractCostID]

UPDATE [dbo].[BrokerContractCost_History]
SET [IsLatestVersion] = 0
FROM @BrokerContractCost AS A
WHERE [dbo].[BrokerContractCost_History].[BrokerContractCostVersionID] = A.[BrokerContractCostVersionID]


INSERT INTO [dbo].[BrokerContractCost_History]
(
	[BrokerContractCostID],
	[TerminalVersionID],
	[ServiceLevelVersionID],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT BC.[BrokerContractCostID],
	 BC.[TerminalVersionID],
 	 BC.[ServiceLevelVersionID],
	 BC.[Cost],
	 BC.[IsActive],
	 BC.[VersionNum] + 1,
	 1,
	 BC.[IsInactiveViewable],
	 GETUTCDATE(),
	 'P&C System',
	 ''
FROM @BrokerContractCost BC

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

IF (@ERROR1 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> 1)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[City_Insert_Bulk]
	@CityTableType CityTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @CityTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @City table
(
	[CityID] [bigint] NOT NULL,
	[CityName] [nvarchar](50) NOT NULL,
	[ProvinceID] [bigint] NOT NULL
)

BEGIN TRAN

DECLARE @CityWithProvinceID table
(
	[CityName] [nvarchar](50) NOT NULL,
	[ProvinceID] [bigint] NOT NULL
)

DECLARE @ProvinceVersionID table
(
	[ProvinceID] [bigint] NOT NULL,
	[ProvinceVersionID] [bigint] NOT NULL
)

INSERT INTO @CityWithProvinceID
(
	[CityName],
	[ProvinceID]
)
SELECT CTT.[CityName],
	P.[ProvinceID]
FROM @CityTableType CTT
INNER JOIN [dbo].[Province] P ON CTT.[ProvinceCode] = P.[ProvinceCode]
INNER JOIN [dbo].[Region] R ON P.[RegionID] = R.[RegionID]
INNER JOIN [dbo].[Country] C ON R.[CountryID] = C.[CountryID] AND CTT.[CountryCode] = C.[CountryCode]

INSERT INTO @ProvinceVersionID
(
	[ProvinceID],
	[ProvinceVersionID]
)
SELECT [ProvinceID],
	[ProvinceVersionID]
FROM [dbo].[Province_History]
WHERE [IsLatestVersion] = 1
AND [ProvinceID] IN (SELECT DISTINCT [ProvinceID] FROM @CityWithProvinceID)


INSERT INTO [dbo].[City]
(
	[CityName],
	[ProvinceID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.CityID,
	 INSERTED.CityName,
	 INSERTED.ProvinceID
INTO @City
(
	[CityID],
	[CityName],
	[ProvinceID]
)
SELECT [CityName],
	[ProvinceID],
	1,
	1
FROM @CityWithProvinceID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[City_History]
(
	[CityID],
	[CityName],
	[ProvinceVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT C.[CityID],
	 C.[CityName],
	 PVID.[ProvinceVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @City C
INNER JOIN @ProvinceVersionID PVID ON C.[ProvinceID] = PVID.[ProvinceID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Country_Insert_Bulk]
	@CountryTableType CountryTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @CountryTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Country table
(
	[CountryID] [bigint] NOT NULL,
	[CountryName] [nvarchar](50) NOT NULL,
	[CountryCode] [nvarchar](2) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[Country]
(
	[CountryName],
	[CountryCode],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.CountryID,
	 INSERTED.CountryName,
	 INSERTED.CountryCode
INTO @Country
(
	[CountryID],
	[CountryName],
	[CountryCode]
)
SELECT [CountryName],
	[CountryCode],
	1,
	1
FROM @CountryTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Country_History]
(
	[CountryID],
	[CountryName],
	[CountryCode],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [CountryID],
	 [CountryName],
	 [CountryCode],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Country

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[CurrencyExchange_Insert_Bulk]
	@CurrencyExchangeTableType CurrencyExchangeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @CurrencyExchangeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @CurrencyExchange table
(
	[CurrencyExchangeID]       BIGINT          NOT NULL,
    [CADtoUSD]         NUMERIC (19, 6) NOT NULL,
    [USDtoCAD]         NUMERIC (19, 6) NOT NULL
)

INSERT INTO [dbo].[CurrencyExchange]
(
	[CADtoUSD],
    [USDtoCAD],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.CurrencyExchangeID,
	 INSERTED.[CADtoUSD],
	 INSERTED.[USDtoCAD]
INTO @CurrencyExchange
(
	[CurrencyExchangeID],
	[CADtoUSD],
	[USDtoCAD]
)
SELECT [CADtoUSD],
    [USDtoCAD],
	1,
	1
FROM @CurrencyExchangeTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[CurrencyExchange_History]
(
	[CurrencyExchangeID],
	[CADtoUSD],
	[USDtoCAD],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [CurrencyExchangeID],
	[CADtoUSD],
	[USDtoCAD],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @CurrencyExchange

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Currency_Insert_Bulk]
	@CurrencyTableType CurrencyTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @CurrencyTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Currency table
(
	[CurrencyID] [bigint] NOT NULL,
	[CurrencyName] [nvarchar](50) NOT NULL,
	[CurrencyCode] [nvarchar](3) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[Currency]
(
	[CurrencyName],
	[CurrencyCode],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.CurrencyID,
	 INSERTED.CurrencyName,
	 INSERTED.CurrencyCode
INTO @Currency
(
	[CurrencyID],
	[CurrencyName],
	[CurrencyCode]
)
SELECT [CurrencyName],
	[CurrencyCode],
	1,
	1
FROM @CurrencyTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Currency_History]
(
	[CurrencyID],
	[CurrencyName],
	[CurrencyCode],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [CurrencyID],
	 [CurrencyName],
	 [CurrencyCode],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Currency

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Customer_Create_Select]
	@ServiceLevelID BIGINT,
	@AccountID BIGINT = NULL,
	@OutputCustomerID BIGINT output
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @Customer table
(
	[CustomerID] BIGINT NOT NULL
)

DECLARE @CustomerID BIGINT;

DECLARE @IsValidData          BIT = 0,
    @CustomerName         NVARCHAR (100) = NULL,
    @CustomerAlias        NVARCHAR (100) = NULL,
    @CustomerAddressLine1 NVARCHAR (100) = NULL,
    @CustomerAddressLine2 NVARCHAR (100) = NULL,
    @PostalCode           NVARCHAR (10)  = NULL,
    @ContactName          NVARCHAR (100) = NULL,
    @ContactTitle         NVARCHAR (100) = NULL,
    @Phone                NVARCHAR (100) = NULL,
    @Email                NVARCHAR (100) = NULL,
    @Website              NVARCHAR (100) = NULL,
    @CityID               BIGINT        = NULL,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL;

IF @AccountID IS NOT NULL
	BEGIN
		SELECT @CustomerID = C.CustomerID
		FROM dbo.Customer C
		WHERE C.ServiceLevelID = @ServiceLevelID AND C.AccountID = @AccountID

		IF @CustomerID IS NULL
			BEGIN
				SELECT @CustomerName = A.AccountName, @CustomerAlias = A.AccountAlias, @CustomerAddressLine1 = A.AddressLine1,
				@CustomerAddressLine2 = A.AddressLine2, @PostalCode = A.PostalCode, @ContactName = A.ContactName,
				@ContactTitle = A.ContactTitle, @Phone = A.Phone, @Email = A.Email, @Website = A.Website, @CityID = A.CityID
				FROM dbo.Account A
				WHERE A.AccountID = @AccountID

				SELECT @IsValidData = 1;

				EXEC dbo.Customer_Insert @ServiceLevelID, @IsValidData, @CustomerName, @CustomerAlias, @CustomerAddressLine1, @CustomerAddressLine2,
				@PostalCode, @ContactName, @ContactTitle, @Phone, @Email, @Website, @AccountID, @CityID, @UpdatedBy, @Comments, @CustomerID output
			END
	END
ELSE
	BEGIN
		EXEC dbo.Customer_Insert @ServiceLevelID, @IsValidData, @CustomerName, @CustomerAlias, @CustomerAddressLine1, @CustomerAddressLine2,
		@PostalCode, @ContactName, @ContactTitle, @Phone, @Email, @Website, @AccountID, @CityID, @UpdatedBy, @Comments, @CustomerID output
	END

SET @OutputCustomerID = (SELECT @CustomerID);

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Customer_Insert]
	@ServiceLevelID       BIGINT,
	@IsValidData          BIT,
    @CustomerName         NVARCHAR (100) = NULL,
    @CustomerAlias        NVARCHAR (100) = NULL,
    @CustomerAddressLine1 NVARCHAR (100) = NULL,
    @CustomerAddressLine2 NVARCHAR (100) = NULL,
    @PostalCode           NVARCHAR (10)  = NULL,
    @ContactName          NVARCHAR (100) = NULL,
    @ContactTitle         NVARCHAR (100) = NULL,
    @Phone               NVARCHAR (100) = NULL,
    @Email                NVARCHAR (100) = NULL,
    @Website              NVARCHAR (100) = NULL,
    @AccountID            BIGINT        = NULL,
    @CityID               BIGINT        = NULL,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL,
	@CustomerID BIGINT output
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Customer table
(
    [CustomerID]           BIGINT        NOT NULL,
    [CustomerName]         NVARCHAR (100) NULL,
    [CustomerAlias]        NVARCHAR (100) NULL,
    [CustomerAddressLine1] NVARCHAR (100) NULL,
    [CustomerAddressLine2] NVARCHAR (100) NULL,
    [PostalCode]           NVARCHAR (10)  NULL,
    [ContactName]          NVARCHAR (100) NULL,
    [ContactTitle]         NVARCHAR (100) NULL,
    [Phone]                NVARCHAR (100) NULL,
    [Email]                NVARCHAR (100) NULL,
    [Website]              NVARCHAR (100) NULL,
    [IsValidData]          BIT           NOT NULL,
    [AccountID]            BIGINT        NULL,
    [CityID]               BIGINT        NULL,
    [ServiceLevelID]       BIGINT        NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[Customer]
(
	[CustomerName],
    [CustomerAlias],
    [CustomerAddressLine1],
    [CustomerAddressLine2],
    [PostalCode],
    [ContactName],
    [ContactTitle],
    [Phone],
    [Email],
    [Website],
    [IsValidData],
    [AccountID],
    [CityID],
    [ServiceLevelID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[CustomerID],
	INSERTED.[CustomerName],
    INSERTED.[CustomerAlias],
    INSERTED.[CustomerAddressLine1],
    INSERTED.[CustomerAddressLine2],
    INSERTED.[PostalCode],
    INSERTED.[ContactName],
    INSERTED.[ContactTitle],
    INSERTED.[Phone],
    INSERTED.[Email],
    INSERTED.[Website],
    INSERTED.[IsValidData],
    INSERTED.[AccountID],
    INSERTED.[CityID],
    INSERTED.[ServiceLevelID]
INTO @Customer
(
	[CustomerID],
	[CustomerName],
    [CustomerAlias],
    [CustomerAddressLine1],
    [CustomerAddressLine2],
    [PostalCode],
    [ContactName],
    [ContactTitle],
    [Phone],
    [Email],
    [Website],
    [IsValidData],
    [AccountID],
    [CityID],
    [ServiceLevelID]
)
VALUES
(
	@CustomerName,
    @CustomerAlias,
    @CustomerAddressLine1,
    @CustomerAddressLine2,
    @PostalCode,
    @ContactName,
    @ContactTitle,
    @Phone,
    @Email,
    @Website,
    @IsValidData,
    @AccountID,
    @CityID,
    @ServiceLevelID,
	1,
	1
)

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Customer_History]
(
	[CustomerID],
	[CustomerName],
    [CustomerAlias],
    [CustomerAddressLine1],
    [CustomerAddressLine2],
    [PostalCode],
    [ContactName],
    [ContactTitle],
    [Phone],
    [Email],
    [Website],
    [IsValidData],
    [AccountVersionID],
    [CityVersionID],
    [ServiceLevelVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT C.[CustomerID],
	C.[CustomerName],
    C.[CustomerAlias],
    C. [CustomerAddressLine1],
    C.[CustomerAddressLine2],
    C.[PostalCode],
    C.[ContactName],
    C.[ContactTitle],
    C.[Phone],
    C.[Email],
    C.[Website],
	C.[IsValidData],
    A.[AccountVersionID],
    Y.[CityVersionID],
    SL.[ServiceLevelVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Customer C
INNER JOIN dbo.ServiceLevel_History SL ON C.ServiceLevelID = SL.ServiceLevelID AND SL.IsLatestVersion = 1
LEFT JOIN dbo.City_History Y ON C.CityID = Y.CityID AND Y.IsLatestVersion = 1
LEFT JOIN dbo.Account_History A ON C.AccountID = A.AccountID AND A.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

SELECT @CustomerID = C.CustomerID
FROM dbo.Customer C
WHERE C.ServiceLevelID = @ServiceLevelID;

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> 1) OR (@ROWCOUNT2 <> 1)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT1);
	IF (@ROWCOUNT2 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT2);
	RETURN 0
	END

COMMIT TRAN
RETURN 1

go

CREATE PROCEDURE [dbo].[Delete]
AS

--DELETE FROM [dbo].[django_admin_log];
--DELETE FROM [dbo].[auth_user_user_permissions];
--DELETE FROM [dbo].[auth_user_groups];
--DELETE FROM [dbo].[auth_user];
--DELETE FROM [dbo].[auth_group_permissions];
--DELETE FROM [dbo].[auth_group];
--DELETE FROM [dbo].[auth_permission];
--DELETE FROM [dbo].[django_content_type];
--DELETE FROM [dbo].[django_migrations];
--DELETE FROM [dbo].[__RefactorLog];
--DELETE FROM [dbo].[django_session];

--DELETE FROM [staging].[LegCostSameday]
--DELETE FROM [staging].[LegCostFreight]
--DELETE FROM [staging].[TerminalServicePoint]
--DELETE FROM [staging].[ServicePoint]
--DELETE FROM [staging].[LaneCost]
--DELETE FROM [staging].[BrokerContractCostSameday]
--DELETE FROM [staging].[BrokerContractCostFreight]
--DELETE FROM [staging].[LaneRoute];
--DELETE FROM [staging].[DockRoute];
--DELETE FROM [staging].[Lane];
--DELETE FROM [staging].[TerminalCostSameDay];
--DELETE FROM [staging].[TerminalCostFreight];
--DELETE FROM [staging].[TerminalCost];
--DELETE FROM [staging].[Terminal];
--DELETE FROM [staging].[City];
--DELETE FROM [staging].[Province];
--DELETE FROM [staging].[Country];
--DELETE FROM [staging].[Region];
--DELETE FROM [staging].[ServiceMode];
--DELETE FROM [staging].[ServiceLevel];
--DELETE FROM [staging].[Account];

DELETE FROM [dbo].[TerminalCostWeightBreakLevel_History]
DELETE FROM [dbo].[TerminalCostWeightBreakLevel]
DELETE FROM [dbo].[FreightClass_History]
DELETE FROM [dbo].[FreightClass]
DELETE FROM [dbo].[RequestStatus_History]
DELETE FROM [dbo].[RequestStatus]
DELETE FROM [dbo].[RequestStatusType_History]
DELETE FROM [dbo].[RequestStatusType]
DELETE FROM [dbo].[Tariff_History]
DELETE FROM [dbo].[Tariff]
DELETE FROM [dbo].[Request_History]
DELETE FROM [dbo].[Request]
DELETE FROM [dbo].[RequestInformation_History]
DELETE FROM [dbo].[RequestInformation]
DELETE FROM [dbo].[RequestProfile_History]
DELETE FROM [dbo].[RequestProfile]
DELETE FROM [dbo].[RequestLane_History]
DELETE FROM [dbo].[RequestLane]
DELETE FROM [dbo].[RequestAccessorials_History]
DELETE FROM [dbo].[RequestAccessorials]
DELETE FROM [dbo].[Customer_History]
DELETE FROM [dbo].[Customer]
DELETE FROM [dbo].[AccountTree_History]
DELETE FROM [dbo].[AccountTree]
DELETE FROM [dbo].[Account_History]
DELETE FROM [dbo].[Account]


DELETE FROM [dbo].[User_History]
DELETE FROM [dbo].[User]
DELETE FROM [dbo].[Persona_History]
DELETE FROM [dbo].[Persona]
DELETE FROM [dbo].[Currency_History]
DELETE FROM [dbo].[Currency]
DELETE FROM [dbo].[Language_History]
DELETE FROM [dbo].[Language]
DELETE FROM [dbo].[LaneCostWeightBreakLevel_History]
DELETE FROM [dbo].[LaneCostWeightBreakLevel]
DELETE FROM [dbo].[RequestType_History]
DELETE FROM [dbo].[RequestType]

DELETE FROM [dbo].[WeightBreakHeader_History]
DELETE FROM [dbo].[WeightBreakHeader]
DELETE FROM [dbo].[SpeedSheet_History];
DELETE FROM [dbo].[SpeedSheet];
DELETE FROM [dbo].[CurrencyExchange_History];
DELETE FROM [dbo].[CurrencyExchange];
DELETE FROM [dbo].[BrokerContractCost_History];
DELETE FROM [dbo].[BrokerContractCost];
DELETE FROM [dbo].[LaneRoute_History];
DELETE FROM [dbo].[LaneRoute];
DELETE FROM [dbo].[DockRoute_History];
DELETE FROM [dbo].[DockRoute];
DELETE FROM [dbo].[LegCost_History];
DELETE FROM [dbo].[LegCost];
DELETE FROM [dbo].[LaneCost_History];
DELETE FROM [dbo].[LaneCost];
DELETE FROM [dbo].[Lane_History];
DELETE FROM [dbo].[Lane];
DELETE FROM [dbo].[TerminalServicePoint_History];
DELETE FROM [dbo].[TerminalServicePoint];
DELETE FROM [dbo].[ServicePoint_History];
DELETE FROM [dbo].[ServicePoint];
DELETE FROM [dbo].[TerminalCost_History];
DELETE FROM [dbo].[TerminalCost];
DELETE FROM [dbo].[Terminal_History];
DELETE FROM [dbo].[Terminal];
DELETE FROM [dbo].[City_History];
DELETE FROM [dbo].[City];
DELETE FROM [dbo].[Province_History];
DELETE FROM [dbo].[Province];
DELETE FROM [dbo].[Country_History];
DELETE FROM [dbo].[Country];
DELETE FROM [dbo].[Region_History];
DELETE FROM [dbo].[Region];
DELETE FROM [dbo].[ServiceMode_History];
DELETE FROM [dbo].[ServiceMode];
DELETE FROM [dbo].[ServiceLevel_History];
DELETE FROM [dbo].[ServiceLevel];
DELETE FROM [dbo].[ServiceOffering_History];
DELETE FROM [dbo].[ServiceOffering];
DELETE FROM [dbo].[ServiceOffering];
DELETE FROM [dbo].[UnitConversion_History];
DELETE FROM [dbo].[UnitConversion];
DELETE FROM [dbo].[Unit_History];
DELETE FROM [dbo].[Unit];
DELETE FROM [dbo].[RequestLog];
RETURN 1
go

CREATE   PROCEDURE [dbo].[DockRoute_Insert_Bulk]
	@DockRouteTableType DockRouteTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM
(
SELECT [ServiceOfferingName], [OriginTerminalCode], [DestinationTerminalCode], [ServiceLevelCode], COUNT(*) AS NumLegs
FROM @DockRouteTableType DR
GROUP BY [ServiceOfferingName], [OriginTerminalCode], [DestinationTerminalCode], [ServiceLevelCode]
) AS A

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @DockRoute table
(
	[DockRouteID] [bigint] NOT NULL,
	[LaneID]      BIGINT NOT NULL,
	[RouteLegs]          NVARCHAR (MAX) NOT NULL
)

DECLARE @DockRouteJson table
(
	[LaneID]      BIGINT NOT NULL,
	[LaneVersionID]      BIGINT NOT NULL,
	[RouteLegs]          NVARCHAR (MAX) NOT NULL,
	[RouteLegsVersion]          NVARCHAR (MAX) NOT NULL
)

DECLARE @DockRouteTableVersion table
(
	[LaneID]      BIGINT NOT NULL,
	[LaneVersionID]      BIGINT NOT NULL,
	[SeqNum] INT NOT NULL,
	[LegLaneID]      BIGINT NOT NULL,
	[LegOriginTerminalID]    BIGINT  NOT NULL,
	[LegDestinationTerminalID]    BIGINT NOT NULL,
	[LegLaneVersionID]      BIGINT NOT NULL,
	[LegOriginTerminalVersionID]    BIGINT  NOT NULL,
	[LegDestinationTerminalVersionID]    BIGINT NOT NULL,
	[LegOriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[LegDestinationTerminalCode]    NVARCHAR (3) NOT NULL
)

DECLARE @DockRouteTable table
(
	[LaneID]      BIGINT NOT NULL,
	[SeqNum] INT NOT NULL,
	[LegLaneID]      BIGINT NOT NULL,
	[LegOriginTerminalID]    BIGINT  NOT NULL,
	[LegDestinationTerminalID]    BIGINT NOT NULL,
	[LegOriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[LegDestinationTerminalCode]    NVARCHAR (3) NOT NULL
)

DECLARE @DockRouteTableTypeID table
(
	[OriginTerminalID]   BIGINT  NOT NULL,
	[DestinationTerminalID]    BIGINT NOT NULL,
	[ServiceLevelID]  BIGINT NOT NULL,
	[SeqNum] INT NOT NULL,
	[LegOriginTerminalID]    BIGINT  NOT NULL,
	[LegDestinationTerminalID]    BIGINT NOT NULL,
	[LegOriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[LegDestinationTerminalCode]    NVARCHAR (3) NOT NULL
)

INSERT INTO @DockRouteTableTypeID
(
	[OriginTerminalID],
	[DestinationTerminalID],
	[ServiceLevelID],
	[SeqNum],
	[LegOriginTerminalID],
	[LegDestinationTerminalID],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode]
)
SELECT O.[TerminalID],
	D.[TerminalID],
	SL.ServiceLevelID,
	DR.[SeqNum],
	LO.[TerminalID],
	LD.[TerminalID],
	DR.[LegOriginTerminalCode],
	DR.[LegDestinationTerminalCode]
FROM @DockRouteTableType DR
INNER JOIN [dbo].[ServiceLevel] SL ON DR.[ServiceLevelCode] = SL.[ServiceLevelCode]
INNER JOIN [dbo].[ServiceOffering] SO ON SL.[ServiceOfferingID] = SO.[ServiceOfferingID] AND DR.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[Terminal] O ON DR.[OriginTerminalCode] = O.[TerminalCode]
INNER JOIN [dbo].[Terminal] D ON DR.[DestinationTerminalCode] = D.[TerminalCode]
INNER JOIN [dbo].[Terminal] LO ON DR.[LegOriginTerminalCode] = LO.[TerminalCode]
INNER JOIN [dbo].[Terminal] LD ON DR.[LegDestinationTerminalCode] = LD.[TerminalCode]

INSERT INTO @DockRouteTable
(
	[LaneID],
	[SeqNum],
	[LegLaneID],
	[LegOriginTerminalID],
	[LegDestinationTerminalID],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode]
)
SELECT L.LaneID,
	DR.[SeqNum],
	LL.[LaneID],
	DR.[LegOriginTerminalID],
	DR.[LegDestinationTerminalID],
	DR.[LegOriginTerminalCode],
	DR.[LegDestinationTerminalCode]
FROM @DockRouteTableTypeID DR
INNER JOIN [dbo].[Lane] L ON DR.[OriginTerminalID] = L.[OriginTerminalID] AND DR.[DestinationTerminalID] = L.[DestinationTerminalID] AND DR.[ServiceLevelID] = L.[ServiceLevelID]
INNER JOIN [dbo].[Lane] LL ON DR.[LegOriginTerminalID] = LL.[OriginTerminalID] AND DR.[LegDestinationTerminalID] = LL.[DestinationTerminalID] AND DR.[ServiceLevelID] = LL.[ServiceLevelID]

INSERT INTO @DockRouteTableVersion
(
	[LaneID],
	[LaneVersionID],
	[SeqNum],
	[LegLaneID],
	[LegOriginTerminalID],
	[LegDestinationTerminalID],
	[LegLaneVersionID],
	[LegOriginTerminalVersionID],
	[LegDestinationTerminalVersionID],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode]
)
SELECT	DR.[LaneID],
	L.[LaneVersionID],
	DR.[SeqNum],
	DR.[LegLaneID],
	DR.[LegOriginTerminalID],
	DR.[LegDestinationTerminalID],
	LL.[LaneVersionID],
	LL.[OriginTerminalVersionID],
	LL.[DestinationTerminalVersionID],
	DR.[LegOriginTerminalCode],
	DR.[LegDestinationTerminalCode]
FROM @DockRouteTable DR
INNER JOIN [dbo].[Lane_History] L ON DR.[LaneID] = L.[LaneID] AND L.[IsLatestVersion] = 1
INNER JOIN [dbo].[Lane_History] LL ON DR.[LegLaneID] = LL.[LaneID] AND LL.[IsLatestVersion] = 1


INSERT INTO @DockRouteJson
(
	[LaneID],
	[LaneVersionID],
	[RouteLegs],
	[RouteLegsVersion]
)
SELECT A.[LaneID], A.[LaneVersionID], MAX(A.RouteLegs) AS RouteLegs, MAX(A.RouteLegsVersion) AS RouteLegsVersion
FROM
(SELECT DR.[LaneID],
	DR.[LaneVersionID],
	(SELECT D.[SeqNum], D.[LegLaneID], D.[LegOriginTerminalID], D.[LegDestinationTerminalID], D.[LegOriginTerminalCode], D.[LegDestinationTerminalCode] FROM @DockRouteTableVersion D WHERE D.[LaneID] = DR.[LaneID] FOR JSON AUTO) As RouteLegs,
	(SELECT D.[SeqNum], D.[LegLaneVersionID], D.[LegOriginTerminalVersionID], D.[LegDestinationTerminalVersionID], D.[LegOriginTerminalCode], D.[LegDestinationTerminalCode] FROM @DockRouteTableVersion D WHERE D.[LaneID] = DR.[LaneID] FOR JSON AUTO) As RouteLegsVersion
FROM @DockRouteTableVersion DR) AS A
GROUP BY A.[LaneID], A.[LaneVersionID]

INSERT INTO [dbo].[DockRoute]
(
	[LaneID],
	[RouteLegs],
	[IsActive],
	[IsInactiveViewable],
    [IsExcludeDestination],
	[IsExcludeSource]
)
OUTPUT INSERTED.DockRouteID,
	 INSERTED.LaneID,
	 INSERTED.RouteLegs
INTO @DockRoute
(
	[DockRouteID],
	[LaneID],
	[RouteLegs]
)
SELECT [LaneID],
	[RouteLegs],
	1,
	1,
    0,
    0
FROM @DockRouteJson

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[DockRoute_History]
(
	[DockRouteID],
	[LaneVersionID],
	[RouteLegs],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
    --[IsExcludeDestination],
	--[IsExcludeSource]
)
SELECT DR.[DockRouteID],
	 J.[LaneVersionID],
	 J.[RouteLegsVersion],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
    --0,
    --0,
FROM @DockRoute DR
INNER JOIN @DockRouteJson J ON DR.[LaneID] = J.[LaneID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE PROCEDURE [dbo].[Drop]
AS

DROP TABLE IF EXISTS [dbo].[django_admin_log];
DROP TABLE IF EXISTS [dbo].[auth_user_user_permissions];
DROP TABLE IF EXISTS [dbo].[auth_user_groups];
DROP TABLE IF EXISTS [dbo].[auth_user];
DROP TABLE IF EXISTS [dbo].[auth_group_permissions];
DROP TABLE IF EXISTS [dbo].[auth_group];
DROP TABLE IF EXISTS [dbo].[auth_permission];
DROP TABLE IF EXISTS [dbo].[django_content_type];
DROP TABLE IF EXISTS [dbo].[django_migrations];
DROP TABLE IF EXISTS [dbo].[__RefactorLog];
DROP TABLE IF EXISTS [dbo].[django_session];


DROP TABLE IF EXISTS [dbo].[MinimumDivision];
DROP TABLE IF EXISTS [dbo].[Plus30Factor];
DROP TABLE IF EXISTS [dbo].[Plus30InterchangeList];
DROP TABLE IF EXISTS [dbo].[PlusFactor];
DROP TABLE IF EXISTS [dbo].[Section3];
DROP TABLE IF EXISTS [dbo].[Section4];
DROP TABLE IF EXISTS [dbo].[Section6];


DROP TABLE IF EXISTS [staging].[PostalCode]
DROP TABLE IF EXISTS [staging].[LocationTree]
DROP TABLE IF EXISTS [staging].[LegCostSameday]
DROP TABLE IF EXISTS [staging].[LegCostFreight]
DROP TABLE IF EXISTS [staging].[TerminalServicePoint]
DROP TABLE IF EXISTS [staging].[ServicePoint]
DROP TABLE IF EXISTS [staging].[LaneCost]
DROP TABLE IF EXISTS [staging].[BrokerContractCostSameday]
DROP TABLE IF EXISTS [staging].[BrokerContractCostFreight]
DROP TABLE IF EXISTS [staging].[LaneRoute];
DROP TABLE IF EXISTS [staging].[DockRoute];
DROP TABLE IF EXISTS [staging].[Lane];
DROP TABLE IF EXISTS [staging].[TerminalCostSameday];
DROP TABLE IF EXISTS [staging].[TerminalCostFreight];
DROP TABLE IF EXISTS [staging].[TerminalCost];
DROP TABLE IF EXISTS [staging].[Terminal];
DROP TABLE IF EXISTS [staging].[City];
DROP TABLE IF EXISTS [staging].[Province];
DROP TABLE IF EXISTS [staging].[Country];
DROP TABLE IF EXISTS [staging].[Region];
DROP TABLE IF EXISTS [staging].[ServiceMode];
DROP TABLE IF EXISTS [staging].[ServiceLevel];
DROP TABLE IF EXISTS [staging].[Account];

DROP TABLE IF EXISTS [dbo].[User_user_permissions]
DROP TABLE IF EXISTS [dbo].[LastAssignedUser_History]
DROP TABLE IF EXISTS [dbo].[LastAssignedUser]
DROP TABLE IF EXISTS [dbo].[UserServiceLevel_History]
DROP TABLE IF EXISTS [dbo].[UserServiceLevel]
DROP TABLE IF EXISTS [dbo].[TerminalCostWeightBreakLevel_History]
DROP TABLE IF EXISTS [dbo].[TerminalCostWeightBreakLevel]
DROP TABLE IF EXISTS [dbo].[RequestQueue_History]
DROP TABLE IF EXISTS [dbo].[RequestQueue]
DROP TABLE IF EXISTS [dbo].[RequestSectionLanePricingPoint_History]
DROP TABLE IF EXISTS [dbo].[RequestSectionLanePricingPoint]
DROP TABLE IF EXISTS [dbo].[RequestSectionLane_Staging]
DROP TABLE IF EXISTS [dbo].[RequestSectionLane_History]
DROP TABLE IF EXISTS [dbo].[RequestSectionLane]
DROP TABLE IF EXISTS [dbo].[RequestSection_History]
DROP TABLE IF EXISTS [dbo].[RequestSection]
DROP TABLE IF EXISTS [dbo].[RequestStatus_History]
DROP TABLE IF EXISTS [dbo].[RequestStatus]
DROP TABLE IF EXISTS [dbo].[RequestStatusType_History]
DROP TABLE IF EXISTS [dbo].[RequestStatusType]
DROP TABLE IF EXISTS [dbo].[Tariff_History]
DROP TABLE IF EXISTS [dbo].[Tariff]
DROP TABLE IF EXISTS [dbo].[RequestApproval_History]
DROP TABLE IF EXISTS [dbo].[RequestApproval]
DROP TABLE IF EXISTS [dbo].[Request_History]
DROP TABLE IF EXISTS [dbo].[Request]
DROP TABLE IF EXISTS [dbo].[RequestInformation_History]
DROP TABLE IF EXISTS [dbo].[RequestInformation]
DROP TABLE IF EXISTS [dbo].[RequestProfile_History]
DROP TABLE IF EXISTS [dbo].[RequestProfile]
DROP TABLE IF EXISTS [dbo].[RequestLane_History]
DROP TABLE IF EXISTS [dbo].[RequestLane]
DROP TABLE IF EXISTS [dbo].[RequestAccessorials_History]
DROP TABLE IF EXISTS [dbo].[RequestAccessorials]
DROP TABLE IF EXISTS [dbo].[Customer_History]
DROP TABLE IF EXISTS [dbo].[Customer]
DROP TABLE IF EXISTS [dbo].[AccountTree_History]
DROP TABLE IF EXISTS [dbo].[AccountTree]
DROP TABLE IF EXISTS [dbo].[Account_History]
DROP TABLE IF EXISTS [dbo].[Account]
DROP TABLE IF EXISTS [dbo].[FreightClass_History]
DROP TABLE IF EXISTS [dbo].[FreightClass]

DROP TABLE IF EXISTS [dbo].[Notification_History]
DROP TABLE IF EXISTS [dbo].[Notification]
DROP TABLE IF EXISTS [dbo].[UserPersona_History]
DROP TABLE IF EXISTS [dbo].[UserPersona]
DROP TABLE IF EXISTS [dbo].[User_History]
DROP TABLE IF EXISTS [dbo].[User]
DROP TABLE IF EXISTS [dbo].[PersonaType_History]
DROP TABLE IF EXISTS [dbo].[PersonaType]
DROP TABLE IF EXISTS [dbo].[Persona_History]
DROP TABLE IF EXISTS [dbo].[Persona]
DROP TABLE IF EXISTS [dbo].[Currency_History]
DROP TABLE IF EXISTS [dbo].[Currency]
DROP TABLE IF EXISTS [dbo].[Language_History]
DROP TABLE IF EXISTS [dbo].[Language]
DROP TABLE IF EXISTS [dbo].[LaneCostWeightBreakLevel_History]
DROP TABLE IF EXISTS [dbo].[LaneCostWeightBreakLevel]
DROP TABLE IF EXISTS [dbo].[RequestType_History]
DROP TABLE IF EXISTS [dbo].[RequestType]

DROP TABLE IF EXISTS [dbo].[WeightBreakHeader_History]
DROP TABLE IF EXISTS [dbo].[WeightBreakHeader]
DROP TABLE IF EXISTS [dbo].[SpeedSheet_History];
DROP TABLE IF EXISTS [dbo].[SpeedSheet];
DROP TABLE IF EXISTS [dbo].[CurrencyExchange_History];
DROP TABLE IF EXISTS [dbo].[CurrencyExchange];
DROP TABLE IF EXISTS [dbo].[BrokerContractCost_History];
DROP TABLE IF EXISTS [dbo].[BrokerContractCost];
DROP TABLE IF EXISTS [dbo].[LaneRoute_History];
DROP TABLE IF EXISTS [dbo].[LaneRoute];
DROP TABLE IF EXISTS [dbo].[DockRoute_History];
DROP TABLE IF EXISTS [dbo].[DockRoute];
DROP TABLE IF EXISTS [dbo].[LegCost_History];
DROP TABLE IF EXISTS [dbo].[LegCost];
DROP TABLE IF EXISTS [dbo].[LaneCost_History];
DROP TABLE IF EXISTS [dbo].[LaneCost];
DROP TABLE IF EXISTS [dbo].[Lane_History];
DROP TABLE IF EXISTS [dbo].[Lane];
DROP TABLE IF EXISTS [dbo].[TerminalServicePoint_History];
DROP TABLE IF EXISTS [dbo].[TerminalServicePoint];
DROP TABLE IF EXISTS [dbo].[ServicePoint_History];
DROP TABLE IF EXISTS [dbo].[ServicePoint];
DROP TABLE IF EXISTS [dbo].[TerminalCost_History];
DROP TABLE IF EXISTS [dbo].[TerminalCost];
DROP TABLE IF EXISTS [dbo].[Terminal_History];
DROP TABLE IF EXISTS [dbo].[Terminal];
DROP TABLE IF EXISTS [dbo].[City_History];
DROP TABLE IF EXISTS [dbo].[City];
DROP TABLE IF EXISTS [dbo].[Province_History];
DROP TABLE IF EXISTS [dbo].[Province];
DROP TABLE IF EXISTS [dbo].[Region_History];
DROP TABLE IF EXISTS [dbo].[Region];
DROP TABLE IF EXISTS [dbo].[Country_History];
DROP TABLE IF EXISTS [dbo].[Country];
DROP TABLE IF EXISTS [dbo].[ServiceMode_History];
DROP TABLE IF EXISTS [dbo].[ServiceMode];
DROP TABLE IF EXISTS [dbo].[SubServiceLevel_History];
DROP TABLE IF EXISTS [dbo].[SubServiceLevel];
DROP TABLE IF EXISTS [dbo].[ServiceLevel_History];
DROP TABLE IF EXISTS [dbo].[ServiceLevel];
DROP TABLE IF EXISTS [dbo].[RequestSectionLanePointType_History];
DROP TABLE IF EXISTS [dbo].[RequestSectionLanePointType];
DROP TABLE IF EXISTS [dbo].[ServiceOffering_History];
DROP TABLE IF EXISTS [dbo].[ServiceOffering];
DROP TABLE IF EXISTS [dbo].[UnitConversion_History];
DROP TABLE IF EXISTS [dbo].[UnitConversion];
DROP TABLE IF EXISTS [dbo].[Unit_History];
DROP TABLE IF EXISTS [dbo].[Unit];
DROP TABLE IF EXISTS [dbo].[EquipmentType_History];
DROP TABLE IF EXISTS [dbo].[EquipmentType];
DROP TABLE IF EXISTS [dbo].[BasingPoint_History];
DROP TABLE IF EXISTS [dbo].[BasingPoint];
DROP TABLE IF EXISTS [dbo].[PostalCode_History];
DROP TABLE IF EXISTS [dbo].[PostalCode];
DROP TABLE IF EXISTS [dbo].[Zone_History];
DROP TABLE IF EXISTS [dbo].[Zone];
DROP TABLE IF EXISTS [dbo].[RateBase_History];
DROP TABLE IF EXISTS [dbo].[RateBase];
DROP TABLE IF EXISTS [dbo].[RequestLog];

RETURN 1
go

CREATE   PROCEDURE [dbo].[EquipmentType_Insert_Bulk]
	@EquipmentTypeTableType EquipmentTypeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @EquipmentTypeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @EquipmentType table
(
	[EquipmentTypeID] [bigint] NOT NULL,
	[EquipmentTypeName] [nvarchar](50) NOT NULL,
	[EquipmentTypeCode] [nvarchar](2) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[EquipmentType]
(
	[EquipmentTypeName],
	[EquipmentTypeCode],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.EquipmentTypeID,
	 INSERTED.EquipmentTypeName,
	 INSERTED.EquipmentTypeCode
INTO @EquipmentType
(
	[EquipmentTypeID],
	[EquipmentTypeName],
	[EquipmentTypeCode]
)
SELECT [EquipmentTypeName],
	[EquipmentTypeCode],
	1,
	1
FROM @EquipmentTypeTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[EquipmentType_History]
(
	[EquipmentTypeID],
	[EquipmentTypeName],
	[EquipmentTypeCode],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [EquipmentTypeID],
	 [EquipmentTypeName],
	 [EquipmentTypeCode],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @EquipmentType

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION dbo.FormatJsonField
(
	@JSON NVARCHAR(MAX)
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewJSON NVARCHAR(MAX);

	SELECT @NewJSON = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE (@JSON, '\', ''), '}",','},'), ':"{', ':{'), '""', '{}'), '}"', '}');

	RETURN @NewJSON

END
go

CREATE   PROCEDURE [dbo].[FreightClass_Insert_Bulk]
	@FreightClassTableType FreightClassTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @FreightClassTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @FreightClass table
(
	[FreightClassID] [bigint] NOT NULL,
	[FreightClassName] [nvarchar](50) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[FreightClass]
(
	[FreightClassName],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.FreightClassID,
	 INSERTED.FreightClassName
INTO @FreightClass
(
	[FreightClassID],
	[FreightClassName]
)
SELECT [FreightClassName],
	1,
	1
FROM @FreightClassTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[FreightClass_History]
(
	[FreightClassID],
	[FreightClassName],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [FreightClassID],
	 [FreightClassName],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @FreightClass

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION dbo.GetLocationHierarchy
(
	@RequestSectionLanePointTypeName NVARCHAR(50)
)

RETURNS INT
AS
BEGIN

	DECLARE @LocationHierarchy INT;

	SELECT @LocationHierarchy = (SELECT DISTINCT LocationHierarchy
		FROM dbo.RequestSectionLanePointType
		WHERE RequestSectionLanePointTypeName = @RequestSectionLanePointTypeName)

	RETURN @LocationHierarchy

END
go


CREATE FUNCTION [dbo].[GetRequestSectionLaneDefaultCost]
(
	@RequestSectionID BIGINT
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @Cost NVARCHAR(MAX);

	DECLARE @WeightBreak NVARCHAR(MAX);

	SELECT @WeightBreak = WeightBreak
	FROM dbo.RequestSection
	WHERE RequestSectionID = @RequestSectionID

	SELECT @Cost = '{' +
  STUFF((
	SELECT ', ' + '"' +  CAST(B.value AS VARCHAR(MAX)) + '"' + ':' + CAST(0 AS VARCHAR(MAX))
		FROM
			(
				SELECT SUBSTRING(A.value, 0, CHARINDEX(':', A.value)) as [value]
				FROM OPENJSON(@WeightBreak) AS A
				WHERE A.value LIKE '%:true%') as B

		FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
  ,1,2,'') + '}'

	return @Cost

END
go


CREATE FUNCTION GetRequestSectionLanePoints
(
	@GroupTypeID BIGINT,
	@GroupID BIGINT,
	@PointTypeID BIGINT,
	@PointID BIGINT
)
RETURNS
@Points TABLE
(
	[ProvinceID] BIGINT NULL,
	[ProvinceCode] NVARCHAR(2) NULL,
	[RegionID] BIGINT NULL,
	[RegionCode] NVARCHAR(4) NULL,
	[CountryID] BIGINT NULL,
	[CountryCode] NVARCHAR(2) NULL,
	[TerminalID] BIGINT NULL,
	[TerminalCode] NVARCHAR(3) NULL,
	[ZoneID] BIGINT NULL,
	[ZoneName] NVARCHAR(50) NULL,
	[BasingPointID] BIGINT NULL,
	[BasingPointName] NVARCHAR(50) NULL,
	[ServicePointID] BIGINT NULL,
	[ServicePointName] NVARCHAR(50) NULL,
	[PostalCodeID] BIGINT NULL,
	[PostalCodeName] NVARCHAR(10) NULL,
	[PointCode] NVARCHAR(50) NULL
)
AS
BEGIN

	IF @GroupTypeID <= 0
		SELECT @GroupTypeID = NULL

	IF @GroupID <= 0
		SELECT @GroupID = NULL

	IF @PointTypeID <= 0
		SELECT @PointTypeID = NULL

	IF @PointID <= 0
		SELECT @PointID = NULL

	DECLARE @CountryLocationHierarchy INT;
	DECLARE @RegionLocationHierarchy INT;
	DECLARE @ProvinceLocationHierarchy INT;
	DECLARE @TerminalLocationHierarchy INT;
	DECLARE @BasingPointLocationHierarchy INT;
	DECLARE @ServicePointLocationHierarchy INT;
	DECLARE @PostalCodeLocationHierarchy INT;

	SELECT @CountryLocationHierarchy = dbo.GetLocationHierarchy('Country')
	SELECT @RegionLocationHierarchy = dbo.GetLocationHierarchy('Region')
	SELECT @ProvinceLocationHierarchy = dbo.GetLocationHierarchy('Province')
	SELECT @TerminalLocationHierarchy = dbo.GetLocationHierarchy('Terminal')
	SELECT @BasingPointLocationHierarchy = dbo.GetLocationHierarchy('Basing Point')
	SELECT @ServicePointLocationHierarchy = dbo.GetLocationHierarchy('Service Point')
	SELECT @PostalCodeLocationHierarchy = dbo.GetLocationHierarchy('Postal Code')

	DECLARE @GroupLocationHierarchy INT;
	DECLARE @PointLocationHierarchy INT;

	IF @GroupTypeID IS NULL
	BEGIN
		SELECT @GroupLocationHierarchy = @CountryLocationHierarchy
	END
	ELSE
	BEGIN
		SELECT @GroupLocationHierarchy = LocationHierarchy
		FROM dbo.RequestSectionLanePointType
		WHERE RequestSectionLanePointTypeID = @GroupTypeID
	END

	IF @PointTypeID IS NULL
	BEGIN
		SELECT @PointLocationHierarchy = @PostalCodeLocationHierarchy
	END
	ELSE
	BEGIN
		SELECT @PointLocationHierarchy = LocationHierarchy
		FROM dbo.RequestSectionLanePointType
		WHERE RequestSectionLanePointTypeID = @PointTypeID
	END

	IF @PointLocationHierarchy = @RegionLocationHierarchy
BEGIN
		INSERT INTO @Points
			(
			[ProvinceID],
			[ProvinceCode],
			[RegionID],
			[RegionCode],
			[CountryID],
			[CountryCode],
			[TerminalID],
			[TerminalCode],
			[ZoneID],
			[ZoneName],
			[BasingPointID],
			[BasingPointName],
			[ServicePointID],
			[ServicePointName],
			[PostalCodeID],
			[PostalCodeName],
			[PointCode]
			)
		SELECT DISTINCT NULL,
			NULL,
			R.[RegionID],
			R.[RegionCode],
			C.[CountryID],
			C.[CountryCode],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			R.[RegionCode]
		FROM dbo.Country C
			INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
		WHERE (
		@GroupID IS NULL
			OR (@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
	)
			AND @PointID IS NULL OR R.RegionID = @PointID
	END
ELSE
BEGIN
		IF @PointLocationHierarchy = @ProvinceLocationHierarchy
	BEGIN
			INSERT INTO @Points
				(
				[ProvinceID],
				[ProvinceCode],
				[RegionID],
				[RegionCode],
				[CountryID],
				[CountryCode],
				[TerminalID],
				[TerminalCode],
				[ZoneID],
				[ZoneName],
				[BasingPointID],
				[BasingPointName],
				[ServicePointID],
				[ServicePointName],
				[PostalCodeID],
				[PostalCodeName],
				[PointCode]
				)
			SELECT DISTINCT P.[ProvinceID],
				P.[ProvinceCode],
				R.[RegionID],
				R.[RegionCode],
				C.[CountryID],
				C.[CountryCode],
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				P.[ProvinceCode]
			FROM dbo.Country C
				INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
				INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
			WHERE (
			@GroupID IS NULL
				OR (@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
				OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
		)
				AND @PointID IS NULL OR P.ProvinceID = @PointID
		END
	ELSE
	BEGIN
			IF @PointLocationHierarchy = @TerminalLocationHierarchy
		BEGIN
				INSERT INTO @Points
					(
					[ProvinceID],
					[ProvinceCode],
					[RegionID],
					[RegionCode],
					[CountryID],
					[CountryCode],
					[TerminalID],
					[TerminalCode],
					[ZoneID],
					[ZoneName],
					[BasingPointID],
					[BasingPointName],
					[ServicePointID],
					[ServicePointName],
					[PostalCodeID],
					[PostalCodeName],
					[PointCode]
					)
				SELECT DISTINCT P.[ProvinceID],
					P.[ProvinceCode],
					R.[RegionID],
					R.[RegionCode],
					C.[CountryID],
					C.[CountryCode],
					T.[TerminalID],
					T.[TerminalCode],
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					T.[TerminalCode]
				FROM dbo.Country C
					INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
					INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
					INNER JOIN dbo.City Y ON P.ProvinceID = Y.ProvinceID
					INNER JOIN dbo.Terminal T ON T.CityID = Y.CityID
				WHERE (
				@GroupID IS NULL
					OR (@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
					OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
					OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
			)
					AND @PointID IS NULL OR T.TerminalID = @PointID
			END
		ELSE
		BEGIN
				IF @PointLocationHierarchy = @BasingPointLocationHierarchy
			BEGIN
					INSERT INTO @Points
						(
						[ProvinceID],
						[ProvinceCode],
						[RegionID],
						[RegionCode],
						[CountryID],
						[CountryCode],
						[TerminalID],
						[TerminalCode],
						[ZoneID],
						[ZoneName],
						[BasingPointID],
						[BasingPointName],
						[ServicePointID],
						[ServicePointName],
						[PostalCodeID],
						[PostalCodeName],
						[PointCode]
						)
					SELECT DISTINCT P.[ProvinceID],
						P.[ProvinceCode],
						R.[RegionID],
						R.[RegionCode],
						C.[CountryID],
						C.[CountryCode],
						NULL,
						NULL,
						NULL,
						NULL,
						BP.BasingPointID,
						BP.BasingPointName,
						NULL,
						NULL,
						NULL,
						NULL,
						BP.BasingPointName
					FROM dbo.Country C
						INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
						INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
						INNER JOIN dbo.BasingPoint BP ON P.ProvinceID = BP.ProvinceID
					WHERE (
					@GroupID IS NULL
						OR (@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
						OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
						OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
				)
						AND @PointID IS NULL OR BP.BasingPointID = @PointID
				END
			ELSE
			BEGIN
					IF @PointLocationHierarchy = @ServicePointLocationHierarchy
				BEGIN
						INSERT INTO @Points
							(
							[ProvinceID],
							[ProvinceCode],
							[RegionID],
							[RegionCode],
							[CountryID],
							[CountryCode],
							[TerminalID],
							[TerminalCode],
							[ZoneID],
							[ZoneName],
							[BasingPointID],
							[BasingPointName],
							[ServicePointID],
							[ServicePointName],
							[PostalCodeID],
							[PostalCodeName],
							[PointCode]
							)
						SELECT DISTINCT P.[ProvinceID],
							P.[ProvinceCode],
							R.[RegionID],
							R.[RegionCode],
							C.[CountryID],
							C.[CountryCode],
							T.[TerminalID],
							T.[TerminalCode],
							NULL,
							NULL,
							BP.BasingPointID,
							BP.BasingPointName,
							SP.ServicePointID,
							SP.ServicePointName,
							NULL,
							NULL,
							SP.ServicePointName
						FROM dbo.Country C
							INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
							INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
							INNER JOIN dbo.ServicePoint SP ON P.ProvinceID = SP.ProvinceID
							INNER JOIN dbo.TerminalServicePoint TSP ON SP.ServicePointID = TSP.ServicePointID
							INNER JOIN dbo.Terminal T ON TSP.TerminalID = T.TerminalID
							LEFT JOIN dbo.BasingPoint BP ON SP.BasingPointID = BP.BasingPointID
						WHERE (
						@GroupID IS NULL
							OR (@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
							OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
							OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
					)
							AND @PointID IS NULL OR SP.ServicePointID = @PointID
					END
				ELSE
				BEGIN
						INSERT INTO @Points
							(
							[ProvinceID],
							[ProvinceCode],
							[RegionID],
							[RegionCode],
							[CountryID],
							[CountryCode],
							[TerminalID],
							[TerminalCode],
							[ZoneID],
							[ZoneName],
							[BasingPointID],
							[BasingPointName],
							[ServicePointID],
							[ServicePointName],
							[PostalCodeID],
							[PostalCodeName],
							[PointCode]
							)
						SELECT DISTINCT P.[ProvinceID],
							P.[ProvinceCode],
							R.[RegionID],
							R.[RegionCode],
							C.[CountryID],
							C.[CountryCode],
							T.[TerminalID],
							T.[TerminalCode],
							NULL,
							NULL,
							BP.BasingPointID,
							BP.BasingPointName,
							SP.ServicePointID,
							SP.ServicePointName,
							PC.PostalCodeID,
							PC.PostalCodeName,
							PC.PostalCodeName
						FROM dbo.Country C
							INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
							INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
							INNER JOIN dbo.ServicePoint SP ON P.ProvinceID = SP.ProvinceID
							INNER JOIN dbo.TerminalServicePoint TSP ON SP.ServicePointID = TSP.ServicePointID
							INNER JOIN dbo.Terminal T ON TSP.TerminalID = T.TerminalID
							INNER JOIN dbo.PostalCode PC ON SP.ServicePointID = PC.ServicePointID
							LEFT JOIN dbo.BasingPoint BP ON SP.BasingPointID = BP.BasingPointID
						WHERE (
						@GroupID IS NULL
							OR (@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
							OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
							OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
					)
							AND @PointID IS NULL OR PC.PostalCodeID = @PointID
					END
				END
			END
		END
	END
	RETURN
END
go

CREATE   PROCEDURE [dbo].[LaneCostWeightBreakLevel_Create]
	@AddedCostWeightBreakLevelTableType_Create CostWeightBreakLevelTableType_Create READONLY,
	@ServiceOfferingID BIGINT
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @ERROR1 INT, @ERROR2 INT;

-- insert new weight break levels

--DECLARE @InsertedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;
--DECLARE @DeletedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;

DECLARE @LaneCostWeightBreakLevel table
(
    [WeightBreakLevelID]    BIGINT       NOT NULL,
    [WeightBreakLevelName]  NVARCHAR (50) NOT NULL,
    [WeightBreakLowerBound] INT           NOT NULL,
    [ServiceOfferingID]     BIGINT        NOT NULL
)

DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History] SLH
WHERE SLH.[IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @AddedCostWeightBreakLevelTableType_Create)

INSERT INTO [dbo].[LaneCostWeightBreakLevel]
(
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[WeightBreakLevelID],
	 INSERTED.[WeightBreakLevelName],
	 INSERTED.[WeightBreakLowerBound],
	 INSERTED.[ServiceOfferingID]
INTO @LaneCostWeightBreakLevel
(
	[WeightBreakLevelID],
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID]
)
SELECT [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	1,
	1
FROM @AddedCostWeightBreakLevelTableType_Create

SELECT @ERROR1 = @@ERROR;

INSERT INTO [dbo].[LaneCostWeightBreakLevel_History]
(
	[WeightBreakLevelID],
	[WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT WB.[WeightBreakLevelID],
	WB.[WeightBreakLevelName],
    WB.[WeightBreakLowerBound],
    SO.[ServiceOfferingVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	'P&C System',
	'Added new Weight break levels'
FROM @LaneCostWeightBreakLevel WB
INNER JOIN @ServiceOfferingVersionID SO ON WB.[ServiceOfferingID] = SO.[ServiceOfferingID]

SELECT @ERROR2 = @@ERROR;

--INSERT INTO @InsertedCostWeightBreakLevel
--(
--	[WeightBreakLevelID],
--	[ServiceOfferingID]
--)
--SELECT [WeightBreakLevelID],
--	[ServiceOfferingID]
--FROM @LaneCostWeightBreakLevel

---- Update The Lane Cost table

--DECLARE @LaneNewCost LaneCostTableType_Update;

--INSERT INTO @LaneNewCost
--(
--	[LaneCostID],
--	[MinimumCost],
--	[Cost]
--)
--SELECT LC.LaneCostID,
--	LC.[MinimumCost],
--	dbo.LaneCostWeightBreakLevel_Modify(LC.Cost, @InsertedCostWeightBreakLevel, @DeletedCostWeightBreakLevel, SL.ServiceOfferingID) AS NewCost
--FROM dbo.LaneCost LC
--INNER JOIN dbo.Lane L ON LC.LaneID = L.LaneID
--INNER JOIN dbo.ServiceLevel SL ON L.ServiceLevelID = SL.ServiceLevelID
--WHERE SL.ServiceOfferingID = @ServiceOfferingID

--EXEC [dbo].[LaneCost_Update] @LaneNewCost;

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END


COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LaneCostWeightBreakLevel_Insert_Bulk]
	@LaneCostWeightBreakLevelTableType CostWeightBreakLevelTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LaneCostWeightBreakLevelTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @LaneCostWeightBreakLevel table
(
    [WeightBreakLevelID]    BIGINT       NOT NULL,
    [WeightBreakLevelName]  NVARCHAR (50) NOT NULL,
    [WeightBreakLowerBound] INT           NOT NULL,
    [ServiceOfferingID]     BIGINT        NOT NULL
)

DECLARE @LaneCostWeightBreakLevelID table
(
    [WeightBreakLevelName]  NVARCHAR (50) NOT NULL,
    [WeightBreakLowerBound] INT           NOT NULL,
    [ServiceOfferingID]     BIGINT        NOT NULL
)

DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @LaneCostWeightBreakLevelID
(
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID]
)
SELECT WB.[WeightBreakLevelName],
    WB.[WeightBreakLowerBound],
    SO.[ServiceOfferingID]
FROM @LaneCostWeightBreakLevelTableType WB
INNER JOIN dbo.[ServiceOffering] SO ON WB.[ServiceOfferingName] = SO.[ServiceOfferingName]


INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History] SLH
WHERE SLH.[IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @LaneCostWeightBreakLevelID)


INSERT INTO [dbo].[LaneCostWeightBreakLevel]
(
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[WeightBreakLevelID],
	 INSERTED.[WeightBreakLevelName],
	 INSERTED.[WeightBreakLowerBound],
	 INSERTED.[ServiceOfferingID]
INTO @LaneCostWeightBreakLevel
(
	[WeightBreakLevelID],
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID]
)
SELECT [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	1,
	1
FROM @LaneCostWeightBreakLevelID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[LaneCostWeightBreakLevel_History]
(
	[WeightBreakLevelID],
	[WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT WB.[WeightBreakLevelID],
	WB.[WeightBreakLevelName],
    WB.[WeightBreakLowerBound],
    SO.[ServiceOfferingVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @LaneCostWeightBreakLevel WB
INNER JOIN @ServiceOfferingVersionID SO ON WB.[ServiceOfferingID] = SO.[ServiceOfferingID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION dbo.LaneCostWeightBreakLevel_Modify
(
	@Cost NVARCHAR(MAX),
	@NewCostWeightBreakLevel CostWeightBreakLevelTableType_ID READONLY,
	@DeletedCostWeightBreakLevel CostWeightBreakLevelTableType_ID READONLY,
	@ServiceOfferingID BIGINT
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewCost NVARCHAR(MAX);

	SELECT @NewCost = '{' +
STUFF((
    SELECT ', ' + '"' +  CAST([key] AS VARCHAR(MAX)) + '"' + ':' + CAST([value] AS VARCHAR(MAX))
		FROM
			(
						SELECT [key] , CAST([value] AS NUMERIC(19,6)) AS [value]
				FROM OPENJSON(@Cost)
				WHERE [key] NOT IN (SELECT [WeightBreakLevelID]
				FROM @DeletedCostWeightBreakLevel
				WHERE ServiceOfferingID = @ServiceOfferingID)
			UNION
				SELECT [WeightBreakLevelID], 0.0
				FROM @NewCostWeightBreakLevel
				WHERE ServiceOfferingID = @ServiceOfferingID) AS A
		FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
	,1,2,'') + '}';

	RETURN @NewCost

END
go

CREATE   PROCEDURE [dbo].[LaneCostWeightBreakLevel_Update]
	@UpdatedCostWeightBreakLevel CostWeightBreakLevelTableType_Update READONLY,
	@ServiceOfferingID BIGINT
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT;

--DECLARE @InsertedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;
--DECLARE @DeletedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;

--INSERT INTO @InsertedCostWeightBreakLevel
--(
--	[WeightBreakLevelID],
--	[ServiceOfferingID]
--)
--SELECT LC.[WeightBreakLevelID],
--	LC.[ServiceOfferingID]
--FROM dbo.LaneCostWeightBreakLevel LC
--INNER JOIN @UpdatedCostWeightBreakLevel N ON LC.[WeightBreakLevelID] = N.[WeightBreakLevelID]
--WHERE LC.[IsActive] = 0 AND N.[IsActive] = 1

--INSERT INTO @DeletedCostWeightBreakLevel
--(
--	[WeightBreakLevelID],
--	[ServiceOfferingID]
--)
--SELECT LC.[WeightBreakLevelID],
--	LC.[ServiceOfferingID]
--FROM dbo.LaneCostWeightBreakLevel LC
--INNER JOIN @UpdatedCostWeightBreakLevel N ON LC.[WeightBreakLevelID] = N.[WeightBreakLevelID]
--WHERE LC.[IsActive] = 1 AND N.[IsActive] = 0

--DECLARE @InsertedCount INT, @DeletedCount INT;

--SELECT @InsertedCount = COUNT(*) FROM @InsertedCostWeightBreakLevel;
--SELECT @DeletedCount = COUNT(*) FROM @DeletedCostWeightBreakLevel;

--IF @InsertedCount > 0 OR @DeletedCount > 0
--BEGIN
--	DECLARE @LaneNewCost LaneCostTableType_Update;

--	INSERT INTO @LaneNewCost
--	(
--		[LaneCostID],
--		[MinimumCost],
--		[Cost]
--	)
--	SELECT LC.LaneCostID,
--		LC.[MinimumCost],
--		dbo.LaneCostWeightBreakLevel_Modify(LC.Cost, @InsertedCostWeightBreakLevel, @DeletedCostWeightBreakLevel, SL.ServiceOfferingID) AS NewCost
--	FROM dbo.LaneCost LC
--	INNER JOIN dbo.Lane L ON LC.LaneID = L.LaneID
--	INNER JOIN dbo.ServiceLevel SL ON L.ServiceLevelID = SL.ServiceLevelID
--	WHERE SL.ServiceOfferingID = @ServiceOfferingID

--	EXEC [dbo].[LaneCost_Update] @LaneNewCost;
--END

-- Update the dbo table with the latest values

UPDATE dbo.LaneCostWeightBreakLevel
SET [WeightBreakLevelName] = A.[WeightBreakLevelName],
[WeightBreakLowerBound] = A.[WeightBreakLowerBound],
[IsActive] = A.[IsActive]
FROM @UpdatedCostWeightBreakLevel AS A
WHERE dbo.LaneCostWeightBreakLevel.[WeightBreakLevelID] = A.[WeightBreakLevelID]

SELECT @ERROR1 = @@ERROR;

DECLARE @UpdateIDTableType table
(
	[WeightBreakLevelID] [bigint] NOT NULL,
	[WeightBreakLevelVersionID] [bigint] NOT NULL,
	[VersionNum] [int] NOT NULL,
	[IsInactiveViewable] [bit] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @UpdateIDTableType
(
	[WeightBreakLevelID],
	[WeightBreakLevelVersionID],
	[VersionNum],
	[IsInactiveViewable],
	[ServiceOfferingVersionID]
)
SELECT WBH.[WeightBreakLevelID],
	WBH.[WeightBreakLevelVersionID],
	WBH.[VersionNum],
	WBH.[IsInactiveViewable],
	WBH.[ServiceOfferingVersionID]
FROM dbo.LaneCostWeightBreakLevel_History WBH
INNER JOIN @UpdatedCostWeightBreakLevel WB ON WBH.[WeightBreakLevelID] = WB.[WeightBreakLevelID] AND WBH.IsLatestVersion = 1

-- Set the history.IsLatestVersion to zero

UPDATE dbo.LaneCostWeightBreakLevel_History
SET IsLatestVersion = 0
FROM @UpdateIDTableType AS U
WHERE dbo.LaneCostWeightBreakLevel_History.[WeightBreakLevelVersionID] = U.[WeightBreakLevelVersionID]

SELECT @ERROR2 = @@ERROR;

-- Insert new records in the history table.

INSERT INTO [dbo].[LaneCostWeightBreakLevel_History]
(
	[WeightBreakLevelID],
	[WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT WB.[WeightBreakLevelID],
	WB.[WeightBreakLevelName],
	WB.[WeightBreakLowerBound],
	WBH.[ServiceOfferingVersionID],
	WB.[IsActive],
	WBH.[VersionNum] + 1,
	1,
	WBH.[IsInactiveViewable],
	GETUTCDATE(),
	'P&C System',
	'Updated Weight break levels'
FROM @UpdateIDTableType WBH
INNER JOIN @UpdatedCostWeightBreakLevel WB ON WBH.[WeightBreakLevelID] = WB.[WeightBreakLevelID]

SELECT @ERROR3 = @@ERROR;

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0) OR (@ERROR3 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END


COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LaneCost_Create]
	@LaneCostTableType_Create LaneCostTableType_Create READONLY
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT, @ExistingDeletedLaneCostsCount INT;

SELECT @InputCount = Count(*) FROM @LaneCostTableType_Create;

BEGIN TRAN

DECLARE @ExistingDeleted AS TABLE
(
	[LaneID] [bigint] NOT NULL,
	[IsHeadhaul] [bit] NOT NULL,
	[MinimumCost] [decimal](19,6) NOT NULL,
	[Cost] [nvarchar](MAX) NOT NULL
)

INSERT INTO @ExistingDeleted
(
	[LaneID],
	[IsHeadhaul],
	[MinimumCost],
	[Cost]
)
SELECT L.LaneID,
	LC.[IsHeadhaul],
	LC.[MinimumCost],
	LC.[Cost]
FROM dbo.Lane L
INNER JOIN @LaneCostTableType_Create LC ON L.[OriginTerminalID] = LC.[OriginTerminalID]
	AND L.[DestinationTerminalID] = LC.[DestinationTerminalID]
	AND L.[ServiceLevelID] = LC.[ServiceLevelID]
WHERE L.[IsActive] = 0 OR L.[IsInactiveViewable] = 0

DECLARE @ExistingDeletedLanes LaneTableType_Update;

INSERT INTO @ExistingDeletedLanes
(
	[LaneID],
	[IsHeadhaul],
	[IsActive],
	[IsInactiveViewable]
)
SELECT L.[LaneID], L.[IsHeadhaul], 1, 1
FROM @ExistingDeleted L

EXEC [dbo].[Lane_Update] @ExistingDeletedLanes

DECLARE @LaneTableType LaneTableType;

DECLARE @TempLaneTableType AS table
(
	[ServiceOfferingName] [nvarchar](50) NOT NULL,
	[OriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[DestinationTerminalCode]    NVARCHAR (3) NOT NULL,
	[ServiceLevelCode]  NVARCHAR (2) NOT NULL,
	[OriginTerminalID] BIGINT NOT NULL,
	[DestinationTerminalID] BIGINT NOT NULL,
	[ServiceLevelID] BIGINT NOT NULL
)

INSERT INTO @TempLaneTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[OriginTerminalID],
	[DestinationTerminalID],
	[ServiceLevelID]
)
SELECT SO.[ServiceOfferingName],
	O.TerminalCode,
	D.TerminalCode,
	SL.[ServiceLevelCode],
	LC.[OriginTerminalID],
	LC.[DestinationTerminalID],
	LC.[ServiceLevelID]
FROM @LaneCostTableType_Create LC
INNER JOIN dbo.Terminal O ON LC.[OriginTerminalID] = O.TerminalID
INNER JOIN dbo.Terminal D ON LC.[DestinationTerminalID] = D.TerminalID
INNER JOIN dbo.ServiceLevel SL ON LC.ServiceLevelID = SL.ServiceLevelID
INNER JOIN dbo.ServiceOffering SO ON SL.ServiceOfferingID = SO.ServiceOfferingID
EXCEPT
SELECT SO.[ServiceOfferingName],
	O.TerminalCode,
	D.TerminalCode,
	SL.[ServiceLevelCode],
	L.[OriginTerminalID],
	L.[DestinationTerminalID],
	L.[ServiceLevelID]
FROM dbo.Lane L
INNER JOIN dbo.Terminal O ON L.[OriginTerminalID] = O.TerminalID
INNER JOIN dbo.Terminal D ON L.[DestinationTerminalID] = D.TerminalID
INNER JOIN dbo.ServiceLevel SL ON L.ServiceLevelID = SL.ServiceLevelID
INNER JOIN dbo.ServiceOffering SO ON SL.ServiceOfferingID = SO.ServiceOfferingID

INSERT INTO @LaneTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[IsHeadhaul]
)
SELECT T.[ServiceOfferingName],
	T.[OriginTerminalCode],
	T.[DestinationTerminalCode],
	T.[ServiceLevelCode],
	LC.[IsHeadhaul]
FROM @TempLaneTableType T
INNER JOIN @LaneCostTableType_Create LC ON LC.[OriginTerminalID] = T.[OriginTerminalID]
AND LC.[DestinationTerminalID] = T.[DestinationTerminalID]
AND LC.ServiceLevelID = T.ServiceLevelID

EXEC [dbo].[Lane_Insert_Bulk] @LaneTableType

DECLARE @LaneCostTableType_Create_ID TABLE
(
	[LaneID] BIGINT NOT NULL,
	[MinimumCost] DECIMAL(19,6) NOT NULL,
	[Cost] NVARCHAR(MAX) NOT NULL
)

INSERT INTO  @LaneCostTableType_Create_ID
(
	[LaneID],
	[MinimumCost],
	[Cost]
)

SELECT L.[LaneID],
	LC.[MinimumCost],
	LC.[Cost]
FROM dbo.Lane L
INNER JOIN @LaneCostTableType_Create LC ON L.[OriginTerminalID] = LC.[OriginTerminalID]
	AND L.[DestinationTerminalID] = LC.[DestinationTerminalID]
	AND L.[ServiceLevelID] = LC.[ServiceLevelID]

DECLARE @ExistingDeletedLaneCosts LaneCostTableType_Update;

INSERT INTO @ExistingDeletedLaneCosts
(
	[LaneCostID],
	[MinimumCost],
	[Cost]
)
SELECT LC.[LaneCostID],
	LCT.[MinimumCost],
	LCT.[Cost]
FROM @LaneCostTableType_Create_ID LCT
INNER JOIN dbo.LaneCost LC ON LCT.[LaneID] = LC.[LaneID]

EXEC [dbo].[LaneCost_Update] @ExistingDeletedLaneCosts

SELECT @ExistingDeletedLaneCostsCount = Count(*) FROM @ExistingDeletedLaneCosts;

DECLARE @LaneCost table
(
	[LaneCostID] [bigint] NOT NULL,
	[LaneID] [bigint] NOT NULL,
	[MinimumCost] [decimal](19,6) NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @LaneCostID table
(
	[LaneID] [bigint] NOT NULL,
	[MinimumCost] [decimal](19,6) NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

INSERT INTO @LaneCostID
(
	[LaneID],
	[MinimumCost],
	[Cost]
)
SELECT LC.[LaneID],
	LC.[MinimumCost],
	LC.[Cost]
FROM @LaneCostTableType_Create_ID LC
WHERE LC.[LaneID] NOT IN (SELECT NC.LaneID FROM dbo.LaneCost NC INNER JOIN @ExistingDeletedLaneCosts ENC ON NC.LaneCostID = ENC.LaneCostID)

DECLARE @LaneVersionID table
(
	[LaneID] [bigint] NOT NULL,
	[LaneVersionID] [bigint] NOT NULL
)

INSERT INTO @LaneVersionID
(
	[LaneID],
	[LaneVersionID]
)
SELECT [LaneID],
	[LaneVersionID]
FROM [dbo].[Lane_History]
WHERE [IsLatestVersion] = 1
AND [LaneID] IN (SELECT DISTINCT [LaneID] FROM @LaneCostID)

INSERT INTO [dbo].[LaneCost]
(
	[LaneID],
	[MinimumCost],
	[Cost],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.LaneCostID,
	 INSERTED.LaneID,
	 INSERTED.[MinimumCost],
	 INSERTED.Cost
INTO @LaneCost
(
	[LaneCostID],
	[LaneID],
	[MinimumCost],
	[Cost]
)
SELECT [LaneID],
	[MinimumCost],
	[Cost],
	1,
	1
FROM @LaneCostID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[LaneCost_History]
(
	[LaneCostID],
	[LaneVersionID],
	[MinimumCost],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT LC.[LaneCostID],
	 LVID.[LaneVersionID],
	 LC.[MinimumCost],
	 LC.[Cost],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 'P&C System',
	 ''
FROM @LaneCost LC
INNER JOIN @LaneVersionID LVID ON LC.[LaneID] = LVID.[LaneID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 + @ExistingDeletedLaneCostsCount <> @InputCount) OR (@ROWCOUNT2 + @ExistingDeletedLaneCostsCount <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 + @ExistingDeletedLaneCostsCount <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 + @ExistingDeletedLaneCostsCount <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LaneCost_Insert_Bulk]
	@LaneCostTableType LaneCostTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LaneCostTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @LaneCost table
(
	[LaneCostID] [bigint] NOT NULL,
	[LaneID] [bigint] NOT NULL,
	[MinimumCost] [decimal](19,6) NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @LaneCostWithLaneIDServiceLevelID table
(
	[LaneID] [bigint] NOT NULL,
	[MinimumCost] [decimal](19,6) NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @LaneVersionID table
(
	[LaneID] [bigint] NOT NULL,
	[LaneVersionID] [bigint] NOT NULL
)

INSERT INTO @LaneCostWithLaneIDServiceLevelID
(
	[LaneID],
	[MinimumCost],
	[Cost]
)
SELECT L.[LaneID],
	LCTT.[MinimumCost],
	LCTT.[Cost]
FROM @LaneCostTableType LCTT
INNER JOIN [dbo].[Terminal] O ON LCTT.[OriginTerminalCode] = O.[TerminalCode]
INNER JOIN [dbo].[Terminal] D ON LCTT.[DestinationTerminalCode] = D.[TerminalCode]
INNER JOIN [dbo].[ServiceOffering] SO ON LCTT.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID] AND SL.[ServiceLevelCode] = LCTT.[ServiceLevelCode]
INNER JOIN [dbo].[Lane] L ON L.[OriginTerminalID] = O.[TerminalID] AND L.[DestinationTerminalID] = D.[TerminalID] AND L.[ServiceLevelID] = SL.[ServiceLevelID]

INSERT INTO @LaneVersionID
(
	[LaneID],
	[LaneVersionID]
)
SELECT [LaneID],
	[LaneVersionID]
FROM [dbo].[Lane_History]
WHERE [IsLatestVersion] = 1
AND [LaneID] IN (SELECT DISTINCT [LaneID] FROM @LaneCostWithLaneIDServiceLevelID)

INSERT INTO [dbo].[LaneCost]
(
	[LaneID],
	[MinimumCost],
	[Cost],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.LaneCostID,
	 INSERTED.LaneID,
	 INSERTED.[MinimumCost],
	 INSERTED.Cost
INTO @LaneCost
(
	[LaneCostID],
	[LaneID],
	[MinimumCost],
	[Cost]
)
SELECT [LaneID],
	[MinimumCost],
	[Cost],
	1,
	1
FROM @LaneCostWithLaneIDServiceLevelID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[LaneCost_History]
(
	[LaneCostID],
	[LaneVersionID],
	[MinimumCost],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT LC.[LaneCostID],
	 LVID.[LaneVersionID],
	 LC.[MinimumCost],
	 LC.[Cost],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @LaneCost LC
INNER JOIN @LaneVersionID LVID ON LC.[LaneID] = LVID.[LaneID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LaneCost_Update]
	@LaneCostTableType_Update LaneCostTableType_Update READONLY
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ROWCOUNT1 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LaneCostTableType_Update;

BEGIN TRAN

DECLARE @LaneCost table
(
	[LaneCostVersionID] [bigint] NOT NULL,
	[LaneCostID] [bigint] NOT NULL,
	[LaneVersionID] [bigint] NOT NULL,
	[MinimumCost] [decimal](19,6) NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[VersionNum] [int] NOT NULL
)

INSERT INTO @LaneCost
(
	[LaneCostVersionID],
	[LaneCostID],
	[LaneVersionID],
	[MinimumCost],
	[Cost],
	[IsActive],
	[IsInactiveViewable],
	[VersionNum]
)
SELECT LCH.[LaneCostVersionID],
	LC.[LaneCostID],
	LCH.[LaneVersionID],
	LC.[MinimumCost],
	LC.[Cost],
	LCH.[IsActive],
	LCH.[IsInactiveViewable],
	LCH.[VersionNum]
FROM [dbo].[LaneCost_History] LCH
INNER JOIN @LaneCostTableType_Update LC ON LCH.[LaneCostID] = LC.[LaneCostID] AND LCH.[IsLatestVersion] = 1

UPDATE [dbo].[LaneCost]
SET [MinimumCost] = A.[MinimumCost],
	[Cost] = A.[Cost]
FROM @LaneCostTableType_Update AS A
WHERE [dbo].[LaneCost].[LaneCostID] = A.[LaneCostID]

UPDATE [dbo].[LaneCost_History]
SET [IsLatestVersion] = 0
FROM @LaneCost AS A
WHERE [dbo].[LaneCost_History].[LaneCostVersionID] = A.[LaneCostVersionID]


INSERT INTO [dbo].[LaneCost_History]
(
	[LaneCostID],
	[LaneVersionID],
	[MinimumCost],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT LC.[LaneCostID],
	 LC.[LaneVersionID],
	 LC.[MinimumCost],
	 LC.[Cost],
	 LC.[IsActive],
	 LC.[VersionNum] + 1,
	 1,
	 LC.[IsInactiveViewable],
	 GETUTCDATE(),
	 'P&C System',
	 'Updated Lane Cost'
FROM @LaneCost LC

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

IF (@ERROR1 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LaneRoute_Insert_Bulk]
	@LaneRouteTableType LaneRouteTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM
(
SELECT [ServiceOfferingName], [OriginTerminalCode], [DestinationTerminalCode], [ServiceLevelCode], COUNT(*) AS NumLegs
FROM @LaneRouteTableType LR
GROUP BY [ServiceOfferingName], [OriginTerminalCode], [DestinationTerminalCode], [ServiceLevelCode]
) AS A

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @LaneRoute table
(
	[LaneRouteID] [bigint] NOT NULL,
	[LaneID]      BIGINT NOT NULL,
	[RouteLegs]          NVARCHAR (MAX) NOT NULL
)

DECLARE @LaneRouteJson table
(
	[LaneID]      BIGINT NOT NULL,
	[LaneVersionID]      BIGINT NOT NULL,
	[RouteLegs]          NVARCHAR (MAX) NOT NULL,
	[RouteLegsVersion]          NVARCHAR (MAX) NOT NULL
)

DECLARE @LaneRouteTableVersion table
(
	[LaneID]      BIGINT NOT NULL,
	[LaneVersionID]      BIGINT NOT NULL,
	[SeqNum] INT NOT NULL,
	[LegLaneID]      BIGINT NOT NULL,
	[LegOriginTerminalID]    BIGINT  NOT NULL,
	[LegDestinationTerminalID]    BIGINT NOT NULL,
	[LegLaneVersionID]      BIGINT NOT NULL,
	[LegOriginTerminalVersionID]    BIGINT  NOT NULL,
	[LegDestinationTerminalVersionID]    BIGINT NOT NULL,
	[LegOriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[LegDestinationTerminalCode]    NVARCHAR (3) NOT NULL,
	[LegServiceModeCode] NVARCHAR (1) NOT NULL,
	[LegServiceModeID] BIGINT NOT NULL,
	[LegServiceModeVersionID] BIGINT NOT NULL
)

DECLARE @LaneRouteTable table
(
	[LaneID]      BIGINT NOT NULL,
	[SeqNum] INT NOT NULL,
	[LegLaneID]      BIGINT NOT NULL,
	[LegOriginTerminalID]    BIGINT  NOT NULL,
	[LegDestinationTerminalID]    BIGINT NOT NULL,
	[LegOriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[LegDestinationTerminalCode]    NVARCHAR (3) NOT NULL,
	[LegServiceModeCode] NVARCHAR (1) NOT NULL,
	[LegServiceModeID] BIGINT NOT NULL
)

DECLARE @LaneRouteTableTypeID table
(
	[OriginTerminalID]   BIGINT  NOT NULL,
	[DestinationTerminalID]    BIGINT NOT NULL,
	[ServiceLevelID]  BIGINT NOT NULL,
	[SeqNum] INT NOT NULL,
	[LegOriginTerminalID]    BIGINT  NOT NULL,
	[LegDestinationTerminalID]    BIGINT NOT NULL,
	[LegOriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[LegDestinationTerminalCode]    NVARCHAR (3) NOT NULL,
	[LegServiceModeCode] NVARCHAR (1) NOT NULL,
	[LegServiceModeID] BIGINT NOT NULL
)

INSERT INTO @LaneRouteTableTypeID
(
	[OriginTerminalID],
	[DestinationTerminalID],
	[ServiceLevelID],
	[SeqNum],
	[LegOriginTerminalID],
	[LegDestinationTerminalID],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode],
	[LegServiceModeCode],
	[LegServiceModeID]
)
SELECT O.[TerminalID],
	D.[TerminalID],
	SL.ServiceLevelID,
	DR.[SeqNum],
	LO.[TerminalID],
	LD.[TerminalID],
	DR.[LegOriginTerminalCode],
	DR.[LegDestinationTerminalCode],
	DR.[LegServiceModeCode],
	SM.[ServiceModeID]
FROM @LaneRouteTableType DR
INNER JOIN [dbo].[ServiceOffering] SO ON DR.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID] AND DR.[ServiceLevelCode] = SL.[ServiceLevelCode]
INNER JOIN [dbo].[Terminal] O ON DR.[OriginTerminalCode] = O.[TerminalCode]
INNER JOIN [dbo].[Terminal] D ON DR.[DestinationTerminalCode] = D.[TerminalCode]
INNER JOIN [dbo].[Terminal] LO ON DR.[LegOriginTerminalCode] = LO.[TerminalCode]
INNER JOIN [dbo].[Terminal] LD ON DR.[LegDestinationTerminalCode] = LD.[TerminalCode]
INNER JOIN [dbo].[ServiceMode] SM ON SO.[ServiceOfferingID] = SM.[ServiceOfferingID] AND DR.[LegServiceModeCode] = SM.[ServiceModeCode]

INSERT INTO @LaneRouteTable
(
	[LaneID],
	[SeqNum],
	[LegLaneID],
	[LegOriginTerminalID],
	[LegDestinationTerminalID],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode],
	[LegServiceModeCode],
	[LegServiceModeID]
)
SELECT L.LaneID,
	DR.[SeqNum],
	LL.[LaneID],
	DR.[LegOriginTerminalID],
	DR.[LegDestinationTerminalID],
	DR.[LegOriginTerminalCode],
	DR.[LegDestinationTerminalCode],
	DR.[LegServiceModeCode],
	DR.[LegServiceModeID]
FROM @LaneRouteTableTypeID DR
INNER JOIN [dbo].[Lane] L ON DR.[OriginTerminalID] = L.[OriginTerminalID] AND DR.[DestinationTerminalID] = L.[DestinationTerminalID] AND DR.[ServiceLevelID] = L.[ServiceLevelID]
INNER JOIN [dbo].[Lane] LL ON DR.[LegOriginTerminalID] = LL.[OriginTerminalID] AND DR.[LegDestinationTerminalID] = LL.[DestinationTerminalID] AND DR.[ServiceLevelID] = LL.[ServiceLevelID]

INSERT INTO @LaneRouteTableVersion
(
	[LaneID],
	[LaneVersionID],
	[SeqNum],
	[LegLaneID],
	[LegOriginTerminalID],
	[LegDestinationTerminalID],
	[LegLaneVersionID],
	[LegOriginTerminalVersionID],
	[LegDestinationTerminalVersionID],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode],
	[LegServiceModeCode],
	[LegServiceModeID],
	[LegServiceModeVersionID]
)
SELECT	DR.[LaneID],
	L.[LaneVersionID],
	DR.[SeqNum],
	DR.[LegLaneID],
	DR.[LegOriginTerminalID],
	DR.[LegDestinationTerminalID],
	LL.[LaneVersionID],
	LL.[OriginTerminalVersionID],
	LL.[DestinationTerminalVersionID],
	DR.[LegOriginTerminalCode],
	DR.[LegDestinationTerminalCode],
	DR.[LegServiceModeCode],
	DR.[LegServiceModeID],
	SM.[ServiceModeVersionID]
FROM @LaneRouteTable DR
INNER JOIN [dbo].[Lane_History] L ON DR.[LaneID] = L.[LaneID] AND L.[IsLatestVersion] = 1
INNER JOIN [dbo].[Lane_History] LL ON DR.[LegLaneID] = LL.[LaneID] AND LL.[IsLatestVersion] = 1
INNER JOIN [dbo].[ServiceMode_History] SM ON DR.[LegServiceModeID] = SM.[ServiceModeID] AND SM.[IsLatestVersion] = 1

INSERT INTO @LaneRouteJson
(
	[LaneID],
	[LaneVersionID],
	[RouteLegs],
	[RouteLegsVersion]
)
SELECT DISTINCT DR.[LaneID],
	DR.[LaneVersionID],
	(SELECT D.[SeqNum], D.[LegLaneID], D.[LegOriginTerminalID], D.[LegDestinationTerminalID], D.[LegOriginTerminalCode], D.[LegDestinationTerminalCode], D.[LegServiceModeCode], D.[LegServiceModeID] FROM @LaneRouteTableVersion D WHERE D.[LaneID] = DR.[LaneID] ORDER BY D.[SeqNum] FOR JSON AUTO) As RouteLegs,
	(SELECT D.[SeqNum], D.[LegLaneVersionID], D.[LegOriginTerminalVersionID], D.[LegDestinationTerminalVersionID], D.[LegOriginTerminalCode], D.[LegDestinationTerminalCode], D.[LegServiceModeCode], D.[LegServiceModeVersionID] FROM @LaneRouteTableVersion D WHERE D.[LaneID] = DR.[LaneID] ORDER BY D.[SeqNum] FOR JSON AUTO) As RouteLegsVersion
FROM @LaneRouteTableVersion DR

INSERT INTO [dbo].[LaneRoute]
(
	[LaneID],
	[RouteLegs],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.LaneRouteID,
	 INSERTED.LaneID,
	 INSERTED.RouteLegs
INTO @LaneRoute
(
	[LaneRouteID],
	[LaneID],
	[RouteLegs]
)
SELECT [LaneID],
	[RouteLegs],
	1,
	1
FROM @LaneRouteJson

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[LaneRoute_History]
(
	[LaneRouteID],
	[LaneVersionID],
	[RouteLegs],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT DR.[LaneRouteID],
	 J.[LaneVersionID],
	 J.[RouteLegsVersion],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @LaneRoute DR
INNER JOIN @LaneRouteJson J ON DR.[LaneID] = J.[LaneID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Lane_Insert_Bulk]
	@LaneTableType LaneTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LaneTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @Lane table
(
	[LaneID] [bigint] NOT NULL,
	[OriginTerminalID]      BIGINT NOT NULL,
    [DestinationTerminalID] BIGINT NOT NULL,
	[ServiceLevelID]        BIGINT NOT NULL,
	[IsHeadhaul]            BIT    NOT NULL
)

DECLARE @LaneWithOrigDestID table
(
	[OriginTerminalID]      BIGINT NOT NULL,
    [DestinationTerminalID] BIGINT NOT NULL,
	[ServiceLevelID] BIGINT NOT NULL,
	[IsHeadhaul]            BIT    NOT NULL
)

DECLARE @OriginTerminalVersionID table
(
	[TerminalID] [bigint] NOT NULL,
	[TerminalVersionID] [bigint] NOT NULL
)

DECLARE @DestinationTerminalVersionID table
(
	[TerminalID] [bigint] NOT NULL,
	[TerminalVersionID] [bigint] NOT NULL
)

DECLARE @ServiceLevelVersionID table
(
	[ServiceLevelID] [bigint] NOT NULL,
	[ServiceLevelVersionID] [bigint] NOT NULL
)

INSERT INTO @LaneWithOrigDestID
(
	[OriginTerminalID],
    [DestinationTerminalID],
	[ServiceLevelID],
	[IsHeadhaul]
)
SELECT O.[TerminalID],
	D.[TerminalID],
	SL.[ServiceLevelID],
	LTT.[IsHeadhaul]
FROM @LaneTableType LTT
INNER JOIN [dbo].[Terminal] O ON LTT.[OriginTerminalCode] = O.[TerminalCode]
INNER JOIN [dbo].[Terminal] D ON LTT.[DestinationTerminalCode] = D.[TerminalCode]
INNER JOIN [dbo].[ServiceOffering] SO ON LTT.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID] AND LTT.[ServiceLevelCode] = SL.[ServiceLevelCode]

INSERT INTO @OriginTerminalVersionID
(
	[TerminalID],
	[TerminalVersionID]
)
SELECT [TerminalID],
	[TerminalVersionID]
FROM [dbo].[Terminal_History]
WHERE [IsLatestVersion] = 1
AND [TerminalID] IN (SELECT DISTINCT [OriginTerminalID] FROM @LaneWithOrigDestID)

INSERT INTO @DestinationTerminalVersionID
(
	[TerminalID],
	[TerminalVersionID]
)
SELECT [TerminalID],
	[TerminalVersionID]
FROM [dbo].[Terminal_History]
WHERE [IsLatestVersion] = 1
AND [TerminalID] IN (SELECT DISTINCT [DestinationTerminalID] FROM @LaneWithOrigDestID)

INSERT INTO @ServiceLevelVersionID
(
	[ServiceLevelID],
	[ServiceLevelVersionID]
)
SELECT [ServiceLevelID],
	[ServiceLevelVersionID]
FROM [dbo].[ServiceLevel_History] SLH
WHERE SLH.[IsLatestVersion] = 1
AND [ServiceLevelID] IN (SELECT DISTINCT [ServiceLevelID] FROM @LaneWithOrigDestID)

INSERT INTO [dbo].[Lane]
(
	[OriginTerminalID],
    [DestinationTerminalID],
	[ServiceLevelID],
	[IsHeadhaul],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.LaneID,
	 INSERTED.OriginTerminalID,
	 INSERTED.DestinationTerminalID,
	 INSERTED.[ServiceLevelID],
	 INSERTED.[IsHeadhaul]
INTO @Lane
(
	[LaneID],
	[OriginTerminalID],
	[DestinationTerminalID],
	[ServiceLevelID],
	[IsHeadhaul]
)
SELECT [OriginTerminalID],
	[DestinationTerminalID],
	[ServiceLevelID],
	[IsHeadhaul],
	1,
	1
FROM @LaneWithOrigDestID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Lane_History]
(
	[LaneID],
	[OriginTerminalVersionID],
	[DestinationTerminalVersionID],
	[ServiceLevelVersionID],
	[IsHeadhaul],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT L.[LaneID],
	 OVID.[TerminalVersionID],
	 DVID.[TerminalVersionID],
	 SLH.[ServiceLevelVersionID],
	 L.[IsHeadhaul],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Lane L
INNER JOIN @OriginTerminalVersionID OVID ON L.[OriginTerminalID] = OVID.[TerminalID]
INNER JOIN @DestinationTerminalVersionID DVID ON L.[DestinationTerminalID] = DVID.[TerminalID]
INNER JOIN @ServiceLevelVersionID SLH ON SLH.[ServiceLevelID] = L.[ServiceLevelID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Lane_Update]
	@LaneTableType_Update LaneTableType_Update READONLY
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ROWCOUNT1 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LaneTableType_Update;

BEGIN TRAN

DECLARE @Lane table
(
	[LaneVersionID] [bigint] NOT NULL,
	[LaneID] [bigint] NOT NULL,
	[OriginTerminalVersionID] [bigint] NOT NULL,
	[DestinationTerminalVersionID] [bigint] NOT NULL,
	[ServiceLevelVersionID] [bigint] NOT NULL,
	[IsHeadhaul]           BIT           NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[VersionNum] [int] NOT NULL
)

INSERT INTO @Lane
(
	[LaneVersionID],
	[LaneID],
	[OriginTerminalVersionID],
	[DestinationTerminalVersionID],
	[ServiceLevelVersionID],
	[IsHeadhaul],
	[IsActive],
	[IsInactiveViewable],
	[VersionNum]
)
SELECT LH.[LaneVersionID],
	L.[LaneID],
	LH.[OriginTerminalVersionID],
	LH.[DestinationTerminalVersionID],
	LH.[ServiceLevelVersionID],
	L.[IsHeadhaul],
	L.[IsActive],
	L.[IsInactiveViewable],
	LH.[VersionNum]
FROM [dbo].[Lane_History] LH
INNER JOIN @LaneTableType_Update L ON LH.[LaneID] = L.[LaneID] AND LH.[IsLatestVersion] = 1

UPDATE [dbo].[Lane]
SET [IsHeadhaul] = A.[IsHeadhaul],
	[IsActive] = A.[IsActive],
	[IsInactiveViewable] = A.[IsInactiveViewable]
FROM @LaneTableType_Update AS A
WHERE [dbo].[Lane].[LaneID] = A.[LaneID]

UPDATE [dbo].[Lane_History]
SET [IsLatestVersion] = 0
FROM @Lane AS A
WHERE [dbo].[Lane_History].[LaneVersionID] = A.[LaneVersionID]


INSERT INTO [dbo].[Lane_History]
(
	[LaneID],
	[OriginTerminalVersionID],
	[DestinationTerminalVersionID],
	[ServiceLevelVersionID],
	[IsHeadhaul],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT L.[LaneID],
	 L.[OriginTerminalVersionID],
	 L.[DestinationTerminalVersionID],
	 L.[ServiceLevelVersionID],
	 L.[IsHeadhaul],
	 L.[IsActive],
	 L.[VersionNum] + 1,
	 1,
	 L.[IsInactiveViewable],
	 GETUTCDATE(),
	 'P&C System',
	 ''
FROM @Lane L

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

IF (@ERROR1 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Language_Insert_Bulk]
	@LanguageTableType LanguageTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LanguageTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Language table
(
	[LanguageID] [bigint] NOT NULL,
	[LanguageName] [nvarchar](50) NOT NULL,
	[LanguageCode] [nvarchar](2) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[Language]
(
	[LanguageName],
	[LanguageCode],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.LanguageID,
	 INSERTED.LanguageName,
	 INSERTED.LanguageCode
INTO @Language
(
	[LanguageID],
	[LanguageName],
	[LanguageCode]
)
SELECT [LanguageName],
	[LanguageCode],
	1,
	1
FROM @LanguageTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Language_History]
(
	[LanguageID],
	[LanguageName],
	[LanguageCode],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [LanguageID],
	 [LanguageName],
	 [LanguageCode],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Language

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LegCost_Create]
	@LegCostTableType_Create LegCostTableType_Create READONLY
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LegCostTableType_Create;

BEGIN TRAN

DECLARE @ExistingDeletedLanes LaneTableType_Update;

INSERT INTO @ExistingDeletedLanes
(
	[LaneID],
	[IsHeadhaul],
	[IsActive],
	[IsInactiveViewable]
)
SELECT DISTINCT L.LaneID, L.[IsHeadhaul], 1, 1
FROM dbo.Lane L
INNER JOIN @LegCostTableType_Create LC ON L.[OriginTerminalID] = LC.[OriginTerminalID]
	AND L.[DestinationTerminalID] = LC.[DestinationTerminalID]
	AND L.[ServiceLevelID] = LC.[ServiceLevelID]
WHERE L.[IsActive] = 0 OR L.[IsInactiveViewable] = 0

EXEC [dbo].[Lane_Update] @ExistingDeletedLanes

DECLARE @LaneTableType LaneTableType;

DECLARE @TempLaneTableType AS table
(
	[ServiceOfferingName] [nvarchar](50) NOT NULL,
	[OriginTerminalCode]    NVARCHAR (3)  NOT NULL,
	[DestinationTerminalCode]    NVARCHAR (3) NOT NULL,
	[ServiceLevelCode]  NVARCHAR (2) NOT NULL,
	[OriginTerminalID] BIGINT NOT NULL,
	[DestinationTerminalID] BIGINT NOT NULL,
	[ServiceLevelID] BIGINT NOT NULL
)

INSERT INTO @TempLaneTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[OriginTerminalID],
	[DestinationTerminalID],
	[ServiceLevelID]
)
SELECT SO.[ServiceOfferingName],
	O.TerminalCode,
	D.TerminalCode,
	SL.[ServiceLevelCode],
	LC.[OriginTerminalID],
	LC.[DestinationTerminalID],
	LC.[ServiceLevelID]
FROM @LegCostTableType_Create LC
INNER JOIN dbo.Terminal O ON LC.[OriginTerminalID] = O.TerminalID
INNER JOIN dbo.Terminal D ON LC.[DestinationTerminalID] = D.TerminalID
INNER JOIN dbo.ServiceLevel SL ON LC.ServiceLevelID = SL.ServiceLevelID
INNER JOIN dbo.ServiceOffering SO ON SL.ServiceOfferingID = SO.ServiceOfferingID
EXCEPT
SELECT SO.[ServiceOfferingName],
	O.TerminalCode,
	D.TerminalCode,
	SL.[ServiceLevelCode],
	L.[OriginTerminalID],
	L.[DestinationTerminalID],
	L.[ServiceLevelID]
FROM dbo.Lane L
INNER JOIN dbo.Terminal O ON L.[OriginTerminalID] = O.TerminalID
INNER JOIN dbo.Terminal D ON L.[DestinationTerminalID] = D.TerminalID
INNER JOIN dbo.ServiceLevel SL ON L.ServiceLevelID = SL.ServiceLevelID
INNER JOIN dbo.ServiceOffering SO ON SL.ServiceOfferingID = SO.ServiceOfferingID

INSERT INTO @LaneTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[IsHeadhaul]
)
SELECT T.[ServiceOfferingName],
	T.[OriginTerminalCode],
	T.[DestinationTerminalCode],
	T.[ServiceLevelCode],
	LC.[IsHeadhaul]
FROM @TempLaneTableType T
INNER JOIN @LegCostTableType_Create LC ON LC.[OriginTerminalID] = T.[OriginTerminalID]
AND LC.[DestinationTerminalID] = T.[DestinationTerminalID]
AND LC.ServiceLevelID = T.ServiceLevelID

EXEC [dbo].[Lane_Insert_Bulk] @LaneTableType

DECLARE @LegCostTableType_Create_ID TABLE
(
	[LaneID] BIGINT NOT NULL,
	[ServiceModeID] BIGINT NOT NULL,
	[Cost] NVARCHAR(MAX)
)

INSERT INTO @LegCostTableType_Create_ID
(
	[LaneID],
	[ServiceModeID],
	[Cost]
)
SELECT L.[LaneID],
	LC.[ServiceModeID],
	LC.[Cost]
FROM @LegCostTableType_Create LC
INNER JOIN dbo.Lane L ON L.[OriginTerminalID] = LC.[OriginTerminalID]
	AND L.[DestinationTerminalID] = LC.[DestinationTerminalID]
	AND L.[ServiceLevelID] = LC.[ServiceLevelID]

DECLARE @ExistingDeletedLegCosts TABLE
(
	[LegCostID] BIGINT NOT NULL,
	[LaneID] BIGINT NOT NULL,
	[ServiceModeID] BIGINT NOT NULL,
	[Cost] NVARCHAR(MAX)
)

INSERT INTO @ExistingDeletedLegCosts
(
	[LegCostID],
	[LaneID],
	[ServiceModeID],
	[Cost]
)
SELECT LC.[LegCostID],
	LC.[LaneID],
	LC.[ServiceModeID],
	LCT.[Cost]
FROM @LegCostTableType_Create_ID LCT
INNER JOIN dbo.LegCost LC ON LCT.LaneID = LC.LaneID AND LCT.ServiceModeID = LC.ServiceModeID

DECLARE @LegCostTableType_Update LegCostTableType_Update;

INSERT INTO @LegCostTableType_Update
(
	[LegCostID],
	[Cost]
)
SELECT [LegCostID],
	[Cost]
FROM @ExistingDeletedLegCosts

EXEC [dbo].[LegCost_Update] @LegCostTableType_Update;

DECLARE @LegCost table
(
	[LegCostID] [bigint] NOT NULL,
	[LaneID] [bigint] NOT NULL,
	[ServiceModeID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @LegCostID table
(
	[LaneID] [bigint] NOT NULL,
	[ServiceModeID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @NewRecords table
(
	[LaneID] [bigint] NOT NULL,
	[ServiceModeID] [bigint] NOT NULL
)

INSERT INTO @NewRecords
(
	[LaneID],
	[ServiceModeID]
)
SELECT [LaneID], [ServiceModeID] FROM @LegCostTableType_Create_ID
EXCEPT
SELECT [LaneID], [ServiceModeID] FROM @ExistingDeletedLegCosts

INSERT INTO @LegCostID
(
	[LaneID],
	[ServiceModeID],
	[Cost]
)
SELECT LC.[LaneID],
	LC.[ServiceModeID],
	LC.[Cost]
FROM @LegCostTableType_Create_ID LC
INNER JOIN @NewRecords N ON LC.[LaneID] = N.[LaneID]
	AND LC.[ServiceModeID] = N.[ServiceModeID]

DECLARE @LaneVersionID table
(
	[LaneID] [bigint] NOT NULL,
	[LaneVersionID] [bigint] NOT NULL
)

INSERT INTO @LaneVersionID
(
	[LaneID],
	[LaneVersionID]
)
SELECT [LaneID],
	[LaneVersionID]
FROM [dbo].[Lane_History]
WHERE [IsLatestVersion] = 1
AND [LaneID] IN (SELECT DISTINCT [LaneID] FROM @LegCostID)

DECLARE @ServiceModeVersionID table
(
	[ServiceModeID] [bigint] NOT NULL,
	[ServiceModeVersionID] [bigint] NOT NULL
)

INSERT INTO @ServiceModeVersionID
(
	[ServiceModeID],
	[ServiceModeVersionID]
)
SELECT [ServiceModeID],
	[ServiceModeVersionID]
FROM [dbo].[ServiceMode_History]
WHERE [IsLatestVersion] = 1
AND [ServiceModeID] IN (SELECT DISTINCT [ServiceModeID] FROM @LegCostID)

INSERT INTO [dbo].[LegCost]
(
	[LaneID],
	[ServiceModeID],
	[Cost],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.LegCostID,
	 INSERTED.LaneID,
	 INSERTED.[ServiceModeID],
	 INSERTED.Cost
INTO @LegCost
(
	[LegCostID],
	[LaneID],
	[ServiceModeID],
	[Cost]
)
SELECT [LaneID],
	[ServiceModeID],
	[Cost],
	1,
	1
FROM @LegCostID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[LegCost_History]
(
	[LegCostID],
	[LaneVersionID],
	[ServiceModeVersionID],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT LC.[LegCostID],
	 LVID.[LaneVersionID],
	 SMVID.[ServiceModeVersionID],
	 LC.[Cost],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 'P&C System',
	 ''
FROM @LegCost LC
INNER JOIN @LaneVersionID LVID ON LC.[LaneID] = LVID.[LaneID]
INNER JOIN @ServiceModeVersionID SMVID ON LC.ServiceModeID = SMVID.ServiceModeID

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LegCost_Insert_Bulk]
	@LegCostTableType LegCostTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @LegCostTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @LegCost table
(
	[LegCostID] [bigint] NOT NULL,
	[LaneID] [bigint] NOT NULL,
	[ServiceModeID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @LegCostWithLaneIDServiceLevelID table
(
	[LaneID] [bigint] NOT NULL,
	[ServiceModeID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL
)

DECLARE @LaneVersionID table
(
	[LaneID] [bigint] NOT NULL,
	[LaneVersionID] [bigint] NOT NULL
)

DECLARE @ServiceModeVersionID table
(
	[ServiceModeID] [bigint] NOT NULL,
	[ServiceModeVersionID] [bigint] NOT NULL
)

INSERT INTO @LegCostWithLaneIDServiceLevelID
(
	[LaneID],
	[ServiceModeID],
	[Cost]
)
SELECT L.[LaneID],
	SM.[ServiceModeID],
	LCTT.[Cost]
FROM @LegCostTableType LCTT
INNER JOIN [dbo].[Terminal] O ON LCTT.[OriginTerminalCode] = O.[TerminalCode]
INNER JOIN [dbo].[Terminal] D ON LCTT.[DestinationTerminalCode] = D.[TerminalCode]
INNER JOIN [dbo].[ServiceOffering] SO ON LCTT.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID] AND SL.[ServiceLevelCode] = LCTT.[ServiceLevelCode]
INNER JOIN [dbo].[Lane] L ON L.[OriginTerminalID] = O.[TerminalID] AND L.[DestinationTerminalID] = D.[TerminalID] AND L.[ServiceLevelID] = SL.[ServiceLevelID]
INNER JOIN [dbo].[ServiceMode] SM ON SO.[ServiceOfferingID] = SM.[ServiceOfferingID] AND SM.[ServiceModeCode] = LCTT.[ServiceModeCode]

INSERT INTO @LaneVersionID
(
	[LaneID],
	[LaneVersionID]
)
SELECT [LaneID],
	[LaneVersionID]
FROM [dbo].[Lane_History]
WHERE [IsLatestVersion] = 1
AND [LaneID] IN (SELECT DISTINCT [LaneID] FROM @LegCostWithLaneIDServiceLevelID)

INSERT INTO @ServiceModeVersionID
(
	[ServiceModeID],
	[ServiceModeVersionID]
)
SELECT [ServiceModeID],
	[ServiceModeVersionID]
FROM [dbo].[ServiceMode_History]
WHERE [IsLatestVersion] = 1
AND [ServiceModeID] IN (SELECT DISTINCT [ServiceModeID] FROM @LegCostWithLaneIDServiceLevelID)

INSERT INTO [dbo].[LegCost]
(
	[LaneID],
	[ServiceModeID],
	[Cost],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.LegCostID,
	 INSERTED.LaneID,
	 INSERTED.[ServiceModeID],
	 INSERTED.Cost
INTO @LegCost
(
	[LegCostID],
	[LaneID],
	[ServiceModeID],
	[Cost]
)
SELECT [LaneID],
	[ServiceModeID],
	[Cost],
	1,
	1
FROM @LegCostWithLaneIDServiceLevelID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[LegCost_History]
(
	[LegCostID],
	[LaneVersionID],
	[ServiceModeVersionID],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT LC.[LegCostID],
	 LVID.[LaneVersionID],
	 SMVID.[ServiceModeVersionID],
	 LC.[Cost],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @LegCost LC
INNER JOIN @LaneVersionID LVID ON LC.[LaneID] = LVID.[LaneID]
INNER JOIN @ServiceModeVersionID SMVID ON LC.[ServiceModeID] = SMVID.[ServiceModeID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[LegCost_Update]
	@LegCostTableType_Update LegCostTableType_Update READONLY
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ROWCOUNT1 INT,@InputCount INT;

SELECT @InputCount = Count(*) FROM @LegCostTableType_Update;

BEGIN TRAN

DECLARE @LegCost table
(
	[LegCostVersionID] [bigint] NOT NULL,
	[LegCostID] [bigint] NOT NULL,
	[LaneVersionID] [bigint] NOT NULL,
	[ServiceModeVersionID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[VersionNum] [int] NOT NULL
)

INSERT INTO @LegCost
(
	[LegCostVersionID],
	[LegCostID],
	[LaneVersionID],
	[ServiceModeVersionID],
	[Cost],
	[IsActive],
	[IsInactiveViewable],
	[VersionNum]
)
SELECT LCH.[LegCostVersionID],
	LC.[LegCostID],
	LCH.[LaneVersionID],
	LCH.[ServiceModeVersionID],
	LC.[Cost],
	LCH.[IsActive],
	LCH.[IsInactiveViewable],
	LCH.[VersionNum]
FROM [dbo].[LegCost_History] LCH
INNER JOIN @LegCostTableType_Update LC ON LCH.[LegCostID] = LC.[LegCostID] AND LCH.[IsLatestVersion] = 1

UPDATE [dbo].[LegCost]
SET [Cost] = A.[Cost]
FROM @LegCostTableType_Update AS A
WHERE [dbo].[LegCost].[LegCostID] = A.[LegCostID]

UPDATE [dbo].[LegCost_History]
SET [IsLatestVersion] = 0
FROM @LegCost AS A
WHERE [dbo].[LegCost_History].[LegCostVersionID] = A.[LegCostVersionID]


INSERT INTO [dbo].[LegCost_History]
(
	[LegCostID],
	[LaneVersionID],
	[ServiceModeVersionID],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT LC.[LegCostID],
	 LC.[LaneVersionID],
	 LC.[ServiceModeVersionID],
	 LC.[Cost],
	 LC.[IsActive],
	 LC.[VersionNum] + 1,
	 1,
	 LC.[IsInactiveViewable],
	 GETUTCDATE(),
	 'P&C System',
	 ''
FROM @LegCost LC

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

IF (@ERROR1 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Migrate]

AS

DECLARE	@return_value int
EXEC	@return_value = [dbo].[Delete]

/****** ServiceOffering ******/

EXEC [dbo].[ServiceOffering_Insert] 'Freight';
EXEC [dbo].[ServiceOffering_Insert] 'SameDay';

/****** CurrencyExchange ******/

DECLARE @CurrencyExchangeTableType AS CurrencyExchangeTableType;

INSERT INTO @CurrencyExchangeTableType
(
    [CADtoUSD],
	[USDtoCAD]
)
SELECT 0.76, 1.32

EXEC [dbo].[CurrencyExchange_Insert_Bulk] @CurrencyExchangeTableType

/****** Currency ******/

DECLARE @CurrencyTableType AS CurrencyTableType;

INSERT INTO @CurrencyTableType
(
	[CurrencyName],
	[CurrencyCode]
)
SELECT 'Canadian Dollar', 'CAD'
UNION
SELECT 'US Dollar', 'USD'

EXEC [dbo].[Currency_Insert_Bulk] @CurrencyTableType

/****** Language ******/

DECLARE @LanguageTableType AS LanguageTableType;

INSERT INTO @LanguageTableType
(
	[LanguageName],
	[LanguageCode]
)
SELECT 'English', 'EN'
UNION
SELECT 'French', 'FR'

EXEC [dbo].[Language_Insert_Bulk] @LanguageTableType

/****** RequestType ******/

DECLARE @RequestTypeTableType AS RequestTypeTableType;

INSERT INTO @RequestTypeTableType
(
	[RequestTypeName],
	[ApplyToCustomerUnderReview],
	[ApplyToRevision],
	[AllowSalesCommitment]
)
--SELECT 'Add Lanes', 1, 1, 0
--UNION
SELECT 'Cost+', 0, 0, 0
UNION
SELECT 'Commitment', 0, 0, 1
UNION
SELECT 'Tender', 0, 0, 1
UNION
SELECT 'Revision', 0, 1, 0

EXEC [dbo].[RequestType_Insert_Bulk] @RequestTypeTableType

/****** RequestStatusType ******/

DECLARE @Managers NVARCHAR(MAX) = '["Sales Representative", "Pricing Manager", "Sales Coordinator", "Sales Manager", "Account Owner"]';
DECLARE @ManagersPricingAnalyst NVARCHAR(MAX) = '["Sales Representative", "Pricing Manager", "Sales Coordinator", "Sales Manager", "Account Owner", "Pricing Analyst"]';
DECLARE @ManagersCreditAnalyst NVARCHAR(MAX) = '["Sales Representative", "Pricing Manager", "Sales Coordinator", "Sales Manager", "Account Owner", "Credit Analyst"]';
DECLARE @ManagersCreditManager NVARCHAR(MAX) = '["Sales Representative", "Pricing Manager", "Sales Coordinator", "Sales Manager", "Account Owner", "Credit Manager", "Pricing Analyst"]';
DECLARE @ManagersPartnerCarrier NVARCHAR(MAX) = '["Sales Representative", "Pricing Manager", "Sales Coordinator", "Sales Manager", "Account Owner", "Partner Carrier", "Pricing Analyst"]';

DECLARE @RequestStatusTypeTableType RequestStatusTypeTableType
INSERT INTO @RequestStatusTypeTableType
(
	RequestStatusTypeName,
	NextRequestStatusType,
	AssignedPersona,
	Editor,
	QueuePersonas,
	IsSecondary,
	IsFinal
)
SELECT 'RRF Initiated', '["RRF Submitted", "RRF Archived", "RRF Cancelled"]', 'Sales Representative', 'Sales Representative', @Managers, 0, 0
UNION
SELECT 'RRF Submitted', '["Assign Pricing Analyst", "Pending Cost+ Approval", "Assign Credit Analyst"]', 'Sales Representative', 'System Calculator', @Managers, 0, 0
UNION
SELECT 'Assign Credit Analyst', '["Pending Credit Approval"]', 'System Calculator', 'System Calculator', @ManagersCreditAnalyst, 0, 0
UNION
SELECT 'Pending Credit Approval', '["Credit Approved", "Credit Declined"]', 'Credit Analyst', 'Credit Analyst', @ManagersCreditAnalyst, 0, 0
UNION
SELECT 'Credit Approved', '["Assign Pricing Analyst", "Pending Cost+ Approval"]', 'System Calculator', 'System Calculator', @Managers, 0, 0
UNION
SELECT 'Credit Declined', '["RRF Archived", "RRF Cancelled"]', 'Sales Representative', 'Sales Representative', @Managers, 0, 0
UNION
SELECT 'RRF Archived', '["RRF Reactivated", "RRF Cancelled"]', 'Sales Representative', 'Sales Representative', @Managers, 0, 0
UNION
SELECT 'RRF Cancelled', '[]', 'System Calculator', 'System Calculator', '[]', 0, 1
UNION
SELECT 'RRF Reactivated', '["RRF Initiated"]', 'System Calculator', 'System Calculator', @Managers, 0, 0
UNION
SELECT 'Pending Cost+ Approval', '["Cost+ Approved", "Cost+ Declined"]', 'Sales Manager', 'Sales Manager', @Managers, 0, 0
UNION
SELECT 'Cost+ Approved', '["Assign Pricing Analyst"]', 'System Calculator', 'System Calculator', @Managers, 0, 0
UNION
SELECT 'Cost+ Declined', '["RRF Archived", "RRF Cancelled", "RRF Submitted"]', 'Sales Representative', 'Sales Representative', @Managers, 0, 0
UNION
SELECT 'Assign Pricing Analyst', '["RRF with Pricing"]', 'System Calculator', 'System Calculator', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'RRF with Pricing', '["In Analysis", "RRF with Sales"]', 'Pricing Analyst', 'Pricing Analyst', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'RRF with Sales', '["RRF Archived", "RRF Cancelled", "RRF Submitted"]', 'Sales Representative', 'Sales Representative', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'In Analysis', '["Reassign to SCS", "With Pricing Engine", "Pending Sales Approval", "Pending Partner Carrier Approval", "Submitted to Publish", "RRF with Sales", "RRF Archived", "RRF Cancelled"]', 'Pricing Analyst', 'Pricing Analyst', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Reassign to SCS', '["RRF with Pricing"]', 'System Calculator', 'System Calculator', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'With Pricing Engine', '["In Analysis"]', 'System Calculator', 'System Calculator', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Pending Sales Approval', '["Ready for Publish", "Sales Declined"]', 'Sales Representative', 'System Calculator', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Sales Declined', '["In Analysis"]', 'Pricing Analyst', 'Pricing Analyst', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Ready for Publish', '["In Analysis"]', 'Pricing Analyst', 'Pricing Analyst', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Submitted to Publish', '["Pending Publishing"]', 'System Calculator', 'System Calculator', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Pending Partner Carrier Approval', '["Partner Carrier Approved", "Partner Carrier Declined"]', 'Partner Carrier', 'System Calculator', @ManagersPartnerCarrier, 0, 0
UNION
SELECT 'Partner Carrier Approved', '["In Analysis"]', 'System Calculator', 'System Calculator', @ManagersPartnerCarrier, 0, 0
UNION
SELECT 'Partner Carrier Declined', '["In Analysis"]', 'System Calculator', 'Pricing Analyst', @ManagersPartnerCarrier, 0, 0
UNION
SELECT 'Pending Publishing', '["Published Successfully", "Publishing Failed"]', 'System Calculator', 'System Calculator', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Published Successfully', '[]', 'System Calculator', 'System Calculator', @ManagersPricingAnalyst, 0, 1
UNION
SELECT 'Publishing Failed', '["In Analysis"]', 'System Calculator', 'System Calculator', @ManagersPricingAnalyst, 0, 0
UNION
SELECT 'Pending DRM Approval', '["DRM Approved", "DRM Declined"]', 'Sales Manager', 'N/A', @ManagersPricingAnalyst, 1, 0
UNION
SELECT 'DRM Approved', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1
UNION
SELECT 'DRM Declined', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1
UNION
SELECT 'Pending PCR Approval', '["PCR Approved", "PCR Declined"]', 'Sales Manager', 'N/A', @ManagersPricingAnalyst, 1, 0
UNION
SELECT 'PCR Approved', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1
UNION
SELECT 'PCR Declined', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1
UNION
SELECT 'Pending PC Approval', '["PC Approved", "PC Declined"]', 'Sales Manager', 'N/A', @ManagersPricingAnalyst, 1, 0
UNION
SELECT 'PC Approved', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1
UNION
SELECT 'PC Declined', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1
UNION
SELECT 'Pending EPT Approval', '["EPT Approved", "EPT Declined"]', 'Credit Manager', 'N/A', @ManagersCreditManager, 1, 0
UNION
SELECT 'EPT Approved', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1
UNION
SELECT 'EPT Declined', '[]', 'System Calculator', 'N/A', @ManagersPricingAnalyst, 1, 1

EXEC [dbo].[RequestStatusType_Insert_Bulk] @RequestStatusTypeTableType

/****** FreightClass ******/

DECLARE @FreightClassTableType AS FreightClassTableType;

INSERT INTO @FreightClassTableType
(
	[FreightClassName]
)
SELECT '50'
UNION
SELECT '55'
UNION
SELECT '60'
UNION
SELECT '65'
UNION
SELECT '70'
UNION
SELECT '77.5'
UNION
SELECT '85'
UNION
SELECT '92.5'
UNION
SELECT '100'
UNION
SELECT '110'
UNION
SELECT '125'
UNION
SELECT '150'
UNION
SELECT '175'
UNION
SELECT '200'
UNION
SELECT '250'
UNION
SELECT '300'
UNION
SELECT '400'
UNION
SELECT '500'

EXEC [dbo].[FreightClass_Insert_Bulk] @FreightClassTableType

--/****** Persona ******/

DECLARE @PersonaTableType PersonaTableType;

INSERT INTO @PersonaTableType ([PersonaName])
SELECT 'Admin'
UNION
SELECT 'Credit Analyst'
UNION
SELECT 'Credit Manager'
UNION
SELECT 'Partner Carrier'
UNION
SELECT 'Pricing Analyst'
UNION
SELECT 'Pricing Manager'
UNION
SELECT 'Review Analyst'
UNION
SELECT 'Sales Coordinator'
UNION
SELECT 'Sales Manager'
UNION
SELECT 'Sales Representative'
UNION
SELECT 'Spot Quote Analyst'
UNION
SELECT 'VP of Pricing'

EXEC [dbo].[Persona_Insert_Bulk] @PersonaTableType

/****** User ******/

DECLARE @UserTableType AS UserTableType;

INSERT INTO @UserTableType
(
	[UserName],
	[UserEmail],
	[PersonaName],
	[CanProcessSCS],
	[CanProcessRequests],
	[CanProcessReviews],
	[UserManagerEmail]
)

SELECT 'Christopher Oliphant', 'christopher.oliphant@dayandrossinc.ca','Sales Representative', 1, 1, 1, 'kyle.wong@dayandrossinc.ca'
UNION
SELECT 'Sabhya Sachdeva', 'sabhya.sachdeva@dayandrossinc.ca', 'Pricing Analyst', 1, 1, 1, 'alex.little@dayandrossinc.ca'
UNION
SELECT 'Mohammad Khalil', 'mohammad.khalil@dayandrossinc.ca', 'Pricing Analyst', 1, 1, 1, 'alex.little@dayandrossinc.ca'
UNION
SELECT 'Alex Little', 'alex.little@dayandrossinc.ca', 'Pricing Manager', 1, 1, 1, NULL
UNION
SELECT 'Ish Habib', 'ish.habib@dayandrossinc.ca','Sales Representative', 1, 1, 1, 'kyle.wong@dayandrossinc.ca'
UNION
SELECT 'Kyle Wong', 'kyle.wong@dayandrossinc.ca', 'Sales Manager', 1, 1, 1, NULL
UNION
SELECT 'CLARK, JOLENE R.', 'jrclark@dayandrossinc.ca', 'Pricing Analyst', 1, 1, 1, 'angela.villeneuve@dayandrossinc.ca'
UNION
SELECT 'VILLENEUVE, ANGELA D.', 'angela.villeneuve@dayandrossinc.ca', 'Pricing Manager', 1, 1, 1, NULL
UNION
SELECT 'WILSON, LEEANN', 'leeann.wilson@dayross.com','Pricing Manager', 1, 1, 1, NULL
UNION
SELECT 'CARVELL, FRANK B.', 'FBCARVEL@DAYANDROSSINC.CA','Pricing Manager', 1, 1, 1, NULL
UNION
SELECT 'CRANN, TONY', 'TRCRANN@DAYANDROSSINC.CA','Pricing Manager', 1, 1, 1, NULL
UNION
SELECT PersonaName + ' temp',
	PersonaName + '@dayandrossinc.ca',
	PersonaName,
	 1, 1, 1,
	 CASE WHEN PersonaName = 'Credit Analyst' THEN 'Credit Manager@dayandrossinc.ca'
		WHEN PersonaName = 'Pricing Analyst' THEN 'Pricing Manager@dayandrossinc.ca'
		WHEN PersonaName = 'Review Analyst' THEN 'Pricing Manager@dayandrossinc.ca'
		WHEN PersonaName = 'Review Analyst' THEN 'Pricing Manager@dayandrossinc.ca'
		WHEN PersonaName = 'Sales Coordinator' THEN 'Sales Manager@dayandrossinc.ca'
		WHEN PersonaName = 'Sales Representative' THEN 'Sales Manager@dayandrossinc.ca'
		WHEN PersonaName = 'Spot Quote Analyst' THEN 'Pricing Manager@dayandrossinc.ca'
		ELSE NULL END AS [UserManagerEmail]
FROM dbo.Persona

EXEC [dbo].[User_Insert_Bulk] @UserTableType


/****** Country ******/

DECLARE @CountryTableType AS CountryTableType;

INSERT INTO @CountryTableType
(
	[CountryName],
	[CountryCode]
)
SELECT DISTINCT [CountryName],
	[CountryCode]
FROM [staging].[Country]
WHERE [CountryCode] IN ('CA', 'US')

EXEC [dbo].[Country_Insert_Bulk] @CountryTableType

/****** Region ******/

DECLARE @RegionTableType AS RegionTableType;

INSERT INTO @RegionTableType
(
	[RegionName],
	[RegionCode],
	[CountryCode]
)
SELECT DISTINCT [RegionName],
	[RegionCode],
	[CountryCode]
FROM [staging].[Region]

EXEC [dbo].[Region_Insert_Bulk] @RegionTableType

/****** Province ******/

DECLARE @ProvinceTableType AS ProvinceTableType;

INSERT INTO @ProvinceTableType
(
	[ProvinceName],
	[ProvinceCode],
	[CountryCode],
	[RegionCode]
)
SELECT DISTINCT [ProvinceName],
	[ProvinceCode],
	[CountryCode],
	[RegionCode]
FROM [staging].[Province]

EXEC [dbo].[Province_Insert_Bulk] @ProvinceTableType

/****** City ******/

DECLARE @CityTableType AS CityTableType;

INSERT INTO @CityTableType
(
	[CityName],
	[ProvinceCode],
	[CountryCode]
)
SELECT DISTINCT [CityName],
	[ProvinceCode],
	[CountryCode]
FROM [staging].[City]

EXEC [dbo].[City_Insert_Bulk] @CityTableType

/****** Terminal ******/

UPDATE staging.Terminal
SET RegionCode = 'ONT'
WHERE staging.Terminal.RegionCode IN ('INT', 'TOR')

DECLARE @TerminalTableType AS TerminalTableType;

INSERT INTO @TerminalTableType
(
	[TerminalName],
	[TerminalCode],
	[CityName],
	[ProvinceCode],
	[CountryCode],
	[RegionCode]
)
SELECT DISTINCT [TerminalName],
	[TerminalCode],
	[CityName],
	[ProvinceCode],
	[CountryCode],
	[RegionCode]
FROM [staging].[Terminal]

EXEC [dbo].[Terminal_Insert_Bulk] @TerminalTableType

/****** TerminalCostWeightBreakLevel ******/

DECLARE @TerminalCostWeightBreakLevelTableType AS CostWeightBreakLevelTableType;

INSERT INTO @TerminalCostWeightBreakLevelTableType
(
	[ServiceOfferingName],
    [WeightBreakLevelName],
    [WeightBreakLowerBound]
)
SELECT DISTINCT [ServiceOfferingName],
	[LevelName],
	[LevelLowerBound]
FROM [staging].[TerminalCostFreight]

EXEC [dbo].[TerminalCostWeightBreakLevel_Insert_Bulk] @TerminalCostWeightBreakLevelTableType

/****** TerminalCost ******/

DECLARE @TerminalCostTableType AS TerminalCostTableType;

INSERT INTO @TerminalCostTableType
(
	[ServiceOfferingName],
	[TerminalCode],
	[Cost],
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor]
)
SELECT DISTINCT C.[ServiceOfferingName],
	C.[TerminalCode],
	(SELECT C.Cost AS [CostComponents.CostByWeightBreak], C.[CrossDockCost] AS [CostComponents.CrossDockCost]  FOR JSON PATH, WITHOUT_ARRAY_WRAPPER) AS Cost,
	C.[IsIntraRegionMovementEnabled],
	C.[IntraRegionMovementFactor]
FROM
(SELECT DISTINCT
  TCF.[ServiceOfferingName],
  TCF.TerminalCode, '{' +
  STUFF((
    SELECT ', ' + '"' +  CAST(A.[WeightBreakLevelID] AS VARCHAR(MAX)) + '"' + ':' + CAST(C.Cost AS VARCHAR(MAX))
    FROM dbo.TerminalCostWeightBreakLevel A
	INNER JOIN dbo.ServiceOffering B ON A.ServiceOfferingID = B.ServiceOfferingID
	INNER JOIN staging.TerminalCostFreight C ON A.WeightBreakLowerBound = C.LevelLowerBound AND B.ServiceOfferingName = C.ServiceOfferingName
    WHERE (A.[ServiceOfferingID] = TCWB.[ServiceOfferingID] AND C.TerminalCode = TCF.TerminalCode)
    FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
  ,1,2,'') + '}' AS Cost,
  	(CASE WHEN TCF.[IsIntraRegionMovementEnabled] = 1 THEN 1 ELSE 0 END) AS IsIntraRegionMovementEnabled,
	(CASE WHEN TCF.[IsIntraRegionMovementEnabled] = 1 THEN 2 ELSE 1 END) AS IntraRegionMovementFactor,
	'' AS CrossDockCost
FROM dbo.TerminalCostWeightBreakLevel TCWB
INNER JOIN dbo.ServiceOffering SO ON TCWB.ServiceOfferingID = SO.ServiceOfferingID
INNER JOIN staging.TerminalCostFreight TCF ON TCWB.WeightBreakLowerBound = LevelLowerBound AND SO.ServiceOfferingName = TCF.ServiceOfferingName
GROUP BY TCWB.[ServiceOfferingID], TCF.[ServiceOfferingName], TCF.TerminalCode, TCF.[IsIntraRegionMovementEnabled]) AS C
INNER JOIN [dbo].[Terminal] T ON C.[TerminalCode] = T.[TerminalCode]
UNION
SELECT DISTINCT J.[ServiceOfferingName],
	J.[TerminalCode],
	(SELECT '' AS [CostComponents.CostByWeightBreak], (SELECT CrossDockCostPerWeightUnit, CrossDockCostMin, CrossDockCostMax FROM [staging].[TerminalCostSameday] TC WHERE TC.TerminalCode=J.TerminalCode FOR JSON AUTO, WITHOUT_ARRAY_WRAPPER) AS [CostComponents.CrossDockCost]  FOR JSON PATH, WITHOUT_ARRAY_WRAPPER) AS Cost,
	0 AS IsIntraRegionMovementEnabled,
	1 AS IntraRegionMovementFactor
FROM [staging].[TerminalCostSameday] J
INNER JOIN [dbo].[Terminal] T ON J.[TerminalCode] = T.[TerminalCode]

EXEC [dbo].[TerminalCost_Insert_Bulk] @TerminalCostTableType

/****** ServiceMode ******/

DECLARE @ServiceModeTableType AS ServiceModeTableType;

INSERT INTO @ServiceModeTableType
(
	[ServiceOfferingName],
	[ServiceModeName],
    [ServiceModeCode]
)
SELECT DISTINCT SM.[ServiceOfferingName],
	SM.[ServiceModeName],
	SM.[ServiceModeCode]
FROM [staging].[ServiceMode] SM

EXEC [dbo].[ServiceMode_Insert_Bulk] @ServiceModeTableType

/****** ServiceLevel ******/

DECLARE @ServiceLevelTableType AS ServiceLevelTableType;

INSERT INTO @ServiceLevelTableType
(
	[ServiceOfferingName],
	[ServiceLevelName],
    [ServiceLevelCode]
)
SELECT DISTINCT SL.[ServiceOfferingName],
	SL.[ServiceLevelName],
	SL.[ServiceLevelCode]
FROM [staging].[ServiceLevel] SL

EXEC [dbo].[ServiceLevel_Insert_Bulk] @ServiceLevelTableType

/****** SpeedSheet ******/

DECLARE @SpeedSheetTableType AS SpeedSheetTableType;

INSERT INTO @SpeedSheetTableType
(
	[ServiceOfferingName],
    [Margin],
	[MinDensity],
    [MaxDensity]
)
SELECT 'Freight', 40, 6, 78
UNION
SELECT 'SameDay', 32, 6.2, 75.8

EXEC [dbo].[SpeedSheet_Insert_Bulk] @SpeedSheetTableType

/****** Unit ******/

DECLARE @UnitTableType AS UnitTableType;

INSERT INTO @UnitTableType
(
    [UnitSymbol],
	[UnitName],
	[UnitType]
)
SELECT 'CAD', 'Canadian Dollars', 'Y'
UNION
SELECT 'CCWT', 'Hundredweight', 'W'
UNION
SELECT 'Day', 'Day', 'T'
UNION
SELECT 'FLT', 'Flat', 'T'
UNION
SELECT 'FT', 'Foot', 'L'
UNION
SELECT 'FT3', 'Cubic Feet', 'C'
UNION
SELECT 'KM', 'Kilometer', 'D'
UNION
SELECT 'LB', 'LB', 'W'
UNION
SELECT 'M', 'Meter', 'L'
UNION
SELECT 'M3', 'Cubic Meter', 'C'
UNION
SELECT 'PC', 'Piece', 'I'
UNION
SELECT 'PLT', 'Pallets', 'P'

EXEC [dbo].[Unit_Insert_Bulk] @UnitTableType

/****** WeightBreakHeader ******/

DECLARE @WeightBreakHeaderTableType AS WeightBreakHeaderTableType;

INSERT INTO @WeightBreakHeaderTableType
(
	[ServiceOfferingName],
    [WeightBreakHeaderName],
    [UnitFactor],
    [MaximumValue],
    [AsRating],
	[HasMin],
	[HasMax],
    [BaseRate],
    [Levels],
    [ServiceLevelCode],
    [UnitSymbol]
)

SELECT SO.ServiceOfferingName,
	'CCWT Weigh Break Header',
	100,
	45000,
	1,
	1,
	1,
	1,
	'[{"LevelLowerBound":0,"LevelName":"CCWT 0","IsMin":1, "IsMax":0},{"LevelLowerBound":1000,"LevelName":"CCWT 1000","IsMin":0, "IsMax":0}, {"LevelLowerBound":5000,"LevelName":"CCWT 5000","IsMin":0, "IsMax":0}, {"LevelLowerBound":10000,"LevelName":"CCWT 10000","IsMin":0, "IsMax":0}, {"LevelLowerBound":20000,"LevelName":"CCWT 20000","IsMin":0, "IsMax":0}, {"LevelLowerBound":30000,"LevelName":"CCWT 30000","IsMin":0, "IsMax":0}, {"LevelLowerBound":45000,"LevelName":"CCWT 45000","IsMin":0, "IsMax":1}]',
	SL.ServiceLevelCode,
	U.UnitSymbol
FROM dbo.Unit U,
dbo.ServiceLevel SL
INNER JOIN dbo.ServiceOffering SO ON SL.ServiceOfferingID = SO.ServiceOfferingID
WHERE U.UnitName Like 'Hundredweight'

EXEC [dbo].[WeightBreakHeader_Insert_Bulk] @WeightBreakHeaderTableType

/****** RequestSectionLanePointType ******/

DECLARE @RequestSectionLanePointTypeTableType AS RequestSectionLanePointTypeTableType;

INSERT INTO @RequestSectionLanePointTypeTableType
(
	[ServiceOfferingName],
    [IsDensityPricing],
    [RequestSectionLanePointTypeName],
    [LocationHierarchy],
	[IsGroupType],
	[IsPointType]
)

SELECT 'Freight', 1, 'Postal Code', 7, 0, 1
UNION
SELECT 'Freight', 1, 'Service Point', 6, 0, 1
UNION
SELECT 'Freight', 1, 'Basing Point', 5, 0, 1
UNION
SELECT 'Freight', 1, 'Terminal', 4, 0, 1
UNION
SELECT 'Freight', 1, 'Province', 3, 1, 0
UNION
SELECT 'Freight', 1, 'Region', 2, 1, 0
UNION
SELECT 'Freight', 1, 'Country', 1, 1, 0
UNION
SELECT 'SameDay', 1, 'Postal Code', 7, 0, 1
UNION
SELECT 'SameDay', 1, 'Service Point', 6, 0, 1
UNION
SELECT 'SameDay', 1, 'Zone', 5, 0, 1
UNION
SELECT 'SameDay', 1, 'Terminal', 4, 0, 1
UNION
SELECT 'SameDay', 1, 'Province', 3, 1, 0
UNION
SELECT 'SameDay', 1, 'Region', 2, 1, 0
UNION
SELECT 'SameDay', 1, 'Country', 1, 1, 0
UNION
SELECT 'Freight', 0, 'Postal Code', 7, 0, 1
UNION
SELECT 'Freight', 0, 'Service Point', 6, 0, 1
UNION
SELECT 'Freight', 0, 'Basing Point', 5, 0, 1
UNION
SELECT 'Freight', 0, 'Terminal', 4, 0, 1
UNION
SELECT 'Freight', 0, 'Province', 3, 1, 1
UNION
SELECT 'Freight', 0, 'Region', 2, 1, 1
UNION
SELECT 'Freight', 0, 'Country', 1, 1, 1
UNION
SELECT 'SameDay', 0, 'Postal Code', 7, 0, 1
UNION
SELECT 'SameDay', 0, 'Service Point', 6, 0, 1
UNION
SELECT 'SameDay', 0, 'Zone', 5, 0, 1
UNION
SELECT 'SameDay', 0, 'Terminal', 4, 0, 1
UNION
SELECT 'SameDay', 0, 'Province', 3, 1, 1
UNION
SELECT 'SameDay', 0, 'Region', 2, 1, 1
UNION
SELECT 'SameDay', 0, 'Country', 1, 1, 1

EXEC [dbo].[RequestSectionLanePointType_Insert_Bulk] @RequestSectionLanePointTypeTableType

/****** EquipmentType ******/

DECLARE @EquipmentTypeTableType AS EquipmentTypeTableType;

INSERT INTO @EquipmentTypeTableType
(
	[EquipmentTypeCode],
	[EquipmentTypeName]
)
SELECT 'CH', 'CHASSIS'
UNION
SELECT 'CN', 'CONTAINER'
UNION
SELECT 'CO', 'CONVERTER'
UNION
SELECT 'CR', 'CRANE'
UNION
SELECT 'CU', 'CUBE VAN'
UNION
SELECT 'CV', 'CARGO VAN'
UNION
SELECT 'DC', 'DAY CAB'
UNION
SELECT 'FT', 'FLAT BED TRAILER'
UNION
SELECT 'GN', 'GENSET'
UNION
SELECT 'PJ', 'ELECTRIC PALLET JACK'
UNION
SELECT 'SC', 'SLEEPER CAB'
UNION
SELECT 'SD', 'SINGLE DROP TRAILER'
UNION
SELECT 'ST', 'STRAIGHT TRUCK / 5 TONNE'
UNION
SELECT 'SV', 'SUPER VAN'
UNION
SELECT 'TA', 'TRAILER - HEATED/INSUL./VENT.'
UNION
SELECT 'TF', 'TRAILER - DRY FREIGHT'
UNION
SELECT 'TR', 'PICKUP TRUCK / HALF TONNE'
UNION
SELECT 'TW', 'TRAILER - REFRIGERATED'

EXEC [dbo].[EquipmentType_Insert_Bulk] @EquipmentTypeTableType

/****** RateBase ******/

DECLARE @RateBaseTableType AS RateBaseTableType;

INSERT INTO @RateBaseTableType
(
	[RateBaseName]
)
SELECT 'FCAC'
UNION
SELECT 'CanRate'

EXEC [dbo].[RateBase_Insert_Bulk] @RateBaseTableType

/****** SubServiceLevel ******/

DECLARE @SubServiceLevelTableType AS SubServiceLevelTableType;

INSERT INTO @SubServiceLevelTableType
(
	[ServiceLevelID],
	[SubServiceLevelName],
	[SubServiceLevelCode]
)
SELECT SL.ServiceLevelID, SL.ServiceLevelName, SL.ServiceLevelCode
FROM dbo.ServiceLevel SL

EXEC [dbo].[SubServiceLevel_Insert_Bulk] @SubServiceLevelTableType

/****** UserServiceLevel ******/

DECLARE @UserServiceLevelTableType UserServiceLevelTableType;
INSERT INTO @UserServiceLevelTableType
(
	[UserID],
	[ServiceLevelID]
)
SELECT U.[UserID], SL.[ServiceLevelID]
FROM dbo.[User] U
INNER JOIN dbo.[User_History] UH ON U.[UserID] = UH.[UserID] AND UH.IsLatestVersion = 1
CROSS JOIN dbo.ServiceLevel SL

EXEC dbo.UserServiceLevel_Insert_Bulk @UserServiceLevelTableType

/****** Account ******/

DECLARE @AccountTableType AS AccountTableType;

INSERT INTO @AccountTableType
(
    [AccountNumber],
	[AccountName],
	[AddressLine1],
    [AddressLine2],
	[CityID],
    [PostalCode],
	[Phone],
    [ContactName],
    [ContactTitle],
    [Email],
    [Website]
)
SELECT A.[AccountNumber]L,
	A.[AccountName],
	A.[AddressLine1],
    A.[AddressLine2],
	C.[CityID],
    A.[PostalCode],
	A.[Phone],
    A.[ContactName],
    A.[ContactTitle],
    A.[Email],
    A.[Website]
FROM staging.Account A
INNER JOIN dbo.City C ON A.CityName = C.CityName
INNER JOIN dbo.Province P ON C.ProvinceID = P.ProvinceID AND A.ProvinceCode = P.ProvinceCode

EXEC [dbo].[Account_Insert_Bulk] @AccountTableType

/****** AccountTree ******/

DECLARE @AccountTreeTableType AS AccountTreeTableType;

INSERT INTO @AccountTreeTableType
(
	[AccountID]
)
SELECT [AccountID]
FROM dbo.Account

EXEC [dbo].[AccountTree_Insert_Bulk] @AccountTreeTableType

/****** Basing Points ******/

UPDATE staging.LocationTree
SET BaseServicePointName = BaseServicePointName + ' ' + ProvinceCode
WHERE staging.LocationTree.BaseServicePointName IN
(
SELECT BaseServicePointName
FROM staging.LocationTree
WHERE BaseServicePointName IS NOT NULL
GROUP BY BaseServicePointName
HAVING COUNT (DISTINCT ProvinceCode) > 1
)

DECLARE @BasingPointTableType BasingPointTableType

INSERT INTO @BasingPointTableType
(
	BasingPointName,
	ProvinceCode,
	CountryCode
)
SELECT DISTINCT BaseServicePointName,
	ProvinceCode,
	CountryCode
FROM staging.LocationTree
WHERE BaseServicePointName IS NOT NULL

EXEC dbo.BasingPoint_Insert_Bulk @BasingPointTableType

/****** ServicePoint ******/

DECLARE @ServicePointTableType AS ServicePointTableType;

INSERT INTO @ServicePointTableType
(
	[ServicePointName],
	[BasingPointName],
	[ProvinceCode]
)
SELECT DISTINCT [ServicePointName],
	[BaseServicePointName],
	[ProvinceCode]
FROM [staging].[LocationTree]
WHERE [TerminalCode] IN (SELECT [TerminalCode] FROM dbo.Terminal)
AND ([ServicePointName] + [ProvinceCode]) NOT IN
(SELECT ServicePointName + ProvinceCode
FROM staging.LocationTree
WHERE [TerminalCode] IN (SELECT [TerminalCode] FROM dbo.Terminal)
GROUP BY ServicePointName, ProvinceCode
HAVING COUNT(DISTINCT TerminalCode) > 1)

EXEC [dbo].[ServicePoint_Insert_Bulk] @ServicePointTableType

/****** TerminalServicePoint ******/

DECLARE @TerminalServicePointTableType AS TerminalServicePointTableType;

INSERT INTO @TerminalServicePointTableType
(
	[TerminalCode],
	[ServicePointName],
	[ServicePointProvinceCode],
	[ExtraMiles]
)
SELECT DISTINCT [TerminalCode],
	[ServicePointName],
	[ProvinceCode],
	0
FROM [staging].[LocationTree]
WHERE [TerminalCode] IN (SELECT [TerminalCode] FROM dbo.Terminal)
AND ([ServicePointName] + [ProvinceCode]) NOT IN
(SELECT ServicePointName + ProvinceCode
FROM staging.LocationTree
WHERE [TerminalCode] IN (SELECT [TerminalCode] FROM dbo.Terminal)
GROUP BY ServicePointName, ProvinceCode
HAVING COUNT(DISTINCT TerminalCode) > 1)

EXEC [dbo].[TerminalServicePoint_Insert_Bulk] @TerminalServicePointTableType

/****** PostalCode ******/

DECLARE @PostalCodeTableType AS PostalCodeTableType;

INSERT INTO @PostalCodeTableType
(
	[PostalCodeName],
	[ServicePointName],
	[ProvinceCode]
)
SELECT DISTINCT [PostalCodeName],
	[ServicePointName],
	[ProvinceCode]
FROM [staging].[PostalCode]
WHERE ([ServicePointName] + [ProvinceCode]) IN
(SELECT SP.ServicePointName + P.ProvinceCode
FROM dbo.ServicePoint SP
INNER JOIN dbo.Province P ON SP.ProvinceID = P.ProvinceID)

EXEC [dbo].[PostalCode_Insert_Bulk] @PostalCodeTableType

/****** Lane ******/

DECLARE @LaneTableType AS LaneTableType;

DECLARE @TempLaneTableType table
(
	[ServiceOfferingName]      NVARCHAR(50) NOT NULL,
    [OriginTerminalCode] NVARCHAR(3) NOT NULL,
	[DestinationTerminalCode] NVARCHAR(3) NOT NULL
)

INSERT INTO @TempLaneTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode]
)
SELECT DISTINCT L.[ServiceOfferingName],
	L.[OriginTerminalCode],
	L.[DestinationTerminalCode]
FROM [staging].[Lane] L
INNER JOIN [dbo].[Terminal] O ON L.[OriginTerminalCode] = O.[TerminalCode]
INNER JOIN [dbo].[Terminal] D ON L.[DestinationTerminalCode] = D.[TerminalCode]
UNION
SELECT Distinct [ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode]
FROM
(
SELECT DISTINCT [ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode]
FROM [staging].[DockRoute] A
WHERE [OriginTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND [DestinationTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
UNION
SELECT DISTINCT [ServiceOfferingName],
	[LegOriginTerminalCode] AS [OriginTerminalCode],
	[LegDestinationTerminalCode] AS [DestinationTerminalCode]
FROM [staging].[DockRoute] B
WHERE [LegOriginTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND [LegDestinationTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
UNION
SELECT DISTINCT [ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode]
FROM [staging].[LaneCost] E
WHERE [OriginTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND [DestinationTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
UNION
SELECT DISTINCT [ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode]
FROM [staging].[LegCostFreight] F
WHERE [OriginTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND [DestinationTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
UNION
SELECT DISTINCT [ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode]
FROM [staging].[LegCostSameday] G
WHERE [OriginTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND [DestinationTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
) AS C

INSERT INTO @LaneTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[IsHeadhaul]
)
SELECT TLTT.[ServiceOfferingName],
	TLTT.[OriginTerminalCode],
	TLTT.[DestinationTerminalCode],
	SL.[ServiceLevelCode],
	1
FROM @TempLaneTableType TLTT
INNER JOIN [dbo].[ServiceOffering] SO ON TLTT.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID]
--EXCEPT
--SELECT SO.[ServiceOfferingName],
--	O.TerminalCode,
--	D.TerminalCode,
--	SL.[ServiceLevelCode]
--FROM dbo.Lane L
--INNER JOIN dbo.Terminal O ON L.OriginTerminalID = O.TerminalID
--INNER JOIN dbo.Terminal D ON L.DestinationTerminalID = D.TerminalID
--INNER JOIN dbo.ServiceLevel SL ON L.ServiceLevelID = SL.ServiceLevelID
--INNER JOIN dbo.ServiceOffering SO ON SL.ServiceOfferingID = SO.ServiceOfferingID

EXEC [dbo].[Lane_Insert_Bulk] @LaneTableType

/****** BrokerContractCost ******/

DECLARE @BrokerContractCostTableType AS BrokerContractCostTableType;

WITH A AS (
SELECT DISTINCT
	BC.ServiceOfferingName,
	BC.TerminalCode,
	SL.ServiceLevelID,
	SL.ServiceLevelCode,
	BC.PickupDeliveryCount,
	(SELECT BCT.LevelLowerBound AS WeightBreakLowerBound, CAST (BCT.LevelLowerBound AS NVARCHAR(50)) AS WeightBreakLevelName, BCT.PickupDeliveryCost AS Cost FROM staging.BrokerContractCostFreight BCT WHERE BCT.PickupDeliveryCount > 0 AND BC.TerminalCode = BCT.TerminalCode AND BC.PickupDeliveryCount = BCT.PickupDeliveryCount FOR JSON AUTO) AS Cost
FROM staging.BrokerContractCostFreight BC
INNER JOIN dbo.ServiceOffering SO ON BC.ServiceOfferingName = SO.ServiceOfferingName
INNER JOIN dbo.ServiceLevel SL ON SO.ServiceOfferingID = SL.ServiceOfferingID
WHERE BC.TerminalCode IN (SELECT TerminalCode FROM dbo.Terminal)
	AND BC.PickupDeliveryCount > 0
GROUP BY BC.ServiceOfferingName, BC.TerminalCode, SL.ServiceLevelCode, SL.ServiceLevelID, BC.PickupDeliveryCount
),
B AS (
SELECT DISTINCT
	BC.ServiceOfferingName,
	BC.TerminalCode,
	BC.ServiceLevelCode,
	(SELECT BCT.LevelLowerBound AS WeightBreakLowerBound, CAST (BCT.LevelLowerBound AS NVARCHAR(50)) AS WeightBreakLevelName, BCT.PickupDeliveryCost AS Cost FROM staging.BrokerContractCostSameday BCT WHERE BC.TerminalCode = BCT.TerminalCode AND BC.ServiceLevelCode = BCT.ServiceLevelCode FOR JSON AUTO) AS Cost,
	BC.RateBase,
	BC.RateMax
FROM staging.BrokerContractCostSameday BC
WHERE BC.TerminalCode IN (SELECT TerminalCode FROM dbo.Terminal)
GROUP BY BC.ServiceOfferingName, BC.TerminalCode, BC.ServiceLevelCode, BC.RateBase, BC.RateMax)


INSERT INTO @BrokerContractCostTableType
(
	[ServiceOfferingName],
	[TerminalCode],
	[ServiceLevelCode],
	[Cost]
)
SELECT DISTINCT E.[ServiceOfferingName],
	E.[TerminalCode],
	E.[ServiceLevelCode],
	(SELECT E.CostByWeightBreakByPickupDeliveryCount AS [CostComponents.CostByWeightBreakByPickupDeliveryCount], E.[CostByWeightBreak] AS [CostComponents.CostByWeightBreak] FOR JSON PATH, WITHOUT_ARRAY_WRAPPER) AS Cost
FROM
(
SELECT DISTINCT A.ServiceOfferingName, A.TerminalCode, A.ServiceLevelID, A.ServiceLevelCode,
	(SELECT D.[PickupDeliveryCount], D.[Cost] FROM A AS D WHERE A.[TerminalCode] = D.[TerminalCode] AND A.ServiceLevelID = D.ServiceLevelID FOR JSON AUTO) AS CostByWeightBreakByPickupDeliveryCount,
	'' AS CostByWeightBreak
FROM A) AS E
UNION
SELECT DISTINCT E.[ServiceOfferingName],
	E.[TerminalCode],
	E.[ServiceLevelCode],
	(SELECT E.CostByWeightBreakByPickupDeliveryCount AS [CostComponents.CostByWeightBreakByPickupDeliveryCount], E.[CostByWeightBreak] AS [CostComponents.CostByWeightBreak] FOR JSON PATH, WITHOUT_ARRAY_WRAPPER) AS Cost
FROM
(SELECT DISTINCT B.[ServiceOfferingName],
	B.[TerminalCode],
	B.[ServiceLevelCode],
	'' AS CostByWeightBreakByPickupDeliveryCount,
	(SELECT D.[RateBase], D.[RateMax], D.[Cost] FROM B AS D WHERE B.[TerminalCode] = D.[TerminalCode] AND B.[ServiceLevelCode] = D.[ServiceLevelCode] FOR JSON AUTO, WITHOUT_ARRAY_WRAPPER) AS CostByWeightBreak
FROM B) AS E

EXEC [dbo].[BrokerContractCost_Insert_Bulk] @BrokerContractCostTableType

/****** LaneCostWeightBreakLevel ******/

DECLARE @LaneCostWeightBreakLevelTableType AS CostWeightBreakLevelTableType;

INSERT INTO @LaneCostWeightBreakLevelTableType
(
	[ServiceOfferingName],
    [WeightBreakLevelName],
    [WeightBreakLowerBound]
)
SELECT 'Freight', '0',  0
UNION
SELECT 'Freight', '1000',  1000
UNION
SELECT 'Freight', '2000',  2000
UNION
SELECT 'Freight', '5000',  5000
UNION
SELECT 'Freight', '10000',  10000
UNION
SELECT 'Freight', '20000',  20000
UNION
SELECT 'Freight', '30000',  30000
UNION
SELECT 'SameDay', '0',  0
UNION
SELECT 'SameDay', '25000',  25000
UNION
SELECT 'SameDay', '50000',  50000
UNION
SELECT 'SameDay', '100000',  100000
UNION
SELECT 'SameDay', '200000',  200000
UNION
SELECT 'SameDay', '500000',  500000
UNION
SELECT 'SameDay', '1000000',  1000000

EXEC [dbo].[LaneCostWeightBreakLevel_Insert_Bulk] @LaneCostWeightBreakLevelTableType

/****** LaneCost ******/

DECLARE @LaneCostTableType AS LaneCostTableType;

INSERT INTO @LaneCostTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[MinimumCost],
	[Cost],
	[IsHeadhaul]
)
SELECT LC.[ServiceOfferingName],
	LC.[OriginTerminalCode],
	LC.[DestinationTerminalCode],
	LC.[ServiceLevelCode],
	LC.[MinimumCost],
	A.Cost,
	1
FROM staging.LaneCost LC
INNER JOIN dbo.ServiceOffering SO ON LC.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN
(
SELECT
  [ServiceOfferingID], '{' +
  STUFF((
    SELECT ', ' + '"' +  CAST([WeightBreakLevelID] AS VARCHAR(MAX)) + '"' + ':' + CAST(0.100 AS VARCHAR(MAX))
    FROM dbo.LaneCostWeightBreakLevel
    WHERE ([ServiceOfferingID] = Results.[ServiceOfferingID])
    FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
  ,1,2,'') + '}' AS Cost
FROM dbo.LaneCostWeightBreakLevel Results
GROUP BY [ServiceOfferingID]
) AS A ON SO.[ServiceOfferingID] = A.[ServiceOfferingID]
WHERE LC.[OriginTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND LC.[DestinationTerminalCode] IN (SELECT TerminalCode FROM [dbo].[Terminal])

EXEC [dbo].[LaneCost_Insert_Bulk] @LaneCostTableType

/****** LegCost ******/

DECLARE @LegCostTableType AS LegCostTableType;

INSERT INTO @LegCostTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[ServiceModeCode],
	[Cost]
)

SELECT A.ServiceOfferingName,
	A.OriginTerminalCode,
	A.DestinationTerminalCode,
	A.ServiceLevelCode,
	A.ServiceModeCode,
	(SELECT A.[CostByDistnce], A.[CostByWeight] FOR JSON PATH) AS Cost
FROM
(
SELECT LC.ServiceOfferingName,
	LC.OriginTerminalCode,
	LC.DestinationTerminalCode,
	LC.ServiceLevelCode,
	LC.ServiceModeCode,
	(SELECT LC.[LinehaulRatePerMile] AS [RatePerUnitDistance],
			LC.[FerryCost],
			LC.[TrailerCapacity],
			LC.[MaximumDensity],
			LC.[LegMiles] AS [LegDistance],
			LC.[BackHaulMiles] AS [BackHaulDistance]
	  FOR JSON PATH) AS CostByDistnce,
	'' AS CostByWeight
FROM staging.LegCostFreight LC
WHERE LC.OriginTerminalCode IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND LC.DestinationTerminalCode IN (SELECT TerminalCode FROM [dbo].[Terminal])
UNION
SELECT LC.ServiceOfferingName,
	LC.OriginTerminalCode,
	LC.DestinationTerminalCode,
	LC.ServiceLevelCode,
	LC.ServiceModeCode,
	(SELECT LC.[PerLBRate] AS [RatePerUnitWeight],
			LC.[UseVolumetricWeightForCosting],
			LC.[SupplementalPerLBRate] AS [SupplementalPerUnitWeightRate]
	  FOR JSON PATH) AS CostByWeight,
	'' AS CostByDistnce
FROM staging.LegCostSameday LC
WHERE LC.OriginTerminalCode IN (SELECT TerminalCode FROM [dbo].[Terminal])
AND LC.DestinationTerminalCode IN (SELECT TerminalCode FROM [dbo].[Terminal])
) AS A

EXEC [dbo].[LegCost_Insert_Bulk] @LegCostTableType

/****** LaneRoute ******/

DECLARE @LaneRouteTableType AS LaneRouteTableType;

INSERT INTO @LaneRouteTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[SeqNum],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode],
	[LegServiceModeCode]
)
SELECT DISTINCT LR.[ServiceOfferingName],
	LR.[OriginTerminalCode],
	LR.[DestinationTerminalCode],
	LR.[ServiceLevelCode],
	LR.[SeqNum],
	LR.[LegOriginTerminalCode],
	LR.[LegDestinationTerminalCode],
	LR.[LegServiceModeCode]
FROM [staging].[LaneRoute] LR

INNER JOIN
(
SELECT LR.[ServiceOfferingName],
	LR.[OriginTerminalCode],
	LR.[DestinationTerminalCode],
	LR.[ServiceLevelCode]
FROM [staging].[LaneRoute] LR
WHERE LR.[OriginTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
AND LR.[DestinationTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
AND LR.[LegOriginTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
AND LR.[LegDestinationTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
) AS A
ON LR.[ServiceOfferingName] = A.[ServiceOfferingName]
AND LR.[OriginTerminalCode] = A.[OriginTerminalCode]
AND LR.[DestinationTerminalCode] = A.[DestinationTerminalCode]
AND LR.[ServiceLevelCode] = A.[ServiceLevelCode]

EXEC [dbo].[LaneRoute_Insert_Bulk] @LaneRouteTableType

/****** DockRoute ******/

DECLARE @DockRouteTableType AS DockRouteTableType;

INSERT INTO @DockRouteTableType
(
	[ServiceOfferingName],
	[OriginTerminalCode],
	[DestinationTerminalCode],
	[ServiceLevelCode],
	[SeqNum],
	[LegOriginTerminalCode],
	[LegDestinationTerminalCode]
)
SELECT DR.[ServiceOfferingName],
	DR.[OriginTerminalCode],
	DR.[DestinationTerminalCode],
	SL.[ServiceLevelCode],
	DR.[SeqNum],
	DR.[LegOriginTerminalCode],
	DR.[LegDestinationTerminalCode]
FROM [staging].[DockRoute] DR
INNER JOIN [dbo].[ServiceOffering] SO ON DR.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID]
INNER JOIN
(SELECT DR.[ServiceOfferingName],
	DR.[OriginTerminalCode],
	DR.[DestinationTerminalCode],
	SL.[ServiceLevelCode]
FROM [staging].[DockRoute] DR
INNER JOIN [dbo].[ServiceOffering] SO ON DR.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN [dbo].[ServiceLevel] SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID]
WHERE DR.[OriginTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
AND DR.[DestinationTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
AND DR.[LegOriginTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
AND DR.[LegDestinationTerminalCode] IN (SELECT TerminalCode FROM dbo.Terminal)
) AS A
ON DR.[ServiceOfferingName] = A.[ServiceOfferingName]
AND DR.[OriginTerminalCode] = A.[OriginTerminalCode]
AND DR.[DestinationTerminalCode] = A.[DestinationTerminalCode]
AND SL.[ServiceLevelCode] = A.[ServiceLevelCode]

EXEC [dbo].[DockRoute_Insert_Bulk] @DockRouteTableType

RETURN 1
go

CREATE   PROCEDURE [dbo].[Persona_Insert_Bulk]
	@PersonaTableType PersonaTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @PersonaTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Persona table
(
	[PersonaID] [bigint] NOT NULL,
	[PersonaName] [nvarchar](50) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[Persona]
(
	[PersonaName],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.PersonaID,
	 INSERTED.PersonaName
INTO @Persona
(
	[PersonaID],
	[PersonaName]
)
SELECT [PersonaName],
	1,
	1
FROM @PersonaTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Persona_History]
(
	[PersonaID],
	[PersonaName],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [PersonaID],
	 [PersonaName],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Persona

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[PostalCode_Insert_Bulk]
	@PostalCodeTableType PostalCodeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @PostalCodeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @PostalCode table
(
	[PostalCodeID] [bigint] NOT NULL,
	[PostalCodeName] [varchar](50) NOT NULL,
	[ServicePointID] [bigint] NOT NULL
)

DECLARE @ServicePointVersionID table
(
	[ServicePointID] [bigint] NOT NULL,
	[ServicePointVersionID] [bigint] NOT NULL
)

INSERT INTO [dbo].[PostalCode]
(
	[PostalCodeName],
	[ServicePointID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.PostalCodeID,
	 INSERTED.PostalCodeName,
	 INSERTED.[ServicePointID]
INTO @PostalCode
(
	[PostalCodeID],
	[PostalCodeName],
	[ServicePointID]
)
SELECT [PostalCodeName],
	[ServicePointID],
	1,
	1
FROM @PostalCodeTableType PC
INNER JOIN dbo.ServicePoint SP ON PC.ServicePointName = SP.ServicePointName
INNER JOIN dbo.Province P ON P.ProvinceID = SP.ProvinceID AND P.ProvinceCode = PC.ProvinceCode


SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO @ServicePointVersionID
(
	[ServicePointID],
	[ServicePointVersionID]
)
SELECT [ServicePointID],
	[ServicePointVersionID]
FROM [dbo].[ServicePoint_History]
WHERE [IsLatestVersion] = 1
AND [ServicePointID] IN (SELECT DISTINCT [ServicePointID] FROM @PostalCode)

INSERT INTO [dbo].[PostalCode_History]
(
	[PostalCodeID],
	[PostalCodeName],
	[ServicePointVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT SP.[PostalCodeID],
	 SP.[PostalCodeName],
	 BVID.[ServicePointVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @PostalCode SP
LEFT JOIN @ServicePointVersionID BVID ON SP.[ServicePointID] = BVID.[ServicePointID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Province_Insert_Bulk]
	@ProvinceTableType ProvinceTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @ProvinceTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Province table
(
	[ProvinceID] [bigint] NOT NULL,
	[ProvinceName] [nvarchar](50) NOT NULL,
	[ProvinceCode] [nvarchar](2) NOT NULL,
	[RegionID] [bigint] NOT NULL
)

BEGIN TRAN

DECLARE @ProvinceWithRegionID table
(
	[ProvinceName] [nvarchar](50) NOT NULL,
	[ProvinceCode] [nvarchar](2) NOT NULL,
	[RegionID] [bigint] NOT NULL
)

DECLARE @RegionVersionID table
(
	[RegionID] [bigint] NOT NULL,
	[RegionVersionID] [bigint] NOT NULL
)

INSERT INTO @ProvinceWithRegionID
(
	[ProvinceName],
	[ProvinceCode],
	[RegionID]
)
SELECT PTT.[ProvinceName],
	PTT.[ProvinceCode],
	C.[RegionID]
FROM @ProvinceTableType PTT
INNER JOIN [dbo].[Region] C ON PTT.[RegionCode] = C.[RegionCode]

INSERT INTO @RegionVersionID
(
	[RegionID],
	[RegionVersionID]
)
SELECT [RegionID],
	[RegionVersionID]
FROM [dbo].[Region_History]
WHERE [IsLatestVersion] = 1
AND [RegionID] IN (SELECT DISTINCT [RegionID] FROM @ProvinceWithRegionID)


INSERT INTO [dbo].[Province]
(
	[ProvinceName],
	[ProvinceCode],
	[RegionID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.ProvinceID,
	 INSERTED.ProvinceName,
	 INSERTED.ProvinceCode,
	 INSERTED.RegionID
INTO @Province
(
	[ProvinceID],
	[ProvinceName],
	[ProvinceCode],
	[RegionID]
)
SELECT [ProvinceName],
	[ProvinceCode],
	[RegionID],
	1,
	1
FROM @ProvinceWithRegionID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Province_History]
(
	[ProvinceID],
	[ProvinceName],
	[ProvinceCode],
	[RegionVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT P.[ProvinceID],
	 P.[ProvinceName],
	 P.[ProvinceCode],
	 CVID.[RegionVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Province P
INNER JOIN @RegionVersionID CVID ON P.[RegionID] = CVID.[RegionID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[RateBase_Insert_Bulk]
	@RateBaseTableType RateBaseTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @RateBaseTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RateBase table
(
	[RateBaseID] [bigint] NOT NULL,
	[RateBaseName] [nvarchar](50) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[RateBase]
(
	[RateBaseName],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.RateBaseID,
	 INSERTED.RateBaseName
INTO @RateBase
(
	[RateBaseID],
	[RateBaseName]
)
SELECT [RateBaseName],
	1,
	1
FROM @RateBaseTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RateBase_History]
(
	[RateBaseID],
	[RateBaseName],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [RateBaseID],
	 [RateBaseName],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @RateBase

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Region_Insert_Bulk]
	@RegionTableType RegionTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @RegionTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Region table
(
	[RegionID] [bigint] NOT NULL,
	[RegionName] [nvarchar](50) NOT NULL,
	[RegionCode] [nvarchar](4) NOT NULL,
	[CountryID] [bigint] NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[Region]
(
	[RegionName],
	[RegionCode],
	[CountryID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.RegionID,
	 INSERTED.RegionName,
	 INSERTED.RegionCode,
	 INSERTED.CountryID
INTO @Region
(
	[RegionID],
	[RegionName],
	[RegionCode],
	[CountryID]
)
SELECT [RegionName],
	[RegionCode],
	[CountryID],
	1,
	1
FROM @RegionTableType R
INNER JOIN dbo.Country C ON R.CountryCode = C.CountryCode

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Region_History]
(
	[RegionID],
	[RegionName],
	[RegionCode],
	[CountryVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [RegionID],
	 [RegionName],
	 [RegionCode],
	 [CountryVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Region R
INNER JOIN dbo.Country_History CH ON R.CountryID = CH.CountryID AND CH.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestAccessorials_Insert]
	@RequestNumber        NVARCHAR (32),
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL,
	@RequestAccessorialsID NVARCHAR (32) output
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RequestAccessorials table
(
    [RequestAccessorialsID]          BIGINT        NOT NULL,
    [RequestNumber]        NVARCHAR (32) NOT NULL,
	[IsValidData]	BIT NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[RequestAccessorials]
(
	[RequestNumber],
	[IsValidData],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[RequestAccessorialsID],
    INSERTED.[RequestNumber],
	INSERTED.[IsValidData]
INTO @RequestAccessorials
(
	[RequestAccessorialsID],
	[RequestNumber],
	[IsValidData]
)
VALUES
(
    @RequestNumber,
	0,
	1,
	1
)

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RequestAccessorials_History]
(
	[RequestAccessorialsID],
    [RequestNumber],
	[IsValidData],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT R.[RequestAccessorialsID],
    R.[RequestNumber],
	R.[IsValidData],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @RequestAccessorials R

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

SELECT @RequestAccessorialsID = R.RequestAccessorialsID
FROM @RequestAccessorials R
WHERE R.RequestNumber = @RequestNumber

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> 1) OR (@ROWCOUNT2 <> 1)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT1);
	IF (@ROWCOUNT2 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT2);
	RETURN 0
	END

COMMIT TRAN
RETURN 1

go


CREATE PROCEDURE [dbo].[RequestInformation_Insert] @RequestNumber NVARCHAR(32),
                                                   @CustomerID BIGINT,
                                                   @UpdatedBy nvarchar(50) = NULL,
                                                   @Comments nvarchar(4000) = NULL,
                                                   @LanguageID BIGINT=NULl,
                                                   @RequestInformationID NVARCHAR(32) output
AS

    SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT
    IF @UpdatedBy IS NULL
        SELECT @UpdatedBy = 'P&C System';

    IF @Comments IS NULL
        SELECT @Comments = 'Created first version.';

DECLARE
    @RequestInformation table
                        (
                            [RequestInformationID] BIGINT       NOT NULL,
                            [RequestNumber]        NVARCHAR(32) NOT NULL,
                            [CustomerID]           BIGINT       NOT NULL,
                            [IsValidData]          BIT          NOT NULL,
                            [LanguageID]           BIGINT
                        )

    BEGIN TRAN

INSERT INTO [dbo].[RequestInformation]
([RequestNumber],
 [CustomerID],
 [IsValidData],
 [IsActive],
 [IsInactiveViewable],
 [LanguageID],
 [RequestTypeID],
 [EffectiveDate])
OUTPUT INSERTED.[RequestInformationID], INSERTED.[RequestNumber], INSERTED.[CustomerID], INSERTED.[IsValidData], INSERTED.[LanguageID] INTO @RequestInformation
    (
     [RequestInformationID],
     [RequestNumber],
     [CustomerID],
     [IsValidData],
     [LanguageID]
        )
VALUES (@RequestNumber,
        @CustomerID,
        0,
        1,
        1,
        @LanguageID,
        2,
        cast (GETDATE() as DATE)
        ) -- now it's hardcoded "commitment", need to clarify is that bug or something else.

-- (select LanguageID from Language where LanguageCode = @Language)
SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RequestInformation_History]
([RequestInformationID],
 [RequestNumber],
 [CustomerVersionID],
 [IsValidData],
 [IsActive],
 [VersionNum],
 [IsLatestVersion],
 [IsInactiveViewable],
 [UpdatedOn],
 [UpdatedBy],
 [Comments],
 [EffectiveDate])
SELECT R.[RequestInformationID],
       R.[RequestNumber],
       CH.[CustomerVersionID],
       R.[IsValidData],
       1,
       1,
       1,
       1,
       GETUTCDATE(),
       @UpdatedBy,
       @Comments,
       cast (GETDATE() as DATE)
FROM @RequestInformation R
         INNER JOIN dbo.Customer_History CH ON R.CustomerID = CH.CustomerID AND CH.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

SELECT @RequestInformationID = R.RequestInformationID
FROM @RequestInformation R
WHERE R.CustomerID = @CustomerID
    IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)
        BEGIN
            ROLLBACK TRAN
            RAISERROR ('Insert Procedure Failed!', 16, 1)
            RETURN 0
        END
    IF (@ROWCOUNT1 <> 1) OR (@ROWCOUNT2 <> 1)
        BEGIN
            ROLLBACK TRAN
            IF (@ROWCOUNT1 <> 1)
                RAISERROR ('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT1);
            IF (@ROWCOUNT2 <> 1)
                RAISERROR ('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT2);
            RETURN 0
        END

    COMMIT TRAN
    RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestLane_Count]
	@RequestLaneID     BIGINT,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT, @ERROR4 INT;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Updating Lanes Count.';

BEGIN TRAN

DECLARE @DistinctRequestSectionID IDTableType;

INSERT INTO @DistinctRequestSectionID
(
	ID
)
SELECT DISTINCT [RequestSectionID]
FROM dbo.RequestSection
WHERE RequestLaneID = @RequestLaneID

-- Update RequestSection Count

DECLARE @RequestSectionCount TABLE
(
	[RequestSectionID] BIGINT NOT NULL,
	[NumLanes] INT NOT NULL,
	[NumUnpublishedLanes] INT NOT NULL,
	[NumEditedLanes] INT NOT NULL,
	[NumDuplicateLanes] INT NOT NULL,
	[NumDoNotMeetCommitmentLanes] INT NOT NULL
)
INSERT INTO @RequestSectionCount
(
	[RequestSectionID],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
)
SELECT RSL.[RequestSectionID],
	ISNULL(SUM(CASE WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 THEN 1 ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.IsPublished = 0 THEN 1 ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.IsEdited = 1 THEN 1 ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.IsDuplicate = 1 THEN 1 ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.[DoNotMeetCommitment] = 1 THEN 1 ELSE 0 END), 0)
FROM dbo.RequestSectionLane RSL
INNER JOIN @DistinctRequestSectionID RS ON RSL.[RequestSectionID] = RS.ID

GROUP BY RSL.[RequestSectionID];

UPDATE dbo.RequestSection
SET [NumLanes] = A.[NumLanes],
	[NumUnpublishedLanes] = A.[NumUnpublishedLanes],
	[NumEditedLanes] = A.[NumEditedLanes],
	[NumDuplicateLanes] = A.[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes] = A.[NumDoNotMeetCommitmentLanes]
FROM @RequestSectionCount A
WHERE dbo.RequestSection.[RequestSectionID] = A.[RequestSectionID]

SELECT @ERROR1 = @@ERROR;

-- Update RequesLane Count

DECLARE @RequestLaneCount TABLE
(
	[RequestLaneID] BIGINT NOT NULL,
	[NumLanes] INT NOT NULL,
	[NumUnpublishedLanes] INT NOT NULL,
	[NumEditedLanes] INT NOT NULL,
	[NumDuplicateLanes] INT NOT NULL,
	[NumSections] INT NOT NULL,
	[NumDoNotMeetCommitmentLanes] INT NOT NULL
)
INSERT INTO @RequestLaneCount
(
	[RequestLaneID],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumSections],
	[NumDoNotMeetCommitmentLanes]
)
SELECT RS.[RequestLaneID],
	ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumLanes] ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumUnpublishedLanes] ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumEditedLanes] ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumDuplicateLanes] ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN 1 ELSE 0 END), 0),
	ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumDoNotMeetCommitmentLanes] ELSE 0 END), 0)
FROM dbo.RequestSection RS
WHERE RS.[RequestLaneID] = @RequestLaneID
GROUP BY RS.[RequestLaneID]

UPDATE dbo.RequestLane
SET [NumLanes] = A.[NumLanes],
	[NumUnpublishedLanes] = A.[NumUnpublishedLanes],
	[NumEditedLanes] = A.[NumEditedLanes],
	[NumDuplicateLanes] = A.[NumDuplicateLanes],
	[NumSections] = A.[NumSections],
	[NumDoNotMeetCommitmentLanes] = A.[NumDoNotMeetCommitmentLanes]
FROM @RequestLaneCount A
WHERE dbo.RequestLane.[RequestLaneID] = A.[RequestLaneID]

SELECT @ERROR2 = @@ERROR

DECLARE @RequestLaneHistory TABLE
(
	[VersionNum]            INT             NOT NULL,
	[IsActive]              BIT             NOT NULL,
	[IsInactiveViewable]    BIT             NOT NULL,
	[RequestLaneVersionID] BIGINT          NOT NULL,
	[RequestNumber]         NVARCHAR (32)   NOT NULL,
	[NumSections]	INT NOT NULL,
	[NumLanes]	INT NOT NULL,
	[NumUnpublishedLanes]	INT NOT NULL,
	[NumDuplicateLanes]	INT NOT NULL,
	[NumEditedLanes]	INT NOT NULL,
	[NumDoNotMeetCommitmentLanes] INT NOT NULL,
	[IsValidData]           BIT             NOT NULL,
	[RequestLaneID]        BIGINT          NOT NULL
)

INSERT INTO @RequestLaneHistory
(
	[VersionNum],
	[IsActive],
	[IsInactiveViewable],
	[RequestLaneVersionID],
	[RequestNumber],
	[NumSections],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumDuplicateLanes],
	[NumEditedLanes],
	[NumDoNotMeetCommitmentLanes],
	[IsValidData],
	[RequestLaneID]
)
SELECT RLH.[VersionNum],
	RL.[IsActive],
	RL.[IsInactiveViewable],
	RLH.[RequestLaneVersionID],
	RL.[RequestNumber],
	RL.[NumSections],
	RL.[NumLanes],
	RL.[NumUnpublishedLanes],
	RL.[NumDuplicateLanes],
	RL.[NumEditedLanes],
	RL.[NumDoNotMeetCommitmentLanes],
	RL.[IsValidData],
	RL.[RequestLaneID]
FROM dbo.RequestLane_History RLH
INNER JOIN dbo.RequestLane RL ON RLH.[RequestLaneID] = RL.[RequestLaneID]
WHERE RLH.IsLatestVersion = 1

UPDATE dbo.RequestLane_History
SET IsLatestVersion = 0
WHERE dbo.RequestLane_History.RequestLaneVersionID IN (SELECT RequestLaneVersionID FROM @RequestLaneHistory)

SELECT @ERROR3 = @@ERROR

INSERT INTO dbo.RequestLane_History
(
	[VersionNum],
	[IsActive],
	[IsInactiveViewable],
	[RequestNumber],
	[NumSections],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDoNotMeetCommitmentLanes],
	[NumDuplicateLanes],
	[IsValidData],
	[RequestLaneID],
	UpdatedOn,
	UpdatedBy,
	Comments,
	IsLatestVersion
)
SELECT [VersionNum]+1,
	[IsActive],
	[IsInactiveViewable],
	[RequestNumber],
	[NumSections],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDoNotMeetCommitmentLanes],
	[NumDuplicateLanes],
	[IsValidData],
	[RequestLaneID],
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	1
FROM @RequestLaneHistory

SELECT @ERROR4 = @@ERROR

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0) OR (@ERROR3 <> 0) OR (@ERROR4 <> 0)
BEGIN
ROLLBACK TRAN
RAISERROR('Insert Procedure Failed!', 16, 1)
RETURN 0
END

EXEC dbo.RequestLane_History_Update @RequestLaneID, @UpdatedBy, @Comments

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestLane_History_Update]
	@RequestLaneID     BIGINT,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT, @ERROR4 INT, @ERROR5 INT, @ERROR6 INT;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Saving RequestLane_History.';

BEGIN TRAN

DECLARE @RequestLaneVersionID BIGINT;

SELECT @RequestLaneVersionID = RequestLaneVersionID
FROM dbo.RequestLane_History RLH
WHERE RLH.RequestLaneID = @RequestLaneID AND RLH.IsLatestVersion = 1

DECLARE @RequestSectionID TABLE
(
	[RequestSectionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionID
(
	[RequestSectionID]
)
SELECT DISTINCT [RequestSectionID]
FROM dbo.RequestSection
WHERE RequestLaneID = @RequestLaneID

DECLARE @RequestSectionHistory TABLE
(
	[VersionNum]          INT             NOT NULL,
    [IsActive]            BIT             NOT NULL,
    [IsInactiveViewable]  BIT             NOT NULL,
    [RequestSectionVersionID]          BIGINT,
	[RequestSectionID]          BIGINT        NOT NULL,
	[RequestLaneVersionID]          BIGINT        NOT NULL,
    [SectionNumber]        NVARCHAR (50) NOT NULL,
	[SectionName]        NVARCHAR (50) NOT NULL,
	[SubServiceLevelVersionID]        BIGINT NOT NULL,
	[WeightBreak]        NVARCHAR(MAX) NOT NULL,
	[WeightBreakHeaderVersionID]        BIGINT NOT NULL,
	[IsDensityPricing] [BIT] NOT NULL,
	[OverrideDensity] DECIMAL (19,6) NULL,
	[RateBaseVersionID]        BIGINT NULL,
	[OverrideClassVersionID]        BIGINT NULL,
	[EquipmentTypeVersionID]        BIGINT NULL,
	[Commodity] NVARCHAR(100) NULL,
	[NumLanes] INT NOT NULL,
	[NumUnpublishedLanes] INT NOT NULL,
	[NumEditedLanes] INT NOT NULL,
	[NumDuplicateLanes] INT NOT NULL,
	[NumDoNotMeetCommitmentLanes] INT NOT NULL
)

INSERT INTO @RequestSectionHistory
(
	[VersionNum],
    [IsActive],
    [IsInactiveViewable],
    [RequestSectionVersionID],
	[RequestSectionID],
	[RequestLaneVersionID],
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
)
SELECT RSH.[VersionNum],
    RS.[IsActive],
    RS.[IsInactiveViewable],
    RSH.[RequestSectionVersionID],
	RS.[RequestSectionID],
	RSH.[RequestLaneVersionID],
    RS.[SectionNumber],
	RS.[SectionName],
	RSH.[SubServiceLevelVersionID],
	RS.[WeightBreak],
	RSH.[WeightBreakHeaderVersionID],
	RS.[IsDensityPricing],
	RS.[OverrideDensity],
	RSH.[RateBaseVersionID],
	RSH.[OverrideClassVersionID],
	RSH.[EquipmentTypeVersionID],
	RS.[Commodity],
	RS.[NumLanes],
	RS.[NumUnpublishedLanes],
	RS.[NumEditedLanes],
	RS.[NumDuplicateLanes],
	RS.[NumDoNotMeetCommitmentLanes]
FROM dbo.RequestSection_History RSH
INNER JOIN dbo.RequestSection RS ON RSH.RequestSectionID = RS.RequestSectionID AND RSH.IsLatestVersion = 1
WHERE RS.RequestSectionID IN (SELECT RequestSectionID FROM @RequestSectionID)

UPDATE dbo.RequestSection_History
SET IsLatestVersion = 0
WHERE dbo.RequestSection_History.RequestSectionVersionID IN (SELECT RequestSectionVersionID FROM @RequestSectionHistory)

SELECT @ERROR1 = @@ERROR

DECLARE @RequestSectionVersion TABLE
(
	[RequestSectionID] BIGINT        NOT NULL,
	[RequestSectionVersionID] BIGINT        NOT NULL
)

INSERT INTO dbo.RequestSection_History
(
	[VersionNum],
    [IsLatestVersion],
    [UpdatedOn],
    [UpdatedBy],
    [Comments],
    [IsActive],
    [IsInactiveViewable],
	[RequestSectionID],
	[RequestLaneVersionID],
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
)
OUTPUT INSERTED.RequestSectionID,
	INSERTED.RequestSectionVersionID
INTO @RequestSectionVersion
(
	RequestSectionID,
	RequestSectionVersionID
)
SELECT [VersionNum]+1,
	1,
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionID],
	@RequestLaneVersionID,
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
FROM @RequestSectionHistory

SELECT @ERROR2 = @@ERROR

DECLARE @RequestSectionLaneID TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLaneID
(
	[RequestSectionLaneID],
	[RequestSectionID]
)
SELECT [RequestSectionLaneID], [RequestSectionID]
FROM dbo.RequestSectionLane
WHERE RequestSectionID IN (SELECT RequestSectionID FROM @RequestSectionID)

DECLARE @RequestSectionLaneHistory TABLE
(
	[VersionNum]          INT             NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[RequestSectionLaneVersionID]          BIGINT        NOT NULL,
	[RequestSectionLaneID]          BIGINT    NOT NULL,
	[RequestSectionVersionID]          BIGINT        NOT NULL,
    [LaneNumber]        NVARCHAR(32) NOT NULL,
	[IsPublished]        BIT NOT NULL,
	[IsEdited]        BIT NOT NULL,
	[IsDuplicate]        BIT NOT NULL,
	[IsBetween]        BIT NOT NULL,
	[IsLaneGroup]        BIT NOT NULL,
	[OriginProvinceVersionID] BIGINT NULL,
	[OriginProvinceCode] NVARCHAR(2) NULL,
	[OriginRegionVersionID] BIGINT NULL,
	[OriginRegionCode] NVARCHAR(4) NULL,
	[OriginCountryVersionID] BIGINT NULL,
	[OriginCountryCode] NVARCHAR(2) NULL,
	[OriginTerminalVersionID] BIGINT NULL,
	[OriginTerminalCode] NVARCHAR(3) NULL,
	[OriginZoneVersionID] BIGINT NULL,
	[OriginZoneName] NVARCHAR(50) NULL,
	[OriginBasingPointVersionID] BIGINT NULL,
	[OriginBasingPointName] NVARCHAR(50) NULL,
	[OriginServicePointVersionID] BIGINT NULL,
	[OriginServicePointName] NVARCHAR(50) NULL,
	[OriginPostalCodeVersionID] BIGINT NULL,
	[OriginPostalCodeName] NVARCHAR(10) NULL,
	[OriginPointTypeVersionID] BIGINT NOT NULL,
	[OriginPointTypeName] NVARCHAR(50) NOT NULL,
	[OriginCode] NVARCHAR(50) NOT NULL,
	[DestinationProvinceVersionID] BIGINT NULL,
	[DestinationProvinceCode] NVARCHAR(2) NULL,
	[DestinationRegionVersionID] BIGINT NULL,
	[DestinationRegionCode] NVARCHAR(4) NULL,
	[DestinationCountryVersionID] BIGINT NULL,
	[DestinationCountryCode] NVARCHAR(2) NULL,
	[DestinationTerminalVersionID] BIGINT NULL,
	[DestinationTerminalCode] NVARCHAR(3) NULL,
	[DestinationZoneVersionID] BIGINT NULL,
	[DestinationZoneName] NVARCHAR(50) NULL,
	[DestinationBasingPointVersionID] BIGINT NULL,
	[DestinationBasingPointName] NVARCHAR(50) NULL,
	[DestinationServicePointVersionID] BIGINT NULL,
	[DestinationServicePointName] NVARCHAR(50) NULL,
	[DestinationPostalCodeVersionID] BIGINT NULL,
	[DestinationPostalCodeName] NVARCHAR(10) NULL,
	[DestinationPointTypeVersionID] BIGINT NOT NULL,
	[DestinationPointTypeName] NVARCHAR(50) NOT NULL,
	[DestinationCode] NVARCHAR(50) NOT NULL,
	[LaneHashCode] VARBINARY(8000) NOT NULL,
	[BasingPointHashCode] VARBINARY(8000) NULL,
	[Cost]        NVARCHAR(MAX) NULL,
	[DoNotMeetCommitment] BIT NOT NULL,
	[Commitment] NVARCHAR(MAX) NULL,
	[CustomerRate] NVARCHAR(MAX) NOT NULL,
	[CustomerDiscount] NVARCHAR(MAX) NOT NULL,
	[DrRate] NVARCHAR(MAX) NOT NULL,
	[PartnerRate] NVARCHAR(MAX) NOT NULL,
	[PartnerDiscount] NVARCHAR(MAX) NOT NULL,
	[Profitability] NVARCHAR(MAX) NOT NULL,
	[PickupCount] INT NULL,
	[DeliveryCount] INT NULL,
	[DockAdjustment] DECIMAL(19,6) NULL,
	[Margin] NVARCHAR(MAX) NOT NULL,
	[Density] NVARCHAR(MAX) NOT NULL,
	[PickupCost] NVARCHAR(MAX) NOT NULL,
	[DeliveryCost] NVARCHAR(MAX) NOT NULL,
	[AccessorialsValue] NVARCHAR(MAX) NOT NULL,
	[AccessorialsPercentage] NVARCHAR(MAX) NOT NULL
)

INSERT INTO @RequestSectionLaneHistory
(
	[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLaneVersionID],
	[RequestSectionLaneID],
	[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
SELECT [VersionNum],
	RSL.[IsActive],
    RSL.[IsInactiveViewable],
	[RequestSectionLaneVersionID],
	RSLH.[RequestSectionLaneID],
	[RequestSectionVersionID],
    RSL.[LaneNumber],
	RSL.[IsPublished],
	RSL.[IsEdited],
	RSL.[IsDuplicate],
	RSL.[IsBetween],
	RSL.[IsLaneGroup],
	[OriginProvinceVersionID],
	RSL.[OriginProvinceCode],
	[OriginRegionVersionID],
	RSL.[OriginRegionCode],
	[OriginCountryVersionID],
	RSL.[OriginCountryCode],
	[OriginTerminalVersionID],
	RSL.[OriginTerminalCode],
	[OriginZoneVersionID],
	RSL.[OriginZoneName],
	[OriginBasingPointVersionID],
	RSL.[OriginBasingPointName],
	[OriginServicePointVersionID],
	RSL.[OriginServicePointName],
	[OriginPostalCodeVersionID],
	RSL.[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	RSL.[OriginPointTypeName],
	RSL.[OriginCode],
	[DestinationProvinceVersionID],
	RSL.[DestinationProvinceCode],
	[DestinationRegionVersionID],
	RSL.[DestinationRegionCode],
	[DestinationCountryVersionID],
	RSL.[DestinationCountryCode],
	[DestinationTerminalVersionID],
	RSL.[DestinationTerminalCode],
	[DestinationZoneVersionID],
	RSL.[DestinationZoneName],
	[DestinationBasingPointVersionID],
	RSL.[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	RSL.[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	RSL.[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	RSL.[DestinationPointTypeName],
	RSL.[DestinationCode],
	RSL.[LaneHashCode],
	RSL.[BasingPointHashCode],
	RSL.[Cost],
	RSL.[DoNotMeetCommitment],
	RSL.[Commitment],
	RSL.[CustomerRate],
	RSL.[CustomerDiscount],
	RSL.[DrRate],
	RSL.[PartnerRate],
	RSL.[PartnerDiscount],
	RSL.[Profitability],
	RSL.[PickupCount],
	RSL.[DeliveryCount],
	RSL.[DockAdjustment],
	RSL.[Margin],
	RSL.[Density],
	RSL.[PickupCost],
	RSL.[DeliveryCost],
	RSL.[AccessorialsValue],
	RSL.[AccessorialsPercentage]
FROM dbo.RequestSectionLane_History RSLH
INNER JOIN dbo.RequestSectionLane RSL ON RSLH.RequestSectionLaneID = RSL.RequestSectionLaneID AND RSLH.IsLatestVersion = 1
WHERE RSL.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM @RequestSectionLaneID)

UPDATE dbo.RequestSectionLane_History
SET IsLatestVersion = 0
WHERE dbo.RequestSectionLane_History.RequestSectionLaneVersionID IN (SELECT RequestSectionLaneVersionID FROM @RequestSectionLaneHistory)

SELECT @ERROR3 = @@ERROR

-- Insert INTO RequestSectionLane_History

DECLARE @RequestSectionLaneVersion TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionLaneVersionID] BIGINT        NOT NULL
)

INSERT INTO dbo.RequestSectionLane_History
(
	[VersionNum],
    [IsLatestVersion],
    [UpdatedOn],
    [UpdatedBy],
    [Comments],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLaneID],
	[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
OUTPUT INSERTED.RequestSectionLaneVersionID,
	INSERTED.RequestSectionLaneID
INTO @RequestSectionLaneVersion
(
	RequestSectionLaneVersionID,
	RequestSectionLaneID
)
SELECT [VersionNum]+1,
	1,
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	[IsActive],
    [IsInactiveViewable],
	RSLH.[RequestSectionLaneID],
	RS.[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM @RequestSectionLaneHistory RSLH
INNER JOIN @RequestSectionLaneID RSL ON RSLH.RequestSectionLaneID = RSL.RequestSectionLaneID
INNER JOIN @RequestSectionVersion RS ON RSL.RequestSectionID = RS.RequestSectionID

SELECT @ERROR4 = @@ERROR

DECLARE @RequestSectionLanePricingPointID TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionLanePricingPointID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLanePricingPointID
(
	[RequestSectionLaneID],
	[RequestSectionLanePricingPointID]
)
SELECT [RequestSectionLaneID], [RequestSectionLanePricingPointID]
FROM dbo.RequestSectionLanePricingPoint
WHERE [RequestSectionLaneID] IN (SELECT [RequestSectionLaneID] FROM @RequestSectionLaneID)

DECLARE @RequestSectionLanePricingPointHistory TABLE
(
	[VersionNum]          INT             NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[RequestSectionLanePricingPointVersionID]          BIGINT     NOT NULL,
	[RequestSectionLanePricingPointID]          BIGINT     NOT NULL,
	[RequestSectionLaneVersionID]          BIGINT     NOT NULL,
    [PricingPointNumber]        NVARCHAR(32) NOT NULL,
	[OriginPostalCodeVersionID] BIGINT NULL,
	[OriginPostalCodeName] NVARCHAR(10) NULL,
	[DestinationPostalCodeVersionID] BIGINT NULL,
	[DestinationPostalCodeName] NVARCHAR(10) NULL,
	[PricingPointHashCode] VARBINARY(8000) NOT NULL,
	[Cost]        NVARCHAR(MAX) NULL,
	[DrRate] NVARCHAR(MAX) NOT NULL,
	[FakRate] NVARCHAR(MAX) NOT NULL,
	[Profitability] NVARCHAR(MAX) NOT NULL,
	[SplitsAll] NVARCHAR(MAX) NOT NULL,
	[SplitsAllUsagePercentage] DECIMAL(19,6) NOT NULL,
	[PickupCount] INT NULL,
	[DeliveryCount] INT NULL,
	[DockAdjustment] DECIMAL(19,6) NULL,
	[Margin] NVARCHAR(MAX) NOT NULL,
	[Density] NVARCHAR(MAX) NOT NULL,
	[PickupCost] NVARCHAR(MAX) NOT NULL,
	[DeliveryCost] NVARCHAR(MAX) NOT NULL,
	[AccessorialsValue] NVARCHAR(MAX) NOT NULL,
	[AccessorialsPercentage] NVARCHAR(MAX) NOT NULL
)
INSERT INTO @RequestSectionLanePricingPointHistory
(
	[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointVersionID],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
SELECT  [VersionNum],
	PP.[IsActive],
    PP.[IsInactiveViewable],
	[RequestSectionLanePricingPointVersionID],
	PPH.[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    PP.[PricingPointNumber],
	[OriginPostalCodeVersionID],
	PP.[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	PP.[DestinationPostalCodeName],
	PP.[PricingPointHashCode],
	PP.[Cost],
	PP.[DrRate],
	PP.[FakRate],
	PP.[Profitability],
	PP.[SplitsAll],
	PP.[SplitsAllUsagePercentage],
	PP.[PickupCount],
	PP.[DeliveryCount],
	PP.[DockAdjustment],
	PP.[Margin],
	PP.[Density],
	PP.[PickupCost],
	PP.[DeliveryCost],
	PP.[AccessorialsValue],
	PP.[AccessorialsPercentage]
FROM dbo.RequestSectionLanePricingPoint_History PPH
INNER JOIN dbo.RequestSectionLanePricingPoint PP ON PPH.RequestSectionLanePricingPointID = PP.RequestSectionLanePricingPointID AND PPH.IsLatestVersion = 1
WHERE PP.RequestSectionLanePricingPointID IN (SELECT RequestSectionLanePricingPointID FROM @RequestSectionLanePricingPointID)

UPDATE dbo.RequestSectionLanePricingPoint_History
SET IsLatestVersion = 0
WHERE dbo.RequestSectionLanePricingPoint_History.[RequestSectionLanePricingPointVersionID] IN (SELECT [RequestSectionLanePricingPointVersionID] FROM @RequestSectionLanePricingPointHistory)

SELECT @ERROR5 = @@ERROR

INSERT INTO RequestSectionLanePricingPoint_History
(
	[VersionNum],
    [IsLatestVersion],
    [UpdatedOn],
    [UpdatedBy],
    [Comments],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
SELECT [VersionNum]+1,
	1,
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	[IsActive],
    [IsInactiveViewable],
	PPH.[RequestSectionLanePricingPointID],
	RSL.[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM @RequestSectionLanePricingPointHistory PPH
INNER JOIN @RequestSectionLanePricingPointID PP ON PPH.RequestSectionLanePricingPointID = PP.RequestSectionLanePricingPointID
INNER JOIN @RequestSectionLaneVersion RSL ON PP.RequestSectionLaneID = RSL.RequestSectionLaneID

SELECT @ERROR6 = @@ERROR

	IF (@ERROR1 <> 0) OR (@ERROR2 <> 0) OR (@ERROR3 <> 0) OR (@ERROR4 <> 0) OR (@ERROR5 <> 0) OR (@ERROR6 <> 0)
	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestLane_Insert]
	@RequestNumber        NVARCHAR (32),
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL,
	@RequestLaneID NVARCHAR (32) output
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RequestLane table
(
    [RequestLaneID]          BIGINT        NOT NULL,
    [RequestNumber]        NVARCHAR (32) NOT NULL,
	[IsValidData]	BIT NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[RequestLane]
(
	[RequestNumber],
	[NumSections],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes],
	[IsValidData],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[RequestLaneID],
    INSERTED.[RequestNumber],
	INSERTED.[IsValidData]
INTO @RequestLane
(
	[RequestLaneID],
	[RequestNumber],
	[IsValidData]
)
VALUES
(
    @RequestNumber,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	1,
	1
)

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RequestLane_History]
(
	[RequestLaneID],
    [RequestNumber],
	[NumSections],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes],
	[IsValidData],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT R.[RequestLaneID],
    R.[RequestNumber],
	0,
	0,
	0,
	0,
	0,
	0,
	R.[IsValidData],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @RequestLane R

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

SELECT @RequestLaneID = R.RequestLaneID
FROM @RequestLane R
WHERE R.RequestNumber = @RequestNumber

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> 1) OR (@ROWCOUNT2 <> 1)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT1);
	IF (@ROWCOUNT2 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT2);
	RETURN 0
	END

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestLane_Revert]
	@RequestID		BIGINT,
	@VersionNum	INT,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT, @ERROR4 INT, @ERROR5 INT, @ERROR6 INT;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Saving RequestLane_History.';

BEGIN TRAN

DECLARE @RequestLaneVersionID BIGINT, @RequestLaneID BIGINT, @LatestRequestLaneVersionID BIGINT;

SELECT @RequestLaneVersionID = RLH.RequestLaneVersionID,
	@RequestLaneID = RLH.RequestLaneID
FROM dbo.RequestLane_History RLH
INNER JOIN dbo.Request_History R ON RLH.RequestLaneVersionID = R.RequestLaneVersionID
WHERE R.RequestID = @RequestID AND R.VersionNum = @VersionNum

SELECT @LatestRequestLaneVersionID = R.RequestLaneVersionID
FROM dbo.Request_History R
WHERE R.RequestID = @RequestID AND R.IsLatestVersion = 1

DECLARE @RequestSectionVersionID TABLE
(
	[RequestSectionVersionID] BIGINT        NOT NULL,
	[RequestSectionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionVersionID
(
	[RequestSectionVersionID],
	[RequestSectionID]
)
SELECT [RequestSectionVersionID], [RequestSectionID]
FROM
(SELECT [RequestSectionVersionID], [RequestSectionID],
	ROW_NUMBER() OVER(PARTITION BY RequestSectionID ORDER BY VersionNum DESC) AS RN
FROM dbo.RequestSection_History
WHERE RequestLaneVersionID = @RequestLaneVersionID) AS A
WHERE A.RN = 1

DECLARE @RequestSectionID TABLE
(
	[RequestSectionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionID
(
	[RequestSectionID]
)
SELECT [RequestSectionID]
FROM dbo.RequestSection
WHERE RequestLaneID = @RequestLaneID

DECLARE @RequestSectionToBeDeleted TABLE
(
	[RequestSectionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionToBeDeleted
(
	[RequestSectionID]
)
SELECT [RequestSectionID]
FROM @RequestSectionID
WHERE [RequestSectionID] NOT IN (SELECT [RequestSectionID] FROM @RequestSectionVersionID)

DECLARE @LatestRequestSectionVersionNum TABLE
(
	[RequestSectionID] BIGINT        NOT NULL,
	[RequestSectionVersionID] BIGINT        NOT NULL,
	[VersionNum] INT NOT NULL
)
INSERT INTO @LatestRequestSectionVersionNum
(
	[RequestSectionID],
	[RequestSectionVersionID],
	[VersionNum]
)
SELECT RSH.[RequestSectionID],
	RSH.[RequestSectionVersionID],
	RSH.[VersionNum]
FROM dbo.RequestSection_History RSH
INNER JOIN @RequestSectionID RS ON RSH.[RequestSectionID] = RS.[RequestSectionID]
WHERE RSH.IsLatestVersion = 1

DECLARE @RequestSectionHistory TABLE
(
	[VersionNum]          INT             NOT NULL,
    [IsActive]            BIT             NOT NULL,
    [IsInactiveViewable]  BIT             NOT NULL,
    [RequestSectionVersionID]          BIGINT,
	[RequestSectionID]          BIGINT        NOT NULL,
	[RequestLaneVersionID]          BIGINT        NOT NULL,
    [SectionNumber]        NVARCHAR (50) NOT NULL,
	[SectionName]        NVARCHAR (50) NOT NULL,
	[SubServiceLevelVersionID]        BIGINT NOT NULL,
	[WeightBreak]        NVARCHAR(MAX) NOT NULL,
	[WeightBreakHeaderVersionID]        BIGINT NOT NULL,
	[IsDensityPricing] [BIT] NOT NULL,
	[OverrideDensity] DECIMAL (19,6) NULL,
	[RateBaseVersionID]        BIGINT NULL,
	[OverrideClassVersionID]        BIGINT NULL,
	[EquipmentTypeVersionID]        BIGINT NULL,
	[Commodity] NVARCHAR(100) NULL,
	[NumLanes] INT NOT NULL,
	[NumUnpublishedLanes] INT NOT NULL,
	[NumEditedLanes] INT NOT NULL,
	[NumDuplicateLanes] INT NOT NULL,
	[NumDoNotMeetCommitmentLanes] INT NOT NULL
)

INSERT INTO @RequestSectionHistory
(
	[VersionNum],
    [IsActive],
    [IsInactiveViewable],
    [RequestSectionVersionID],
	[RequestSectionID],
	[RequestLaneVersionID],
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
)
SELECT VN.[VersionNum],
    [IsActive],
    [IsInactiveViewable],
    RSH.[RequestSectionVersionID],
	RSH.[RequestSectionID],
	[RequestLaneVersionID],
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
FROM dbo.RequestSection_History RSH
INNER JOIN @LatestRequestSectionVersionNum VN ON RSH.[RequestSectionID] = VN.[RequestSectionID]
WHERE RSH.RequestSectionVersionID IN (SELECT RequestSectionVersionID FROM @RequestSectionVersionID)
UNION
SELECT VN.[VersionNum],
    0,
    [IsInactiveViewable],
    RSH.[RequestSectionVersionID],
	RSH.[RequestSectionID],
	[RequestLaneVersionID],
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
FROM dbo.RequestSection_History RSH
INNER JOIN @LatestRequestSectionVersionNum VN ON RSH.RequestSectionVersionID = VN.RequestSectionVersionID
WHERE VN.RequestSectionID IN (SELECT RequestSectionID FROM @RequestSectionToBeDeleted)

UPDATE dbo.RequestSection_History
SET IsLatestVersion = 0
WHERE dbo.RequestSection_History.RequestSectionVersionID IN (SELECT RequestSectionVersionID FROM @LatestRequestSectionVersionNum)

UPDATE dbo.RequestSection
SET [IsActive] = A.[IsActive],
	[IsInactiveViewable] = A.[IsInactiveViewable],
	[SectionNumber] = A.[SectionNumber],
	[SectionName] = A.[SectionName],
	[WeightBreak] = A.[WeightBreak],
	[IsDensityPricing] = A.[IsDensityPricing],
	[OverrideDensity] = A.[OverrideDensity],
	[Commodity] = A.[Commodity],
	[NumLanes] = A.[NumLanes],
	[NumUnpublishedLanes] = A.[NumUnpublishedLanes],
	[NumEditedLanes] = A.[NumEditedLanes],
	[NumDuplicateLanes] = A.[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes] = A.[NumDoNotMeetCommitmentLanes],
	[EquipmentTypeID] = E.[EquipmentTypeID],
	[OverrideClassID] = FC.[FreightClassID],
	[RateBaseID] = RB.[RateBaseID],
	[RequestLaneID] = @RequestLaneID,
	[SubServiceLevelID] = SL.[SubServiceLevelID],
	[WeightBreakHeaderID] = WB.[WeightBreakHeaderID]
FROM @RequestSectionHistory A
LEFT JOIN dbo.[EquipmentType_History] E ON A.[EquipmentTypeVersionID] = E.[EquipmentTypeVersionID]
LEFT JOIN dbo.[FreightClass_History] FC ON A.[OverrideClassVersionID] = FC.[FreightClassVersionID]
LEFT JOIN dbo.[RateBase_History] RB ON A.[RateBaseVersionID] = RB.[RateBaseVersionID]
LEFT JOIN dbo.[SubServiceLevel_History] SL ON A.[SubServiceLevelVersionID] = SL.[SubServiceLevelVersionID]
LEFT JOIN dbo.[WeightBreakHeader_History] WB ON A.[WeightBreakHeaderVersionID] = WB.[WeightBreakHeaderVersionID]
WHERE dbo.RequestSection.RequestSectionID = A.RequestSectionID

SELECT @ERROR1 = @@ERROR

DECLARE @RequestSectionVersion TABLE
(
	[RequestSectionID] BIGINT        NOT NULL,
	[RequestSectionVersionID] BIGINT        NOT NULL
)

INSERT INTO dbo.RequestSection_History
(
	[VersionNum],
    [IsLatestVersion],
    [UpdatedOn],
    [UpdatedBy],
    [Comments],
    [IsActive],
    [IsInactiveViewable],
	[RequestSectionID],
	[RequestLaneVersionID],
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
)
OUTPUT INSERTED.RequestSectionID,
	INSERTED.RequestSectionVersionID
INTO @RequestSectionVersion
(
	RequestSectionID,
	RequestSectionVersionID
)
SELECT [VersionNum]+1,
	1,
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionID],
	@LatestRequestLaneVersionID,
    [SectionNumber],
	[SectionName],
	[SubServiceLevelVersionID],
	[WeightBreak],
	[WeightBreakHeaderVersionID],
	[IsDensityPricing],
	[OverrideDensity],
	[RateBaseVersionID],
	[OverrideClassVersionID],
	[EquipmentTypeVersionID],
	[Commodity],
	[NumLanes],
	[NumUnpublishedLanes],
	[NumEditedLanes],
	[NumDuplicateLanes],
	[NumDoNotMeetCommitmentLanes]
FROM @RequestSectionHistory

SELECT @ERROR2 = @@ERROR

DECLARE @RequestSectionLaneVersionID TABLE
(
	[RequestSectionLaneVersionID] BIGINT        NOT NULL,
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionVersionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLaneVersionID
(
	[RequestSectionLaneVersionID],
	[RequestSectionLaneID],
	[RequestSectionVersionID]
)
SELECT [RequestSectionLaneVersionID], [RequestSectionLaneID], [RequestSectionVersionID]
FROM
(SELECT RSLH.[RequestSectionLaneVersionID],
	RSLH.[RequestSectionLaneID],
	RSLH.[RequestSectionVersionID],
	ROW_NUMBER() OVER(PARTITION BY [RequestSectionLaneID] ORDER BY VersionNum DESC) AS RN
FROM dbo.RequestSectionLane_History RSLH
INNER JOIN @RequestSectionVersionID RSV ON RSLH.[RequestSectionVersionID] = RSV.[RequestSectionVersionID]) AS A
WHERE A.RN = 1

DECLARE @RequestSectionLaneID TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLaneID
(
	[RequestSectionLaneID],
	[RequestSectionID]
)
SELECT [RequestSectionLaneID], [RequestSectionID]
FROM dbo.RequestSectionLane
WHERE RequestSectionID IN (SELECT RequestSectionID FROM @RequestSectionID)

DECLARE @RequestSectionLaneToBeDeleted TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLaneToBeDeleted
(
	[RequestSectionLaneID]
)
SELECT [RequestSectionLaneID]
FROM @RequestSectionLaneID
WHERE [RequestSectionLaneID] NOT IN (SELECT [RequestSectionLaneID] FROM @RequestSectionLaneVersionID)

DECLARE @LatestRequestSectionLaneVersionNum TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionLaneVersionID] BIGINT        NOT NULL,
	[VersionNum] INT NOT NULL
)
INSERT INTO @LatestRequestSectionLaneVersionNum
(
	[RequestSectionLaneID],
	[RequestSectionLaneVersionID],
	[VersionNum]
)
SELECT RSH.[RequestSectionLaneID],
	RSH.[RequestSectionLaneVersionID],
	RSH.[VersionNum]
FROM dbo.RequestSectionLane_History RSH
INNER JOIN @RequestSectionLaneID RS ON RSH.[RequestSectionLaneID] = RS.[RequestSectionLaneID]
WHERE RSH.IsLatestVersion = 1

DECLARE @RequestSectionLaneHistory TABLE
(
	[VersionNum]          INT             NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[RequestSectionLaneVersionID]          BIGINT        NOT NULL,
	[RequestSectionLaneID]          BIGINT    NOT NULL,
	[RequestSectionVersionID]          BIGINT        NOT NULL,
    [LaneNumber]        NVARCHAR(32) NOT NULL,
	[IsPublished]        BIT NOT NULL,
	[IsEdited]        BIT NOT NULL,
	[IsDuplicate]        BIT NOT NULL,
	[IsBetween]        BIT NOT NULL,
	[IsLaneGroup]        BIT NOT NULL,
	[OriginProvinceVersionID] BIGINT NULL,
	[OriginProvinceCode] NVARCHAR(2) NULL,
	[OriginRegionVersionID] BIGINT NULL,
	[OriginRegionCode] NVARCHAR(4) NULL,
	[OriginCountryVersionID] BIGINT NULL,
	[OriginCountryCode] NVARCHAR(2) NULL,
	[OriginTerminalVersionID] BIGINT NULL,
	[OriginTerminalCode] NVARCHAR(3) NULL,
	[OriginZoneVersionID] BIGINT NULL,
	[OriginZoneName] NVARCHAR(50) NULL,
	[OriginBasingPointVersionID] BIGINT NULL,
	[OriginBasingPointName] NVARCHAR(50) NULL,
	[OriginServicePointVersionID] BIGINT NULL,
	[OriginServicePointName] NVARCHAR(50) NULL,
	[OriginPostalCodeVersionID] BIGINT NULL,
	[OriginPostalCodeName] NVARCHAR(10) NULL,
	[OriginPointTypeVersionID] BIGINT NOT NULL,
	[OriginPointTypeName] NVARCHAR(50) NOT NULL,
	[OriginCode] NVARCHAR(50) NOT NULL,
	[DestinationProvinceVersionID] BIGINT NULL,
	[DestinationProvinceCode] NVARCHAR(2) NULL,
	[DestinationRegionVersionID] BIGINT NULL,
	[DestinationRegionCode] NVARCHAR(4) NULL,
	[DestinationCountryVersionID] BIGINT NULL,
	[DestinationCountryCode] NVARCHAR(2) NULL,
	[DestinationTerminalVersionID] BIGINT NULL,
	[DestinationTerminalCode] NVARCHAR(3) NULL,
	[DestinationZoneVersionID] BIGINT NULL,
	[DestinationZoneName] NVARCHAR(50) NULL,
	[DestinationBasingPointVersionID] BIGINT NULL,
	[DestinationBasingPointName] NVARCHAR(50) NULL,
	[DestinationServicePointVersionID] BIGINT NULL,
	[DestinationServicePointName] NVARCHAR(50) NULL,
	[DestinationPostalCodeVersionID] BIGINT NULL,
	[DestinationPostalCodeName] NVARCHAR(10) NULL,
	[DestinationPointTypeVersionID] BIGINT NOT NULL,
	[DestinationPointTypeName] NVARCHAR(50) NOT NULL,
	[DestinationCode] NVARCHAR(50) NOT NULL,
	[LaneHashCode] VARBINARY(8000) NOT NULL,
	[BasingPointHashCode] VARBINARY(8000) NULL,
	[Cost]        NVARCHAR(MAX) NULL,
	[DoNotMeetCommitment] BIT NOT NULL,
	[Commitment] NVARCHAR(MAX) NULL,
	[CustomerRate] NVARCHAR(MAX) NOT NULL,
	[CustomerDiscount] NVARCHAR(MAX) NOT NULL,
	[DrRate] NVARCHAR(MAX) NOT NULL,
	[PartnerRate] NVARCHAR(MAX) NOT NULL,
	[PartnerDiscount] NVARCHAR(MAX) NOT NULL,
	[Profitability] NVARCHAR(MAX) NOT NULL,
	[PickupCount] INT NULL,
	[DeliveryCount] INT NULL,
	[DockAdjustment] DECIMAL(19,6) NULL,
	[Margin] NVARCHAR(MAX) NOT NULL,
	[Density] NVARCHAR(MAX) NOT NULL,
	[PickupCost] NVARCHAR(MAX) NOT NULL,
	[DeliveryCost] NVARCHAR(MAX) NOT NULL,
	[AccessorialsValue] NVARCHAR(MAX) NOT NULL,
	[AccessorialsPercentage] NVARCHAR(MAX) NOT NULL
)

INSERT INTO @RequestSectionLaneHistory
(
	[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLaneVersionID],
	[RequestSectionLaneID],
	[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
SELECT VN.[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	RSLH.[RequestSectionLaneVersionID],
	RSLH.[RequestSectionLaneID],
	[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM dbo.RequestSectionLane_History RSLH
INNER JOIN @LatestRequestSectionLaneVersionNum VN ON RSLH.[RequestSectionLaneID] = VN.[RequestSectionLaneID]
WHERE RSLH.RequestSectionLaneVersionID IN (SELECT RequestSectionLaneVersionID FROM @RequestSectionLaneVersionID)
UNION
SELECT VN.[VersionNum],
	0,
    [IsInactiveViewable],
	RSLH.[RequestSectionLaneVersionID],
	RSLH.[RequestSectionLaneID],
	[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM dbo.RequestSectionLane_History RSLH
INNER JOIN @LatestRequestSectionLaneVersionNum VN ON RSLH.RequestSectionLaneVersionID = VN.RequestSectionLaneVersionID
WHERE VN.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM @RequestSectionLaneToBeDeleted)

UPDATE dbo.RequestSectionLane_History
SET IsLatestVersion = 0
WHERE dbo.RequestSectionLane_History.RequestSectionLaneVersionID IN (SELECT RequestSectionLaneVersionID FROM @LatestRequestSectionLaneVersionNum)

UPDATE dbo.RequestSectionLane
SET [IsActive] = A.[IsActive],
	[IsInactiveViewable] = A.[IsInactiveViewable],
	[LaneNumber] = A.[LaneNumber],
	[IsPublished] = A.[IsPublished],
	[IsEdited] = A.[IsEdited],
	[IsDuplicate] = A.[IsDuplicate],
	[IsBetween] = A.[IsBetween],
	[IsLaneGroup] = A.[IsLaneGroup],
	[OriginProvinceID] = O_P.[ProvinceID],
	[OriginProvinceCode] = A.[OriginProvinceCode],
	[OriginRegionID] = O_R.[RegionID],
	[OriginRegionCode] = A.[OriginRegionCode],
	[OriginCountryID] = O_C.[CountryID],
	[OriginCountryCode] = A.[OriginCountryCode],
	[OriginTerminalID] = O_T.[TerminalID],
	[OriginTerminalCode] = A.[OriginTerminalCode],
	[OriginZoneID] = O_Z.[ZoneID],
	[OriginZoneName] = A.[OriginZoneName],
	[OriginBasingPointID] = O_BP.[BasingPointID],
	[OriginBasingPointName] = A.[OriginBasingPointName],
	[OriginServicePointID] = O_SP.[ServicePointID],
	[OriginServicePointName] = A.[OriginServicePointName],
	[OriginPostalCodeID] = O_PC.[PostalCodeID],
	[OriginPostalCodeName] = A.[OriginPostalCodeName],
	[OriginPointTypeID] = O_PT.[RequestSectionLanePointTypeID],
	[OriginPointTypeName] = A.[OriginPointTypeName],
	[OriginCode] = A.[OriginCode],
	[DestinationProvinceID] = D_P.[ProvinceID],
	[DestinationProvinceCode] = A.[DestinationProvinceCode],
	[DestinationRegionID] = D_R.[RegionID],
	[DestinationRegionCode] = A.[DestinationRegionCode],
	[DestinationCountryID] = D_C.[CountryID],
	[DestinationCountryCode] = A.[DestinationCountryCode],
	[DestinationTerminalID] = D_T.[TerminalID],
	[DestinationTerminalCode] = A.[DestinationTerminalCode],
	[DestinationZoneID] = D_Z.[ZoneID],
	[DestinationZoneName] = A.[DestinationZoneName],
	[DestinationBasingPointID] = D_BP.[BasingPointID],
	[DestinationBasingPointName] = A.[DestinationBasingPointName],
	[DestinationServicePointID] = D_SP.[ServicePointID],
	[DestinationServicePointName] = A.[DestinationServicePointName],
	[DestinationPostalCodeID] = D_PC.[PostalCodeID],
	[DestinationPostalCodeName] = A.[DestinationPostalCodeName],
	[DestinationPointTypeID] = D_PT.[RequestSectionLanePointTypeID],
	[DestinationPointTypeName] = A.[DestinationPointTypeName],
	[DestinationCode] = A.[DestinationCode],
	[LaneHashCode] = A.[LaneHashCode],
	[BasingPointHashCode] = A.[BasingPointHashCode],
	[Cost] = A.[Cost],
	[DoNotMeetCommitment] = A.[DoNotMeetCommitment],
	[Commitment] = A.[Commitment],
	[CustomerRate] = A.[CustomerRate],
	[CustomerDiscount] = A.[CustomerDiscount],
	[DrRate] = A.[DrRate],
	[PartnerRate] = A.[PartnerRate],
	[PartnerDiscount] = A.[PartnerDiscount],
	[Profitability] = A.[Profitability],
	[PickupCount] = A.[PickupCount],
	[DeliveryCount] = A.[DeliveryCount],
	[DockAdjustment] = A.[DockAdjustment],
	[Margin] = A.[Margin],
	[Density] = A.[Density],
	[PickupCost] = A.[PickupCost],
	[DeliveryCost] = A.[DeliveryCost],
	[AccessorialsValue] = A.[AccessorialsValue],
	[AccessorialsPercentage] = A.[AccessorialsPercentage]
FROM @RequestSectionLaneHistory A
LEFT JOIN dbo.[Province_History] O_P ON A.[OriginProvinceVersionID] = O_P.[ProvinceVersionID]
LEFT JOIN dbo.[Province_History] D_P ON A.[DestinationProvinceVersionID] = D_P.[ProvinceVersionID]
LEFT JOIN dbo.[Region_History] O_R ON A.[OriginRegionVersionID] = O_R.[RegionVersionID]
LEFT JOIN dbo.[Region_History] D_R ON A.[DestinationRegionVersionID] = D_R.[RegionVersionID]
LEFT JOIN dbo.[Country_History] O_C ON A.[OriginCountryVersionID] = O_C.[CountryVersionID]
LEFT JOIN dbo.[Country_History] D_C ON A.[DestinationCountryVersionID] = D_C.[CountryVersionID]
LEFT JOIN dbo.[Terminal_History] O_T ON A.[OriginTerminalVersionID] = O_T.[TerminalVersionID]
LEFT JOIN dbo.[Terminal_History] D_T ON A.[DestinationTerminalVersionID] = D_T.[TerminalVersionID]
LEFT JOIN dbo.[Zone_History] O_Z ON A.[OriginZoneVersionID] = O_Z.[ZoneVersionID]
LEFT JOIN dbo.[Zone_History] D_Z ON A.[DestinationZoneVersionID] = D_Z.[ZoneVersionID]
LEFT JOIN dbo.[BasingPoint_History] O_BP ON A.[OriginBasingPointVersionID] = O_BP.[BasingPointVersionID]
LEFT JOIN dbo.[BasingPoint_History] D_BP ON A.[DestinationBasingPointVersionID] = D_BP.[BasingPointVersionID]
LEFT JOIN dbo.[ServicePoint_History] O_SP ON A.[OriginServicePointVersionID] = O_SP.[ServicePointVersionID]
LEFT JOIN dbo.[ServicePoint_History] D_SP ON A.[DestinationServicePointVersionID] = D_SP.[ServicePointVersionID]
LEFT JOIN dbo.[PostalCode_History] O_PC ON A.[OriginPostalCodeVersionID] = O_PC.[PostalCodeVersionID]
LEFT JOIN dbo.[PostalCode_History] D_PC ON A.[DestinationPostalCodeVersionID] = D_PC.[PostalCodeVersionID]
LEFT JOIN dbo.[RequestSectionLanePointType_History] O_PT ON A.[OriginPointTypeVersionID] = O_PT.[RequestSectionLanePointTypeVersionID]
LEFT JOIN dbo.[RequestSectionLanePointType_History] D_PT ON A.[DestinationPointTypeVersionID] = D_PT.[RequestSectionLanePointTypeVersionID]
WHERE dbo.RequestSectionLane.RequestSectionLaneID = A.RequestSectionLaneID

SELECT @ERROR3 = @@ERROR

-- Insert INTO RequestSectionLane_History

DECLARE @RequestSectionLaneVersion TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionLaneVersionID] BIGINT        NOT NULL
)

INSERT INTO dbo.RequestSectionLane_History
(
	[VersionNum],
    [IsLatestVersion],
    [UpdatedOn],
    [UpdatedBy],
    [Comments],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLaneID],
	[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
OUTPUT INSERTED.RequestSectionLaneVersionID,
	INSERTED.RequestSectionLaneID
INTO @RequestSectionLaneVersion
(
	RequestSectionLaneVersionID,
	RequestSectionLaneID
)
SELECT [VersionNum]+1,
	1,
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	[IsActive],
    [IsInactiveViewable],
	RSLH.[RequestSectionLaneID],
	RS.[RequestSectionVersionID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsBetween],
	[IsLaneGroup],
	[OriginProvinceVersionID],
	[OriginProvinceCode],
	[OriginRegionVersionID],
	[OriginRegionCode],
	[OriginCountryVersionID],
	[OriginCountryCode],
	[OriginTerminalVersionID],
	[OriginTerminalCode],
	[OriginZoneVersionID],
	[OriginZoneName],
	[OriginBasingPointVersionID],
	[OriginBasingPointName],
	[OriginServicePointVersionID],
	[OriginServicePointName],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[OriginPointTypeVersionID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceVersionID],
	[DestinationProvinceCode],
	[DestinationRegionVersionID],
	[DestinationRegionCode],
	[DestinationCountryVersionID],
	[DestinationCountryCode],
	[DestinationTerminalVersionID],
	[DestinationTerminalCode],
	[DestinationZoneVersionID],
	[DestinationZoneName],
	[DestinationBasingPointVersionID],
	[DestinationBasingPointName],
	[DestinationServicePointVersionID],
	[DestinationServicePointName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[DestinationPointTypeVersionID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[DoNotMeetCommitment],
	[Commitment],
	[CustomerRate],
	[CustomerDiscount],
	[DrRate],
	[PartnerRate],
	[PartnerDiscount],
	[Profitability],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM @RequestSectionLaneHistory RSLH
INNER JOIN @RequestSectionLaneID RSL ON RSLH.RequestSectionLaneID = RSL.RequestSectionLaneID
INNER JOIN @RequestSectionVersion RS ON RSL.RequestSectionID = RS.RequestSectionID

SELECT @ERROR4 = @@ERROR

DECLARE @RequestSectionLanePricingPointVersionID TABLE
(
	[RequestSectionLanePricingPointVersionID] BIGINT        NOT NULL,
	[RequestSectionLanePricingPointID] BIGINT        NOT NULL,
	[RequestSectionLaneVersionID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLanePricingPointVersionID
(
	[RequestSectionLanePricingPointVersionID],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID]
)
SELECT [RequestSectionLanePricingPointVersionID], [RequestSectionLanePricingPointID], [RequestSectionLaneVersionID]
FROM
(SELECT RSLH.[RequestSectionLanePricingPointVersionID],
	RSLH.[RequestSectionLanePricingPointID],
	RSLH.[RequestSectionLaneVersionID],
	ROW_NUMBER() OVER(PARTITION BY [RequestSectionLanePricingPointID] ORDER BY VersionNum DESC) AS RN
FROM dbo.RequestSectionLanePricingPoint_History RSLH
INNER JOIN @RequestSectionLaneVersionID RSV ON RSLH.[RequestSectionLaneVersionID] = RSV.[RequestSectionLaneVersionID]) AS A
WHERE A.RN = 1

DECLARE @RequestSectionLanePricingPointID TABLE
(
	[RequestSectionLaneID] BIGINT        NOT NULL,
	[RequestSectionLanePricingPointID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLanePricingPointID
(
	[RequestSectionLaneID],
	[RequestSectionLanePricingPointID]
)
SELECT [RequestSectionLaneID], [RequestSectionLanePricingPointID]
FROM dbo.RequestSectionLanePricingPoint
WHERE [RequestSectionLaneID] IN (SELECT [RequestSectionLaneID] FROM @RequestSectionLaneID)

DECLARE @RequestSectionLanePricingPointToBeDeleted TABLE
(
	[RequestSectionLanePricingPointID] BIGINT        NOT NULL
)
INSERT INTO @RequestSectionLanePricingPointToBeDeleted
(
	[RequestSectionLanePricingPointID]
)
SELECT [RequestSectionLanePricingPointID]
FROM @RequestSectionLanePricingPointID
WHERE [RequestSectionLanePricingPointID] NOT IN (SELECT [RequestSectionLanePricingPointID] FROM @RequestSectionLanePricingPointVersionID)

DECLARE @LatestRequestSectionLanePricingPointVersionNum TABLE
(
	[RequestSectionLanePricingPointID] BIGINT        NOT NULL,
	[RequestSectionLanePricingPointVersionID] BIGINT        NOT NULL,
	[VersionNum] INT NOT NULL
)
INSERT INTO @LatestRequestSectionLanePricingPointVersionNum
(
	[RequestSectionLanePricingPointID],
	[RequestSectionLanePricingPointVersionID],
	[VersionNum]
)
SELECT RSH.[RequestSectionLanePricingPointID],
	RSH.[RequestSectionLanePricingPointVersionID],
	RSH.[VersionNum]
FROM dbo.RequestSectionLanePricingPoint_History RSH
INNER JOIN @RequestSectionLanePricingPointID RS ON RSH.[RequestSectionLanePricingPointID] = RS.[RequestSectionLanePricingPointID]
WHERE RSH.IsLatestVersion = 1

DECLARE @RequestSectionLanePricingPointHistory TABLE
(
	[VersionNum]          INT             NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[RequestSectionLanePricingPointVersionID]          BIGINT     NOT NULL,
	[RequestSectionLanePricingPointID]          BIGINT     NOT NULL,
	[RequestSectionLaneVersionID]          BIGINT     NOT NULL,
    [PricingPointNumber]        NVARCHAR(32) NOT NULL,
	[OriginPostalCodeVersionID] BIGINT NULL,
	[OriginPostalCodeName] NVARCHAR(10) NULL,
	[DestinationPostalCodeVersionID] BIGINT NULL,
	[DestinationPostalCodeName] NVARCHAR(10) NULL,
	[PricingPointHashCode] VARBINARY(8000) NOT NULL,
	[Cost]        NVARCHAR(MAX) NULL,
	[DrRate] NVARCHAR(MAX) NOT NULL,
	[FakRate] NVARCHAR(MAX) NOT NULL,
	[Profitability] NVARCHAR(MAX) NOT NULL,
	[SplitsAll] NVARCHAR(MAX) NOT NULL,
	[SplitsAllUsagePercentage] DECIMAL(19,6) NOT NULL,
	[PickupCount] INT NULL,
	[DeliveryCount] INT NULL,
	[DockAdjustment] DECIMAL(19,6) NULL,
	[Margin] NVARCHAR(MAX) NOT NULL,
	[Density] NVARCHAR(MAX) NOT NULL,
	[PickupCost] NVARCHAR(MAX) NOT NULL,
	[DeliveryCost] NVARCHAR(MAX) NOT NULL,
	[AccessorialsValue] NVARCHAR(MAX) NOT NULL,
	[AccessorialsPercentage] NVARCHAR(MAX) NOT NULL
)
INSERT INTO @RequestSectionLanePricingPointHistory
(
	[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointVersionID],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
SELECT VN.[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	PPH.[RequestSectionLanePricingPointVersionID],
	PPH.[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM dbo.RequestSectionLanePricingPoint_History PPH
INNER JOIN @LatestRequestSectionLanePricingPointVersionNum VN ON PPH.[RequestSectionLanePricingPointID] = VN.[RequestSectionLanePricingPointID]
WHERE PPH.RequestSectionLanePricingPointVersionID IN (SELECT RequestSectionLanePricingPointVersionID FROM @RequestSectionLanePricingPointVersionID)
UNION
SELECT VN.[VersionNum],
	0,
    [IsInactiveViewable],
	PPH.[RequestSectionLanePricingPointVersionID],
	PPH.[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM dbo.RequestSectionLanePricingPoint_History PPH
INNER JOIN @LatestRequestSectionLanePricingPointVersionNum VN ON PPH.RequestSectionLanePricingPointVersionID = VN.RequestSectionLanePricingPointVersionID
WHERE VN.RequestSectionLanePricingPointID IN (SELECT RequestSectionLanePricingPointID FROM @RequestSectionLanePricingPointToBeDeleted)

UPDATE dbo.RequestSectionLanePricingPoint_History
SET IsLatestVersion = 0
WHERE dbo.RequestSectionLanePricingPoint_History.[RequestSectionLanePricingPointVersionID] IN (SELECT [RequestSectionLanePricingPointVersionID] FROM @LatestRequestSectionLanePricingPointVersionNum)

UPDATE dbo.RequestSectionLanePricingPoint
SET [IsActive] = A.[IsActive],
	[IsInactiveViewable] = A.[IsInactiveViewable],
	[PricingPointNumber] = A.[PricingPointNumber],
	[OriginPostalCodeID] = O_PC.PostalCodeID,
	[OriginPostalCodeName] = A.[OriginPostalCodeName],
	[DestinationPostalCodeID] = D_PC.PostalCodeID,
	[DestinationPostalCodeName] = A.[DestinationPostalCodeName],
	[PricingPointHashCode] = A.[PricingPointHashCode],
	[Cost] = A.[Cost],
	[DrRate] = A.[DrRate],
	[FakRate] = A.[FakRate],
	[Profitability] = A.[Profitability],
	[SplitsAll] = A.[SplitsAll],
	[SplitsAllUsagePercentage] = A.[SplitsAllUsagePercentage],
	[PickupCount] = A.[PickupCount],
	[DeliveryCount] = A.[DeliveryCount],
	[DockAdjustment] = A.[DockAdjustment],
	[Margin] = A.[Margin],
	[Density] = A.[Density],
	[PickupCost] = A.[PickupCost],
	[DeliveryCost] = A.[DeliveryCost],
	[AccessorialsValue] = A.[AccessorialsValue],
	[AccessorialsPercentage] = A.[AccessorialsPercentage]
FROM @RequestSectionLanePricingPointHistory A
LEFT JOIN dbo.PostalCode_History O_PC ON A.OriginPostalCodeVersionID = O_PC.PostalCodeVersionID
LEFT JOIN dbo.PostalCode_History D_PC ON A.DestinationPostalCodeVersionID = D_PC.PostalCodeVersionID
WHERE dbo.RequestSectionLanePricingPoint.RequestSectionLanePricingPointID = A.RequestSectionLanePricingPointID

SELECT @ERROR5 = @@ERROR

INSERT INTO RequestSectionLanePricingPoint_History
(
	[VersionNum],
    [IsLatestVersion],
    [UpdatedOn],
    [UpdatedBy],
    [Comments],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
SELECT [VersionNum]+1,
	1,
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	[IsActive],
    [IsInactiveViewable],
	PPH.[RequestSectionLanePricingPointID],
	RSL.[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM @RequestSectionLanePricingPointHistory PPH
INNER JOIN @RequestSectionLanePricingPointID PP ON PPH.RequestSectionLanePricingPointID = PP.RequestSectionLanePricingPointID
INNER JOIN @RequestSectionLaneVersion RSL ON PP.RequestSectionLaneID = RSL.RequestSectionLaneID

SELECT @ERROR6 = @@ERROR

	IF (@ERROR1 <> 0) OR (@ERROR2 <> 0) OR (@ERROR3 <> 0) OR (@ERROR4 <> 0) OR (@ERROR5 <> 0) OR (@ERROR6 <> 0)
	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestProfile_Insert]
	@RequestNumber        NVARCHAR (32),
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL,
	@RequestProfileID NVARCHAR (32) output
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RequestProfile table
(
    [RequestProfileID]          BIGINT        NOT NULL,
    [RequestNumber]        NVARCHAR (32) NOT NULL,
	[IsValidData]	BIT NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[RequestProfile]
(
	[RequestNumber],
	[IsValidData],
	[IsActive],
	[IsInactiveViewable],
	[ClassControls],
	[Competitors],
	[ShippingControls],
	[Shipments],
	[FreightElements]
)
OUTPUT INSERTED.[RequestProfileID],
    INSERTED.[RequestNumber],
	INSERTED.[IsValidData]
INTO @RequestProfile
(
	[RequestProfileID],
	[RequestNumber],
	[IsValidData]
)
VALUES
(
    @RequestNumber,
	0,
	1,
	1,
	'[]',
	'[]',
	'[]',
	'[]',
	'[]'
)

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RequestProfile_History]
(
	[RequestProfileID],
    [RequestNumber],
	[IsValidData],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments],
	[ClassControls],
	[Competitors],
	[ShippingControls],
	[Shipments],
	[FreightElements]
)
SELECT R.[RequestProfileID],
    R.[RequestNumber],
	R.[IsValidData],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments,
	 '[]',
	'[]',
	'[]',
	'[]',
	'[]'
FROM @RequestProfile R

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

SELECT @RequestProfileID = R.RequestProfileID
FROM @RequestProfile R
WHERE R.RequestNumber = @RequestNumber

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> 1) OR (@ROWCOUNT2 <> 1)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT1);
	IF (@ROWCOUNT2 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT2);
	RETURN 0
	END

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestSectionLanePointType_Insert_Bulk]
	@RequestSectionLanePointTypeTableType RequestSectionLanePointTypeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @RequestSectionLanePointTypeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RequestSectionLanePointType table
(
	[RequestSectionLanePointTypeID] [bigint] NOT NULL,
	[RequestSectionLanePointTypeName] [nvarchar](50) NOT NULL,
	[ServiceOfferingID] [bigint] NOT NULL,
	[IsDensityPricing] [bit] NOT NULL,
	[LocationHierarchy] [int] NOT NULL,
	[IsGroupType] [bit] NOT NULL,
	[IsPointType] [bit] NOT NULL
)

BEGIN TRAN


DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)


INSERT INTO [dbo].[RequestSectionLanePointType]
(
	[RequestSectionLanePointTypeName],
	[ServiceOfferingID],
	[IsDensityPricing],
	[LocationHierarchy],
	[IsGroupType],
	[IsPointType],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.RequestSectionLanePointTypeID,
	 INSERTED.RequestSectionLanePointTypeName,
	 INSERTED.ServiceOfferingID,
	 INSERTED.[IsDensityPricing],
	 INSERTED.LocationHierarchy,
	 INSERTED.[IsGroupType],
	 INSERTED.[IsPointType]
INTO @RequestSectionLanePointType
(
	[RequestSectionLanePointTypeID],
	[RequestSectionLanePointTypeName],
	[ServiceOfferingID],
	[IsDensityPricing],
	[LocationHierarchy],
	[IsGroupType],
	[IsPointType]
)
SELECT RSL.[RequestSectionLanePointTypeName],
	SO.[ServiceOfferingID],
	RSL.[IsDensityPricing],
	RSL.[LocationHierarchy],
	RSL.[IsGroupType],
	RSL.[IsPointType],
	1,
	1
FROM @RequestSectionLanePointTypeTableType RSL
INNER JOIN dbo.ServiceOffering SO ON RSL.[ServiceOfferingName] = SO.[ServiceOfferingName]

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History]
WHERE [IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @RequestSectionLanePointType)

INSERT INTO [dbo].[RequestSectionLanePointType_History]
(
	[RequestSectionLanePointTypeID],
	[RequestSectionLanePointTypeName],
	[ServiceOfferingVersionID],
	[IsDensityPricing],
	[LocationHierarchy],
	[IsGroupType],
	[IsPointType],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT RSL.[RequestSectionLanePointTypeID],
	 RSL.[RequestSectionLanePointTypeName],
	 SO.[ServiceOfferingVersionID],
	 RSL.[IsDensityPricing],
	 RSL.[LocationHierarchy],
	 RSL.[IsGroupType],
	 RSL.[IsPointType],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @RequestSectionLanePointType RSL
INNER JOIN @ServiceOfferingVersionID SO ON RSL.[ServiceOfferingID] = SO.[ServiceOfferingID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestSectionLanePricingPoint_Copy]
	@RequestSectionLanePricingPointIDs NVARCHAR(MAX),
	@SourceRequestSectionLaneID BIGINT,
	@DestinationRequestSectionID BIGINT,
	@IsMove BIT,
	@DestinationRequestSectionLaneID BIGINT = NULL,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Duplicating lanes.';

BEGIN TRAN

	DECLARE @RequestSectionLanePricingPoints IDTableType;
	INSERT INTO @RequestSectionLanePricingPoints
	(
		ID
	)
	SELECT [value]
	FROM OPENJSON(@RequestSectionLanePricingPointIDs)

	DECLARE @FilterCount INT;
	SELECT @FilterCount = COUNT(*) FROM @RequestSectionLanePricingPoints;

	IF @FilterCount = 0
	BEGIN
		INSERT INTO @RequestSectionLanePricingPoints
		(
			ID
		)
		SELECT RequestSectionLanePricingPointID
		FROM dbo.RequestSectionLanePricingPoint
		WHERE RequestSectionLaneID = @SourceRequestSectionLaneID AND [IsActive] = 1 AND [IsInactiveViewable] = 1
	END

	IF @DestinationRequestSectionLaneID IS NOT NULL AND @DestinationRequestSectionLaneID > 0
	BEGIN
		DECLARE @RequestSectionLanePricingPointTableType RequestSectionLanePricingPointTableType;

		INSERT INTO @RequestSectionLanePricingPointTableType
		(
			[IsActive],
			[IsInactiveViewable],
			[RequestSectionLaneID],
			[PricingPointNumber],
			[OriginPostalCodeID],
			[OriginPostalCodeName],
			[DestinationPostalCodeID],
			[DestinationPostalCodeName],
			[PricingPointHashCode],
			[Cost],
			[DrRate],
			[FakRate],
			[Profitability],
			[SplitsAll],
			[SplitsAllUsagePercentage],
			[PickupCount],
			[DeliveryCount],
			[DockAdjustment],
			[Margin],
			[Density],
			[PickupCost],
			[DeliveryCost],
			[AccessorialsValue],
			[AccessorialsPercentage]
		)
		SELECT 1,
			1,
			@DestinationRequestSectionLaneID,
			REPLACE(NEWID(), '-', ''),
			[OriginPostalCodeID],
			[OriginPostalCodeName],
			[DestinationPostalCodeID],
			[DestinationPostalCodeName],
			[PricingPointHashCode],
			'{}',
			[DrRate],
			[FakRate],
			[Profitability],
			[SplitsAll],
			[SplitsAllUsagePercentage],
			[PickupCount],
			[DeliveryCount],
			[DockAdjustment],
			[Margin],
			[Density],
			[PickupCost],
			[DeliveryCost],
			[AccessorialsValue],
			[AccessorialsPercentage]
		FROM dbo.RequestSectionLanePricingPoint RSLPP
		WHERE RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPoints)

		EXEC dbo.RequestSectionLanePricingPoint_Insert_Bulk @RequestSectionLanePricingPointTableType, @UpdatedBy, @Comments

		IF @IsMove = 1
		BEGIN
			Update dbo.RequestSectionLanePricingPoint
			SET IsActive = 0
			WHERE dbo.RequestSectionLanePricingPoint.RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPoints)

			DECLARE @RequestSectionLaneTableTypeID  IDTableType;

			DECLARE @SourcePricingPointsCount INT;
			SELECT @SourcePricingPointsCount = COUNT(*) FROM dbo.RequestSectionLanePricingPoint WHERE RequestSectionLaneID = @SourceRequestSectionLaneID AND [IsActive] = 1 AND [IsInactiveViewable] = 1

			IF @SourcePricingPointsCount = 0
			BEGIN
				Update dbo.RequestSectionLane
				SET IsLaneGroup = 0
				WHERE dbo.RequestSectionLane.RequestSectionLaneID = @SourceRequestSectionLaneID

				INSERT INTO @RequestSectionLaneTableTypeID (ID) SELECT @SourceRequestSectionLaneID
			END

			DECLARE @DestinationIsLaneGroup BIT;
			SELECT @DestinationIsLaneGroup = IsLaneGroup FROM dbo.RequestSectionLane WHERE RequestSectionLaneID = @DestinationRequestSectionLaneID

			IF @DestinationIsLaneGroup = 0
			BEGIN
				Update dbo.RequestSectionLane
				SET IsLaneGroup = 1
				WHERE dbo.RequestSectionLane.RequestSectionLaneID = @DestinationRequestSectionLaneID

				INSERT INTO @RequestSectionLaneTableTypeID (ID) SELECT @DestinationRequestSectionLaneID
			END

			DECLARE @Count INT;
			SELECT @Count = COUNT(*) FROM @RequestSectionLaneTableTypeID

			IF @Count > 0
			BEGIN
				EXEC dbo.RequestSectionLane_History_Update @RequestSectionLaneTableTypeID, @UpdatedBy, @Comments
			END
			ELSE
			BEGIN
				EXEC dbo.RequestSectionLanePricingPoint_History_Update @RequestSectionLanePricingPoints, @UpdatedBy, @Comments
			END
		END
	END
	--ELSE
	--BEGIN
		--DECLARE @RequestSectionLaneTableType RequestSectionLaneTableType;

		--INSERT INTO @RequestSectionLaneTableType
		--(
		--	[IsActive],
		--	[IsInactiveViewable],
		--	[RequestSectionID],
		--	[LaneNumber],
		--	[IsPublished],
		--	[IsEdited],
		--	[IsDuplicate],
		--	[IsBetween],
		--	[IsLaneGroup],
		--	[OriginProvinceID],
		--	[OriginProvinceCode],
		--	[OriginRegionID],
		--	[OriginRegionCode],
		--	[OriginCountryID],
		--	[OriginCountryCode],
		--	[OriginTerminalID],
		--	[OriginTerminalCode],
		--	[OriginZoneID],
		--	[OriginZoneName],
		--	[OriginBasingPointID],
		--	[OriginBasingPointName],
		--	[OriginServicePointID],
		--	[OriginServicePointName],
		--	[OriginPostalCodeID],
		--	[OriginPostalCodeName],
		--	[OriginPointTypeID],
		--	[OriginPointTypeName],
		--	[OriginCode],
		--	[DestinationProvinceID],
		--	[DestinationProvinceCode],
		--	[DestinationRegionID],
		--	[DestinationRegionCode],
		--	[DestinationCountryID],
		--	[DestinationCountryCode],
		--	[DestinationTerminalID],
		--	[DestinationTerminalCode],
		--	[DestinationZoneID],
		--	[DestinationZoneName],
		--	[DestinationBasingPointID],
		--	[DestinationBasingPointName],
		--	[DestinationServicePointID],
		--	[DestinationServicePointName],
		--	[DestinationPostalCodeID],
		--	[DestinationPostalCodeName],
		--	[DestinationPointTypeID],
		--	[DestinationPointTypeName],
		--	[DestinationCode],
		--	[LaneHashCode],
		--	[BasingPointHashCode],
		--	[Cost],
		--	[RequestSectionLaneID]
		--)
		--SELECT 1,
		--	1,
		--	@DestinationRequestSectionID,
		--	REPLACE(NEWID(), '-', ''),
		--	0,
		--	0,
		--	0,
		--	0,
		--	0,
		--	[OriginProvinceID],
		--	[OriginProvinceCode],
		--	[OriginRegionID],
		--	[OriginRegionCode],
		--	[OriginCountryID],
		--	[OriginCountryCode],
		--	[OriginTerminalID],
		--	[OriginTerminalCode],
		--	[OriginZoneID],
		--	[OriginZoneName],
		--	[OriginBasingPointID],
		--	[OriginBasingPointName],
		--	[OriginServicePointID],
		--	[OriginServicePointName],
		--	[OriginPostalCodeID],
		--	[OriginPostalCodeName],
		--	[OriginPointTypeID],
		--	[OriginPointTypeName],
		--	[OriginCode],
		--	[DestinationProvinceID],
		--	[DestinationProvinceCode],
		--	[DestinationRegionID],
		--	[DestinationRegionCode],
		--	[DestinationCountryID],
		--	[DestinationCountryCode],
		--	[DestinationTerminalID],
		--	[DestinationTerminalCode],
		--	[DestinationZoneID],
		--	[DestinationZoneName],
		--	[DestinationBasingPointID],
		--	[DestinationBasingPointName],
		--	[DestinationServicePointID],
		--	[DestinationServicePointName],
		--	[DestinationPostalCodeID],
		--	[DestinationPostalCodeName],
		--	[DestinationPointTypeID],
		--	[DestinationPointTypeName],
		--	[DestinationCode],
		--	[LaneHashCode],
		--	[BasingPointHashCode],
		--	@Cost,
		--	[RequestSectionLaneID]
		--FROM dbo.RequestSectionLane RSL

		--IF @IsMove = 1
		--BEGIN
		--	Update dbo.RequestSectionLane
		--	SET IsActive = 0
		--	WHERE dbo.RequestSectionLane.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM @RequestSectionLaneTableType)

		--	EXEC dbo.RequestLane_Count @RequestLaneID
		--END
	--END

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestSectionLanePricingPoint_Delete]
	@RequestSectionLaneID BIGINT,
	@RequestSectionLanePricingPointIDs NVARCHAR(MAX),
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

	DECLARE @RequestSectionLanePricingPoints IDTableType;
	INSERT INTO @RequestSectionLanePricingPoints
	(
		ID
	)
	SELECT [value]
	FROM OPENJSON(@RequestSectionLanePricingPointIDs)

	DECLARE @FilterCount INT;
	SELECT @FilterCount = COUNT(*) FROM @RequestSectionLanePricingPoints;

	IF @FilterCount = 0
	BEGIN
		INSERT INTO @RequestSectionLanePricingPoints
		(
			ID
		)
		SELECT RequestSectionLanePricingPointID
		FROM dbo.RequestSectionLanePricingPoint
		WHERE RequestSectionLaneID = @RequestSectionLaneID AND [IsActive] = 1 AND [IsInactiveViewable] = 1
	END

	Update dbo.RequestSectionLanePricingPoint
	SET IsActive = 0
	WHERE dbo.RequestSectionLanePricingPoint.RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPoints)

	DECLARE @RequestSectionLaneTableTypeID  IDTableType;

	DECLARE @SourcePricingPointsCount INT;
	SELECT @SourcePricingPointsCount = COUNT(*) FROM dbo.RequestSectionLanePricingPoint WHERE RequestSectionLaneID = @RequestSectionLaneID AND [IsActive] = 1 AND [IsInactiveViewable] = 1

	IF @SourcePricingPointsCount = 0
	BEGIN
		Update dbo.RequestSectionLane
		SET IsLaneGroup = 0
		WHERE dbo.RequestSectionLane.RequestSectionLaneID = @RequestSectionLaneID

		INSERT INTO @RequestSectionLaneTableTypeID (ID) SELECT @RequestSectionLaneID
		EXEC dbo.RequestSectionLane_History_Update @RequestSectionLaneTableTypeID, @UpdatedBy, @Comments
	END
	ELSE
	BEGIN
		EXEC dbo.RequestSectionLanePricingPoint_History_Update @RequestSectionLanePricingPoints, @UpdatedBy, @Comments
	END

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestSectionLanePricingPoint_History_Update]
	@RequestSectionLanePricingPointTableTypeID IDTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Saving RequestLane_History.';

BEGIN TRAN

DECLARE @RequestSectionLaneTableTypeID IDTableType;

INSERT INTO @RequestSectionLaneTableTypeID
(
	ID
)
SELECT DISTINCT RSLPP.RequestSectionLaneID
FROM dbo.RequestSectionLanePricingPoint RSLPP
WHERE RSLPP.RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPointTableTypeID)

DECLARE @RequestSectionLaneVersion TABLE
(
	RequestSectionLaneID BIGINT NOT NULL,
	RequestSectionLaneVersionID BIGINT NOT NULL
)

INSERT INTO @RequestSectionLaneVersion
(
	RequestSectionLaneID,
	RequestSectionLaneVersionID
)
SELECT RSLH.RequestSectionLaneID,
	RSLH.RequestSectionLaneVersionID
FROM dbo.RequestSectionLane_History RSLH
INNER JOIN @RequestSectionLaneTableTypeID RSL ON RSLH.RequestSectionLaneID = RSL.ID AND RSLH.IsLatestVersion = 1

DECLARE @RequestSectionLanePricingPointHistory TABLE
(
	[VersionNum]          INT             NOT NULL,
	[IsActive]           BIT           NOT NULL,
    [IsInactiveViewable] BIT           NOT NULL,
	[RequestSectionLanePricingPointVersionID]          BIGINT     NOT NULL,
	[RequestSectionLanePricingPointID]          BIGINT     NOT NULL,
	[RequestSectionLaneVersionID]          BIGINT     NOT NULL,
    [PricingPointNumber]        NVARCHAR(32) NOT NULL,
	[OriginPostalCodeVersionID] BIGINT NULL,
	[OriginPostalCodeName] NVARCHAR(10) NULL,
	[DestinationPostalCodeVersionID] BIGINT NULL,
	[DestinationPostalCodeName] NVARCHAR(10) NULL,
	[PricingPointHashCode] VARBINARY(8000) NOT NULL,
	[Cost]        NVARCHAR(MAX) NULL,
	[DrRate] NVARCHAR(MAX) NOT NULL,
	[FakRate] NVARCHAR(MAX) NOT NULL,
	[Profitability] NVARCHAR(MAX) NOT NULL,
	[SplitsAll] NVARCHAR(MAX) NOT NULL,
	[SplitsAllUsagePercentage] DECIMAL(19,6) NOT NULL,
	[PickupCount] INT NULL,
	[DeliveryCount] INT NULL,
	[DockAdjustment] DECIMAL(19,6) NULL,
	[Margin] NVARCHAR(MAX) NOT NULL,
	[Density] NVARCHAR(MAX) NOT NULL,
	[PickupCost] NVARCHAR(MAX) NOT NULL,
	[DeliveryCost] NVARCHAR(MAX) NOT NULL,
	[AccessorialsValue] NVARCHAR(MAX) NOT NULL,
	[AccessorialsPercentage] NVARCHAR(MAX) NOT NULL,
	[CostOverrideAccessorialsPercentage] NVARCHAR(MAX) NULL,
    [CostOverrideAccessorialsValue] NVARCHAR(MAX) NULL,
    [CostOverrideDeliveryCost] NVARCHAR(MAX) NULL,
    [CostOverrideDeliveryCount] INT NULL,
    [CostOverrideDensity] NVARCHAR(MAX) NULL,
    [CostOverrideDockAdjustment] DECIMAL(19,6) NULL,
    [CostOverrideMargin] NVARCHAR(MAX) NULL,
    [CostOverridePickupCost] NVARCHAR(MAX) NULL,
    [CostOverridePickupCount] INT NULL,
    [PricingRates] NVARCHAR(MAX) NULL,
    [WorkflowErrors] NVARCHAR(MAX) NULL
)
INSERT INTO @RequestSectionLanePricingPointHistory
(
	[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointVersionID],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage],
	[CostOverrideAccessorialsPercentage],
    [CostOverrideAccessorialsValue],
    [CostOverrideDeliveryCost],
    [CostOverrideDeliveryCount],
    [CostOverrideDensity],
    [CostOverrideDockAdjustment],
    [CostOverrideMargin],
    [CostOverridePickupCost],
    [CostOverridePickupCount],
    [PricingRates],
    [WorkflowErrors]
)
SELECT  [VersionNum],
	PP.[IsActive],
    PP.[IsInactiveViewable],
	[RequestSectionLanePricingPointVersionID],
	PPH.[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    PP.[PricingPointNumber],
	[OriginPostalCodeVersionID],
	PP.[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	PP.[DestinationPostalCodeName],
	PP.[PricingPointHashCode],
	PP.[Cost],
	PP.[DrRate],
	PP.[FakRate],
	PP.[Profitability],
	PP.[SplitsAll],
	PP.[SplitsAllUsagePercentage],
	PP.[PickupCount],
	PP.[DeliveryCount],
	PP.[DockAdjustment],
	PP.[Margin],
	PP.[Density],
	PP.[PickupCost],
	PP.[DeliveryCost],
	PP.[AccessorialsValue],
	PP.[AccessorialsPercentage],
	PP.[CostOverrideAccessorialsPercentage],
    PP.[CostOverrideAccessorialsValue],
    PP.[CostOverrideDeliveryCost],
    PP.[CostOverrideDeliveryCount],
    PP.[CostOverrideDensity],
    PP.[CostOverrideDockAdjustment],
    PP.[CostOverrideMargin],
    PP.[CostOverridePickupCost],
    PP.[CostOverridePickupCount],
    PP.[PricingRates],
    PP.[WorkflowErrors]
FROM dbo.RequestSectionLanePricingPoint_History PPH
INNER JOIN dbo.RequestSectionLanePricingPoint PP ON PPH.RequestSectionLanePricingPointID = PP.RequestSectionLanePricingPointID AND PPH.IsLatestVersion = 1
WHERE PP.RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPointTableTypeID)

UPDATE dbo.RequestSectionLanePricingPoint_History
SET IsLatestVersion = 0
WHERE dbo.RequestSectionLanePricingPoint_History.[RequestSectionLanePricingPointVersionID] IN (SELECT [RequestSectionLanePricingPointVersionID] FROM @RequestSectionLanePricingPointHistory)

SELECT @ERROR1 = @@ERROR

INSERT INTO RequestSectionLanePricingPoint_History
(
	[VersionNum],
    [IsLatestVersion],
    [UpdatedOn],
    [UpdatedBy],
    [Comments],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage],
	[CostOverrideAccessorialsPercentage],
    [CostOverrideAccessorialsValue],
    [CostOverrideDeliveryCost],
    [CostOverrideDeliveryCount],
    [CostOverrideDensity],
    [CostOverrideDockAdjustment],
    [CostOverrideMargin],
    [CostOverridePickupCost],
    [CostOverridePickupCount],
    [PricingRates],
    [WorkflowErrors]
)
SELECT [VersionNum]+1,
	1,
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	PPH.[IsActive],
    PPH.[IsInactiveViewable],
	PPH.[RequestSectionLanePricingPointID],
	RSL.[RequestSectionLaneVersionID],
    PPH.[PricingPointNumber],
	[OriginPostalCodeVersionID],
	PPH.[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	PPH.[DestinationPostalCodeName],
	PPH.[PricingPointHashCode],
	PPH.[Cost],
	PPH.[DrRate],
	PPH.[FakRate],
	PPH.[Profitability],
	PPH.[SplitsAll],
	PPH.[SplitsAllUsagePercentage],
	PPH.[PickupCount],
	PPH.[DeliveryCount],
	PPH.[DockAdjustment],
	PPH.[Margin],
	PPH.[Density],
	PPH.[PickupCost],
	PPH.[DeliveryCost],
	PPH.[AccessorialsValue],
	PPH.[AccessorialsPercentage],
	PPH.[CostOverrideAccessorialsPercentage],
    PPH.[CostOverrideAccessorialsValue],
    PPH.[CostOverrideDeliveryCost],
    PPH.[CostOverrideDeliveryCount],
    PPH.[CostOverrideDensity],
    PPH.[CostOverrideDockAdjustment],
    PPH.[CostOverrideMargin],
    PPH.[CostOverridePickupCost],
    PPH.[CostOverridePickupCount],
    PPH.[PricingRates],
    PPH.[WorkflowErrors]
FROM @RequestSectionLanePricingPointHistory PPH
INNER JOIN dbo.RequestSectionLanePricingPoint PP ON PPH.RequestSectionLanePricingPointID = PP.RequestSectionLanePricingPointID
INNER JOIN @RequestSectionLaneVersion RSL ON PP.RequestSectionLaneID = RSL.RequestSectionLaneID
WHERE PP.RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPointTableTypeID)

SELECT @ERROR2 = @@ERROR


IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)
BEGIN
ROLLBACK TRAN
RAISERROR('Insert Procedure Failed!', 16, 1)
RETURN 0
END

COMMIT TRAN
RETURN 1

go

CREATE PROCEDURE [dbo].[RequestSectionLanePricingPoint_Insert] @RequestSectionLanePricingPointTableType_Create RequestSectionLanePricingPointTableType_Create_Ext READONLY,
                                                               @UpdatedBy nvarchar(50) = NULL,
                                                               @Comments nvarchar(4000) = NULL
AS
    SET NOCOUNT ON;
DECLARE @CostDrRate NVARCHAR(max);
SELECT @CostDrRate = DrRate
FROM @RequestSectionLanePricingPointTableType_Create;

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT;

    IF @UpdatedBy IS NULL
        SELECT @UpdatedBy = 'P&C System';

    IF @Comments IS NULL
        SELECT @Comments = 'Created first version.';

    BEGIN TRAN

DECLARE @RequestSectionTableType_ID IDTableType;

INSERT INTO @RequestSectionTableType_ID
(
    ID
)
SELECT DISTINCT RSL.[RequestSectionID]
FROM dbo.RequestSectionLane RSL
         INNER JOIN @RequestSectionLanePricingPointTableType_Create RSLPP
                    ON RSL.RequestSectionLaneID = RSLPP.RequestSectionLaneID

DECLARE @RequestSectionLaneTableType_ID IDTableType;
INSERT INTO @RequestSectionLaneTableType_ID
(
    ID
)
SELECT DISTINCT RSL.[RequestSectionLaneID]
FROM dbo.RequestSectionLane RSL
         INNER JOIN @RequestSectionLanePricingPointTableType_Create RSLPP
                    ON RSL.RequestSectionLaneID = RSLPP.RequestSectionLaneID
WHERE RSL.IsLaneGroup = 0

UPDATE dbo.RequestSectionLane
SET IsLaneGroup = 1
WHERE dbo.RequestSectionLane.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableType_ID)
    EXEC dbo.RequestSectionLane_History_Update @RequestSectionLaneTableType_ID, @UpdatedBy, @Comments

DECLARE
    @PostalCodes TABLE
                 (
                     [PostalCodeID]   BIGINT       NOT NULL,
                     [PostalCodeName] NVARCHAR(10) NOT NULL
                 )
INSERT INTO @PostalCodes
([PostalCodeID],
 [PostalCodeName])
SELECT DISTINCT [PostalCodeID], [PostalCodeName]
FROM dbo.PostalCode
WHERE [PostalCodeID] IN (SELECT OriginPostalCodeID
                         FROM @RequestSectionLanePricingPointTableType_Create
                         UNION
                         SELECT DestinationPostalCodeID
                         FROM @RequestSectionLanePricingPointTableType_Create)

DECLARE
    @RequestSectionCost TABLE
                        (
                            [RequestSectionID] BIGINT        NOT NULL,
                            [Cost]             NVARCHAR(MAX) NOT NULL
                        )

INSERT INTO @RequestSectionCost
([RequestSectionID],
 [Cost])
SELECT ID,
       dbo.GetRequestSectionLaneDefaultCost(ID)
FROM @RequestSectionTableType_ID

DECLARE
    @RequestSectionLaneCost TABLE
                            (
                                [RequestSectionLaneID] BIGINT        NOT NULL,
                                [Cost]                 NVARCHAR(MAX) NOT NULL
                            )

INSERT INTO @RequestSectionLaneCost
([RequestSectionLaneID],
 [Cost])
SELECT RSL.RequestSectionLaneID,
       RSC.[Cost]
FROM dbo.RequestSectionLane RSL
         INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
         INNER JOIN @RequestSectionCost RSC ON RS.RequestSectionID = RSC.RequestSectionID
WHERE RSL.RequestSectionLaneID IN
      (SELECT DISTINCT [RequestSectionLaneID] FROM @RequestSectionLanePricingPointTableType_Create)

DECLARE @RequestSectionLanePricingPointTableType RequestSectionLanePricingPointTableType;

INSERT INTO @RequestSectionLanePricingPointTableType
([IsActive],
 [IsInactiveViewable],
 [RequestSectionLaneID],
 [PricingPointNumber],
 [OriginPostalCodeID],
 [OriginPostalCodeName],
 [DestinationPostalCodeID],
 [DestinationPostalCodeName],
 [PricingPointHashCode],
 [Cost],
 [DrRate],
 [FakRate],
 [Profitability],
 [SplitsAll],
 [SplitsAllUsagePercentage],
 [PickupCount],
 [DeliveryCount],
 [DockAdjustment],
 [Margin],
 [Density],
 [PickupCost],
 [DeliveryCost],
 [AccessorialsValue],
 [AccessorialsPercentage])
SELECT 1,
       1,
       RSLPP.[RequestSectionLaneID],
       REPLACE(NEWID(), '-', ''),
       RSLPP.[OriginPostalCodeID],
       O_PC.[PostalCodeName],
       RSLPP.[DestinationPostalCodeID],
       D_PC.[PostalCodeName],
       (SELECT HASHBYTES('SHA2_512', (SELECT RSLPP.[OriginPostalCodeID]      AS OriginPostalCodeID,
                                             RSLPP.[DestinationPostalCodeID] AS DestinationPostalCodeID
                                      FOR JSON PATH, WITHOUT_ARRAY_WRAPPER))),
       RSLC.Cost,
       CASE WHEN @CostDrRate IS NULL THEN RSLC.Cost ELSE @CostDrRate END, --dr-rate
       RSLC.Cost,
       RSLC.Cost,
       '{"orig": 0.5, "dest": 0.5}',
       0,
       NULL,
       NULL,
       NULL,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost
FROM @RequestSectionLanePricingPointTableType_Create RSLPP
         INNER JOIN @PostalCodes O_PC ON RSLPP.[OriginPostalCodeID] = O_PC.PostalCodeID
         INNER JOIN @PostalCodes D_PC ON RSLPP.[DestinationPostalCodeID] = D_PC.PostalCodeID
         INNER JOIN @RequestSectionLaneCost RSLC ON RSLPP.RequestSectionLaneID = RSLC.RequestSectionLaneID
    EXEC dbo.RequestSectionLanePricingPoint_Insert_Bulk @RequestSectionLanePricingPointTableType, @UpdatedBy, @Comments

    COMMIT TRAN
    RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestSectionLanePricingPoint_Insert_Bulk]
	@RequestSectionLanePricingPointTableType RequestSectionLanePricingPointTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @RequestSectionLaneTableTypeID IDTableType;

INSERT INTO @RequestSectionLaneTableTypeID
(
	ID
)
SELECT DISTINCT [RequestSectionLaneID] FROM @RequestSectionLanePricingPointTableType

DECLARE @RequestSectionLaneVersion TABLE
(
	[RequestSectionLaneID] BIGINT NOT NULL,
	[RequestSectionLaneVersionID] BIGINT NOT NULL
)
INSERT INTO @RequestSectionLaneVersion
(
	[RequestSectionLaneID],
	[RequestSectionLaneVersionID]
)
SELECT RSLH.[RequestSectionLaneID],
	RSLH.[RequestSectionLaneVersionID]
FROM dbo.RequestSectionLane_History RSLH
INNER JOIN @RequestSectionLaneTableTypeID RSL ON RSLH.[RequestSectionLaneID] = RSL.ID AND RSLH.IsLatestVersion = 1

DECLARE @AllRequestSectionLanePricingPoint TABLE
(
	[RequestSectionLaneID] BIGINT NOT NULL,
	[PricingPointNumber] NVARCHAR(32) NOT NULL,
	[PricingPointHashCode] VARBINARY(8000) NOT NULL
)
INSERT INTO @AllRequestSectionLanePricingPoint
(
	[RequestSectionLaneID],
	[PricingPointNumber],
	[PricingPointHashCode]
)
SELECT RSLPP.[RequestSectionLaneID], RSLPP.[PricingPointNumber], RSLPP.[PricingPointHashCode]
FROM dbo.RequestSectionLanePricingPoint RSLPP
INNER JOIN @RequestSectionLaneTableTypeID RSL ON RSLPP.[RequestSectionLaneID] = RSL.ID
UNION
SELECT [RequestSectionLaneID], [PricingPointNumber], [PricingPointHashCode]
FROM @RequestSectionLanePricingPointTableType

DECLARE @IdenticalPricingPointHashCode TABLE
(
	[RequestSectionLaneID] BIGINT NOT NULL,
	[PricingPointHashCode] VARBINARY(8000) NOT NULL
)
INSERT INTO @IdenticalPricingPointHashCode
(
	[RequestSectionLaneID],
	[PricingPointHashCode]
)
SELECT [RequestSectionLaneID], [PricingPointHashCode]
FROM @AllRequestSectionLanePricingPoint
GROUP BY [RequestSectionLaneID], [PricingPointHashCode]
HAVING COUNT(*) > 1

DECLARE @IdenticalRequestSectionLanePricingPoint TABLE
(
	[RequestSectionLaneID] BIGINT NOT NULL,
	[PricingPointNumber] NVARCHAR(32) NOT NULL
)
INSERT INTO @IdenticalRequestSectionLanePricingPoint
(
	[RequestSectionLaneID],
	[PricingPointNumber]
)
SELECT A.[RequestSectionLaneID], A.[PricingPointNumber]
FROM @AllRequestSectionLanePricingPoint A
INNER JOIN @IdenticalPricingPointHashCode B ON A.[RequestSectionLaneID] = B.[RequestSectionLaneID] AND A.[PricingPointHashCode] = B.[PricingPointHashCode]

DECLARE @ToBeUpDatedRequestSectionLanePricingPoint TABLE
(
	RequestSectionLanePricingPointID BIGINT NOT NULL,
	Cost NVARCHAR(MAX) NOT NULL
)

INSERT INTO @ToBeUpDatedRequestSectionLanePricingPoint
(
	RequestSectionLanePricingPointID,
	Cost
)
SELECT A.[RequestSectionLanePricingPointID],
	dbo.GetRequestSectionLaneDefaultCost(RSL.RequestSectionID)
FROM dbo.RequestSectionLanePricingPoint A
INNER JOIN @IdenticalRequestSectionLanePricingPoint B ON A.[RequestSectionLaneID] = B.[RequestSectionLaneID] AND A.[PricingPointNumber] = B.[PricingPointNumber]
INNER JOIN dbo.RequestSectionLane RSL ON B.[RequestSectionLaneID] = RSL.[RequestSectionLaneID]
WHERE (A.[IsActive] = 0 OR A.[IsInactiveViewable] = 0)

DECLARE @NewRequestSectionLanePricingPointTableType RequestSectionLanePricingPointTableType;

INSERT INTO [dbo].[RequestSectionLanePricingPoint]
(
	[IsActive],
	[IsInactiveViewable],
	[RequestSectionLaneID],
	[PricingPointNumber],
	[OriginPostalCodeID],
	[OriginPostalCodeName],
	[DestinationPostalCodeID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
OUTPUT INSERTED.[IsActive],
	INSERTED.[IsInactiveViewable],
	INSERTED.[RequestSectionLanePricingPointID],
	INSERTED.[RequestSectionLaneID],
	INSERTED.[PricingPointNumber],
	INSERTED.[OriginPostalCodeID],
	INSERTED.[OriginPostalCodeName],
	INSERTED.[DestinationPostalCodeID],
	INSERTED.[DestinationPostalCodeName],
	INSERTED.[PricingPointHashCode],
	INSERTED.[Cost],
	INSERTED.[DrRate],
	INSERTED.[FakRate],
	INSERTED.[Profitability],
	INSERTED.[SplitsAll],
	INSERTED.[SplitsAllUsagePercentage],
	INSERTED.[PickupCount],
	INSERTED.[DeliveryCount],
	INSERTED.[DockAdjustment],
	INSERTED.[Margin],
	INSERTED.[Density],
	INSERTED.[PickupCost],
	INSERTED.[DeliveryCost],
	INSERTED.[AccessorialsValue],
	INSERTED.[AccessorialsPercentage]
INTO @NewRequestSectionLanePricingPointTableType
(
	[IsActive],
	[IsInactiveViewable],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneID],
	[PricingPointNumber],
	[OriginPostalCodeID],
	[OriginPostalCodeName],
	[DestinationPostalCodeID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
)
SELECT [IsActive],
	[IsInactiveViewable],
	[RequestSectionLaneID],
	[PricingPointNumber],
	[OriginPostalCodeID],
	[OriginPostalCodeName],
	[DestinationPostalCodeID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	[Cost],
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage]
FROM @RequestSectionLanePricingPointTableType RSLPP
WHERE RSLPP.[PricingPointNumber] NOT IN (SELECT [PricingPointNumber] FROM @IdenticalRequestSectionLanePricingPoint)

SELECT @ERROR1 = @@ERROR

DECLARE @PostalCodeVersionID table
(
	[PostalCodeID] [bigint] NOT NULL,
	[PostalCodeVersionID] [bigint] NOT NULL
)
INSERT INTO @PostalCodeVersionID
(
	[PostalCodeID],
	[PostalCodeVersionID]
)
SELECT [PostalCodeID],
	[PostalCodeVersionID]
FROM [dbo].[PostalCode_History]
WHERE [IsLatestVersion] = 1
AND [PostalCodeID] IN
(SELECT DISTINCT PostalCodeID FROM
(SELECT [OriginPostalCodeID] AS PostalCodeID FROM @NewRequestSectionLanePricingPointTableType
UNION
SELECT [DestinationPostalCodeID] AS PostalCodeID FROM @NewRequestSectionLanePricingPointTableType) AS A)

INSERT INTO dbo.RequestSectionLanePricingPoint_History
(
	[VersionNum],
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointID],
	[RequestSectionLaneVersionID],
    [PricingPointNumber],
	[OriginPostalCodeVersionID],
	[OriginPostalCodeName],
	[DestinationPostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	Cost,
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage],
	UpdatedOn,
	UpdatedBy,
	Comments,
	IsLatestVersion
)
SELECT 1,
	[IsActive],
    [IsInactiveViewable],
	[RequestSectionLanePricingPointID],
	B.[RequestSectionLaneVersionID],
    [PricingPointNumber],
	O_PC.[PostalCodeVersionID],
	[OriginPostalCodeName],
	D_PC.[PostalCodeVersionID],
	[DestinationPostalCodeName],
	[PricingPointHashCode],
	Cost,
	[DrRate],
	[FakRate],
	[Profitability],
	[SplitsAll],
	[SplitsAllUsagePercentage],
	[PickupCount],
	[DeliveryCount],
	[DockAdjustment],
	[Margin],
	[Density],
	[PickupCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsPercentage],
	GETUTCDATE(),
	@UpdatedBy,
	@Comments,
	1
FROM @NewRequestSectionLanePricingPointTableType A
INNER JOIN @RequestSectionLaneVersion B ON A.[RequestSectionLaneID] = B.[RequestSectionLaneID]
LEFT JOIN @PostalCodeVersionID O_PC ON A.OriginPostalCodeID = O_PC.PostalCodeID
LEFT JOIN @PostalCodeVersionID D_PC ON A.DestinationPostalCodeID = D_PC.PostalCodeID

SELECT @ERROR2 = @@ERROR

UPDATE dbo.RequestSectionLanePricingPoint
SET [IsActive] = 1,
	[IsInactiveViewable] = 1,
	[Cost] = A.Cost
FROM @ToBeUpDatedRequestSectionLanePricingPoint A
WHERE dbo.RequestSectionLanePricingPoint.[RequestSectionLanePricingPointID] = A.RequestSectionLanePricingPointID

SELECT @ERROR3 = @@ERROR

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0) OR (@ERROR3 <> 0)
BEGIN
ROLLBACK TRAN
RAISERROR('Insert Procedure Failed!', 16, 1)
RETURN 0
END

DECLARE @RequestSectionLanePricingPointTableTypeID IDTableType;
INSERT INTO @RequestSectionLanePricingPointTableTypeID
(
	[ID]
)
SELECT RequestSectionLanePricingPointID
FROM @ToBeUpDatedRequestSectionLanePricingPoint

EXEC dbo.RequestSectionLanePricingPoint_History_Update @RequestSectionLanePricingPointTableTypeID, @UpdatedBy, @Comments

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestSectionLanePricingPoint_Staging_Update]
	@RequestSectionID BIGINT,
	@ContextID NVARCHAR(32),
	@OrigPointTypeName NVARCHAR(50),
	@OrigPointID BIGINT,
	@DestPointTypeName NVARCHAR(50),
	@DestPointID BIGINT,
	@LaneStatusName NVARCHAR(50),
	@RequestSectionLaneTableType_ID NVARCHAR(MAX) = NULL,
	@RequestSectionLanePricingPointTableType_ID NVARCHAR(MAX) = NULL,
	@OperationName  CHAR(1) = NULL,
	@Multiplier DECIMAL(19,6) = NULL,
	@RateTable NVARCHAR(50),
	@WeightBreakLowerBound NVARCHAR(MAX) = NULL,
	@MicroSave BIT = NULL,
	@MacroSave BIT = NULL,
	@IsActive BIT = NULL,
	@IsInactiveViewable BIT = NULL
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID FROM dbo.RequestSection WHERE RequestSectionID = @RequestSectionID;

DECLARE @RequestSectionLaneTableType IDTableType;
INSERT INTO @RequestSectionLaneTableType
(
	ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLaneTableType_ID)

DECLARE @RequestSectionLanePricingPointTableType IDTableType;
INSERT INTO @RequestSectionLanePricingPointTableType
(
	ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLanePricingPointTableType_ID)

DECLARE @FilterCount1 INT, @FilterCount2 INT;
SELECT @FilterCount1 = COUNT(*) FROM @RequestSectionLaneTableType;
SELECT @FilterCount2 = COUNT(*) FROM @RequestSectionLanePricingPointTableType;

DECLARE @WeightBreak IDTableType;
INSERT INTO @WeightBreak
(
	ID
)
SELECT [value]
FROM OPENJSON(@WeightBreakLowerBound)

IF NOT EXISTS (SELECT TOP 1 ContextID FROM dbo.RequestSectionLane_Staging WHERE [RequestLaneID] = @RequestLaneID AND ContextID = @ContextID)
BEGIN
	INSERT INTO dbo.RequestSectionLane_Staging
	(
	[RequestSectionLaneID],
	[RequestSectionID],
	[RequestLaneID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsLaneGroup],
	[OriginProvinceID],
	[OriginProvinceCode],
	[OriginRegionID],
	[OriginRegionCode],
	[OriginCountryID],
	[OriginCountryCode],
	[OriginTerminalID],
	[OriginTerminalCode],
	[OriginZoneID],
	[OriginZoneName],
	[OriginBasingPointID],
	[OriginBasingPointName],
	[OriginServicePointID],
	[OriginServicePointName],
	[OriginPostalCodeID],
	[OriginPostalCodeName],
	[OriginPointTypeID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceID],
	[DestinationProvinceCode],
	[DestinationRegionID],
	[DestinationRegionCode],
	[DestinationCountryID],
	[DestinationCountryCode],
	[DestinationTerminalID],
	[DestinationTerminalCode],
	[DestinationZoneID],
	[DestinationZoneName],
	[DestinationBasingPointID],
	[DestinationBasingPointName],
	[DestinationServicePointID],
	[DestinationServicePointName],
	[DestinationPostalCodeID],
	[DestinationPostalCodeName],
	[DestinationPointTypeID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[NewCost],
	[IsActive],
	[NewIsActive],
    [IsInactiveViewable],
	[NewIsInactiveViewable],
	[IsBetween],
	[NewIsBetween],
	[IsUpdated],
	[ContextID],
	[ContextCreatedOn],
	[DoNotMeetCommitment],
	[NewDoNotMeetCommitment],
	[Commitment],
	[NewCommitment],
	[CustomerRate],
	[NewCustomerRate],
	[CustomerDiscount],
	[NewCustomerDiscount],
	[DrRate],
	[NewDrRate],
	[PartnerRate],
	[NewPartnerRate],
	[PartnerDiscount],
	[NewPartnerDiscount],
	[Profitability],
	[NewProfitability],
	[PickupCount],
	[NewPickupCount],
	[DeliveryCount],
	[NewDeliveryCount],
	[DockAdjustment],
	[NewDockAdjustment],
	[Margin],
	[NewMargin],
	[Density],
	[NewDensity],
	[PickupCost],
	[NewPickupCost],
	[DeliveryCost],
	[NewDeliveryCost],
	[AccessorialsValue],
	[NewAccessorialsValue],
	[AccessorialsPercentage],
	[NewAccessorialsPercentage]
	)
	SELECT
	[RequestSectionLaneID],
	RSL.[RequestSectionID],
	RS.[RequestLaneID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsLaneGroup],
	[OriginProvinceID],
	[OriginProvinceCode],
	[OriginRegionID],
	[OriginRegionCode],
	[OriginCountryID],
	[OriginCountryCode],
	[OriginTerminalID],
	[OriginTerminalCode],
	[OriginZoneID],
	[OriginZoneName],
	[OriginBasingPointID],
	[OriginBasingPointName],
	[OriginServicePointID],
	[OriginServicePointName],
	[OriginPostalCodeID],
	[OriginPostalCodeName],
	[OriginPointTypeID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceID],
	[DestinationProvinceCode],
	[DestinationRegionID],
	[DestinationRegionCode],
	[DestinationCountryID],
	[DestinationCountryCode],
	[DestinationTerminalID],
	[DestinationTerminalCode],
	[DestinationZoneID],
	[DestinationZoneName],
	[DestinationBasingPointID],
	[DestinationBasingPointName],
	[DestinationServicePointID],
	[DestinationServicePointName],
	[DestinationPostalCodeID],
	[DestinationPostalCodeName],
	[DestinationPointTypeID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	RSL.[Cost],
	RSL.[Cost],
	RSL.[IsActive],
	RSL.[IsActive],
    RSL.[IsInactiveViewable],
	RSL.[IsInactiveViewable],
	RSL.[IsBetween],
	RSL.[IsBetween],
	0,
	@ContextID,
	GETUTCDATE(),
	[DoNotMeetCommitment],
	[DoNotMeetCommitment],
	[Commitment],
	[Commitment],
	[CustomerRate],
	[CustomerRate],
	[CustomerDiscount],
	[CustomerDiscount],
	[DrRate],
	[DrRate],
	[PartnerRate],
	[PartnerRate],
	[PartnerDiscount],
	[PartnerDiscount],
	[Profitability],
	[Profitability],
	[PickupCount],
	[PickupCount],
	[DeliveryCount],
	[DeliveryCount],
	[DockAdjustment],
	[DockAdjustment],
	[Margin],
	[Margin],
	[Density],
	[Density],
	[PickupCost],
	[PickupCost],
	[DeliveryCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsValue],
	[AccessorialsPercentage],
	[AccessorialsPercentage]
	FROM dbo.RequestSectionLane RSL
	INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
	WHERE RS.RequestLaneID = @RequestLaneID
END;

IF NOT EXISTS (SELECT TOP 1 ContextID FROM dbo.RequestSectionLanePricingPoint_Staging WHERE [RequestLaneID] = @RequestLaneID AND ContextID = @ContextID)
BEGIN
	INSERT INTO dbo.RequestSectionLanePricingPoint_Staging
	(
		[IsActive],
		[NewIsActive],
		[IsInactiveViewable],
		[NewIsInactiveViewable],
		[RequestSectionLanePricingPointID],
		[RequestSectionLaneID],
		[RequestLaneID],
		[PricingPointNumber],
		[OriginPostalCodeID],
		[OriginPostalCodeName],
		[DestinationPostalCodeID],
		[DestinationPostalCodeName],
		[PricingPointHashCode],
		[Cost],
		[NewCost],
		[DrRate],
		[NewDrRate],
		[FakRate],
		[NewFakRate],
		[Profitability],
		[NewProfitability],
		[SplitsAll],
		[NewSplitsAll],
		[SplitsAllUsagePercentage],
		[NewSplitsAllUsagePercentage],
		[PickupCount],
		[NewPickupCount],
		[DeliveryCount],
		[NewDeliveryCount],
		[DockAdjustment],
		[NewDockAdjustment],
		[Margin],
		[NewMargin],
		[Density],
		[NewDensity],
		[PickupCost],
		[NewPickupCost],
		[DeliveryCost],
		[NewDeliveryCost],
		[AccessorialsValue],
		[NewAccessorialsValue],
		[AccessorialsPercentage],
		[NewAccessorialsPercentage],
		[IsUpdated],
		[ContextID],
		[ContextCreatedOn]
	)
	SELECT RSLPP.[IsActive],
		RSLPP.[IsActive],
		RSLPP.[IsInactiveViewable],
		RSLPP.[IsInactiveViewable],
		RSLPP.[RequestSectionLanePricingPointID],
		RSLPP.[RequestSectionLaneID],
		@RequestLaneID,
		RSLPP.[PricingPointNumber],
		RSLPP.[OriginPostalCodeID],
		RSLPP.[OriginPostalCodeName],
		RSLPP.[DestinationPostalCodeID],
		RSLPP.[DestinationPostalCodeName],
		RSLPP.[PricingPointHashCode],
		RSLPP.[Cost],
		RSLPP.[Cost],
		RSLPP.[DrRate],
		RSLPP.[DrRate],
		RSLPP.[FakRate],
		RSLPP.[FakRate],
		RSLPP.[Profitability],
		RSLPP.[Profitability],
		RSLPP.[SplitsAll],
		RSLPP.[SplitsAll],
		RSLPP.[SplitsAllUsagePercentage],
		RSLPP.[SplitsAllUsagePercentage],
		RSLPP.[PickupCount],
		RSLPP.[PickupCount],
		RSLPP.[DeliveryCount],
		RSLPP.[DeliveryCount],
		RSLPP.[DockAdjustment],
		RSLPP.[DockAdjustment],
		RSLPP.[Margin],
		RSLPP.[Margin],
		RSLPP.[Density],
		RSLPP.[Density],
		RSLPP.[PickupCost],
		RSLPP.[PickupCost],
		RSLPP.[DeliveryCost],
		RSLPP.[DeliveryCost],
		RSLPP.[AccessorialsValue],
		RSLPP.[AccessorialsValue],
		RSLPP.[AccessorialsPercentage],
		RSLPP.[AccessorialsPercentage],
		0,
		@ContextID,
		GETUTCDATE()
		FROM dbo.RequestSectionLanePricingPoint RSLPP
		INNER JOIN 	dbo.RequestSectionLane RSL ON RSLPP.RequestSectionLaneID = RSL.RequestSectionLaneID
		INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
		WHERE RS.RequestLaneID = @RequestLaneID
END;

WITH A AS
(
	SELECT *
	FROM dbo.RequestSectionLane RSLS
	WHERE RSLS.RequestSectionID = @RequestSectionID
	AND (
		( (@LaneStatusName = 'None') OR (@LaneStatusName = 'New' AND [IsPublished] = 0) OR (@LaneStatusName = 'Changed' AND [IsEdited] = 1) OR (@LaneStatusName = 'Duplicated' AND [IsDuplicate] = 1) OR (@LaneStatusName = 'DoNotMeetCommitment' AND [DoNotMeetCommitment] = 1))
		AND ( (@OrigPointTypeName = 'None') OR
			(@OrigPointTypeName = 'Country' AND OriginCountryID = @OrigPointID) OR (@OrigPointTypeName = 'Region' AND OriginRegionID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Province' AND OriginProvinceID = @OrigPointID) OR (@OrigPointTypeName = 'Terminal' AND OriginTerminalID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Basing Point' AND OriginBasingPointID = @OrigPointID) OR (@OrigPointTypeName = 'Service Point' AND OriginServicePointID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Postal Code' AND OriginPostalCodeID = @OrigPointID) OR (@OrigPointTypeName = 'Point Type' AND OriginPointTypeID = @OrigPointID)
			)
		AND ( (@DestPointTypeName = 'None') OR
			(@DestPointTypeName = 'Country' AND DestinationCountryID = @DestPointID) OR (@DestPointTypeName = 'Region' AND DestinationRegionID = @DestPointID)
			OR
			(@DestPointTypeName = 'Province' AND DestinationProvinceID = @DestPointID) OR (@DestPointTypeName = 'Terminal' AND DestinationTerminalID = @DestPointID)
			OR
			(@DestPointTypeName = 'Basing Point' AND DestinationBasingPointID = @DestPointID) OR (@DestPointTypeName = 'Service Point' AND DestinationServicePointID = @DestPointID)
			OR
			(@DestPointTypeName = 'Postal Code' AND DestinationPostalCodeID = @DestPointID) OR (@DestPointTypeName = 'Point Type' AND DestinationPointTypeID = @DestPointID)
			)
		)
	AND ((@FilterCount1 + @FilterCount2 = 0) OR (@FilterCount1 > 0 AND RSLS.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableType)))
), B AS
(
	SELECT *
	FROM dbo.RequestSectionLanePricingPoint_Staging RSLPPS
	WHERE RSLPPS.RequestLaneID = @RequestLaneID AND RSLPPS.ContextID = @ContextID AND
	(RSLPPS.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM A)
		OR
	RSLPPS.RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPointTableType))
)

UPDATE dbo.RequestSectionLanePricingPoint_Staging
SET IsUpdated = 1,
	NewIsActive = CASE WHEN @IsActive IS NOT NULL THEN @IsActive ELSE B.NewIsActive END,
	NewIsInactiveViewable = CASE WHEN @IsInactiveViewable IS NOT NULL THEN @IsInactiveViewable ELSE B.NewIsInactiveViewable END,
	NewCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewCost, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewCost END,
	NewDrRate = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'dr_rate' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDrRate, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewDrRate END,
	NewFakRate = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'fak_rate' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewFakRate, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewFakRate END,
	NewSplitsAll = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'splits_all' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewSplitsAll, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewSplitsAll END,
	NewProfitability = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'profitability' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewProfitability, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewProfitability END,
	NewMargin = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'margin' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewMargin, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewMargin END,
	NewDensity = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'density' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDensity, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewDensity END,
	NewPickupCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewPickupCost, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewPickupCost END,
	NewDeliveryCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDeliveryCost, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewDeliveryCost END,
	NewAccessorialsValue = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_value' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewAccessorialsValue, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewAccessorialsValue END,
	NewAccessorialsPercentage = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_percentage' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewAccessorialsPercentage, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewAccessorialsPercentage END,
	NewPickupCount = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_count' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewPickupCount, @OperationName, @Multiplier) ELSE B.NewPickupCount END,
	NewDeliveryCount = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_count' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewDeliveryCount, @OperationName, @Multiplier) ELSE B.NewDeliveryCount END,
	NewDockAdjustment = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'dock_adjustment' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewDockAdjustment, @OperationName, @Multiplier) ELSE B.NewDockAdjustment END,
	NewSplitsAllUsagePercentage = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'splits_all_usage_percentage' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewSplitsAllUsagePercentage, @OperationName, @Multiplier) ELSE B.NewSplitsAllUsagePercentage END,
    WorkflowErrors = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'clear_workflow_errors' THEN NULL ELSE B.WorkflowErrors END

FROM B
WHERE dbo.RequestSectionLanePricingPoint_Staging.RequestLaneID = B.RequestLaneID
	AND dbo.RequestSectionLanePricingPoint_Staging.RequestSectionLaneID = B.RequestSectionLaneID
	AND dbo.RequestSectionLanePricingPoint_Staging.ContextID = B.ContextID
	AND dbo.RequestSectionLanePricingPoint_Staging.RequestSectionLanePricingPointID = B.RequestSectionLanePricingPointID

IF (@MicroSave IS NOT NULL AND @MicroSave = 1) OR (@MacroSave IS NOT NULL AND @MacroSave = 1)
BEGIN;

	WITH B AS
	(
		SELECT *
		FROM dbo.RequestSectionLanePricingPoint_Staging
		WHERE ContextID = @ContextID AND IsUpdated = 1
	)

	Update dbo.RequestSectionLanePricingPoint
	SET Cost = B.NewCost,
		[DrRate] = B.[NewDrRate],
		FakRate = B.NewFakRate,
		SplitsAll = B.NewSplitsAll,
		SplitsAllUsagePercentage = B.NewSplitsAllUsagePercentage,
		[Profitability] = B.[NewProfitability],
		[PickupCount] = B.[NewPickupCount],
		[DeliveryCount] = B.[NewDeliveryCount],
		[DockAdjustment] = B.[NewDockAdjustment],
		[Margin] = B.[NewMargin],
		[Density] = B.[NewDensity],
		[PickupCost] = B.[NewPickupCost],
		[DeliveryCost] = B.[NewDeliveryCost],
		[AccessorialsValue] = B.[NewAccessorialsValue],
		[AccessorialsPercentage] = B.[NewAccessorialsPercentage],
		IsActive = B.NewIsActive,
		IsInactiveViewable = B.NewIsInactiveViewable,
        PricingRates = B.PricingRates,
        WorkflowErrors = B.WorkflowErrors
	FROM B
	WHERE dbo.RequestSectionLanePricingPoint.RequestSectionLanePricingPointID = B.RequestSectionLanePricingPointID;

	--WITH C AS
	--(
	--	SELECT DISTINCT RequestSectionLaneID
	--	FROM dbo.RequestSectionLanePricingPoint_Staging
	--	WHERE ContextID = @ContextID AND IsUpdated = 1
	--)

	--UPDATE dbo.RequestSectionLane
	--SET IsEdited = 1
	--WHERE dbo.RequestSectionLane.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM C)

	--EXEC dbo.RequestLane_Count @RequestLaneID;

	--DECLARE @RequestSectionLanePricingPointToBeUpdated IDTableType;

	--INSERT INTO @RequestSectionLanePricingPointToBeUpdated
	--(
	--	[ID]
	--)
	--SELECT RequestSectionLanePricingPointID
	--FROM dbo.RequestSectionLanePricingPoint_Staging
	--WHERE ContextID = @ContextID AND IsUpdated = 1

	--EXEC [dbo].[RequestSectionLanePricingPoint_History_Update] @RequestSectionLanePricingPointToBeUpdated

	--IF (@MacroSave IS NOT NULL AND @MacroSave = 1)
	--BEGIN
	--	DECLARE @RequestLaneVersionID BIGINT;

	--	SELECT @RequestLaneVersionID = RequestLaneVersionID
	--	FROM dbo.RequestLane_History RLH
	--	WHERE RLH.RequestLaneID = @RequestLaneID AND RLH.IsLatestVersion = 1

	--	DECLARE @RequestHistory TABLE
	--	(
	--		[VersionNum]                   INT             NOT NULL,
	--		[BaseVersion]		  INT				  NULL,
	--		[IsLatestVersion]              BIT             NOT NULL,
	--		[UpdatedOn]                    DATETIME2 (7)   NOT NULL,
	--		[UpdatedBy]                    NVARCHAR (50)   NOT NULL,
	--		[Comments]                     NVARCHAR (4000) NOT NULL,
	--		[IsActive]                     BIT             NOT NULL,
	--		[IsInactiveViewable]           BIT             NOT NULL,
	--		[RequestVersionID]             BIGINT          NOT NULL,
	--		[RequestNumber]                NVARCHAR (32)   NOT NULL,
	--		[RequestCode]                NVARCHAR (32)   NOT NULL,
	--		[InitiatedOn]                  DATETIME2 (7)   NOT NULL,
	--		[SubmittedOn]                  DATETIME2 (7)   NULL,
	--		[IsValidData]                  BIT             NOT NULL,
	--		[InitiatedByVersion]           BIGINT          NOT NULL,
	--		[RequestID]                    BIGINT          NOT NULL,
	--		[RequestAccessorialsVersionID] BIGINT          NULL,
	--		[RequestInformationVersionID]  BIGINT          NULL,
	--		[RequestLaneVersionID]        BIGINT          NULL,
	--		[RequestProfileVersionID]      BIGINT          NULL,
	--		[SubmittedByVersion]           BIGINT          NULL,
	--		[IsReview] BIT NOT NULL
	--	)
	--	INSERT INTO @RequestHistory
	--	(
	--		[VersionNum],
	--		[BaseVersion],
	--		[IsLatestVersion],
	--		[UpdatedOn],
	--		[UpdatedBy],
	--		[Comments],
	--		[IsActive],
	--		[IsInactiveViewable],
	--		[RequestVersionID],
	--		[RequestNumber],
	--		[RequestCode],
	--		[InitiatedOn],
	--		[SubmittedOn],
	--		[IsValidData],
	--		[InitiatedByVersion],
	--		[RequestID],
	--		[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		[RequestLaneVersionID],
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		[IsReview]
	--	)
	--	SELECT [VersionNum],
	--		[BaseVersion],
	--		[IsLatestVersion],
	--		[UpdatedOn],
	--		[UpdatedBy],
	--		[Comments],
	--		RH.[IsActive],
	--		RH.[IsInactiveViewable],
	--		[RequestVersionID],
	--		RH.[RequestNumber],
	--		RH.[RequestCode],
	--		RH.[InitiatedOn],
	--		RH.[SubmittedOn],
	--		RH.[IsValidData],
	--		[InitiatedByVersion],
	--		RH.[RequestID],
	--		RH.[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		[RequestLaneVersionID],
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		RH.[IsReview]
	--	FROM dbo.Request_History RH
	--	INNER JOIN dbo.Request R ON RH.[RequestID] = R.[RequestID] AND RH.[IsLatestVersion] = 1 AND R.RequestLaneID = @RequestLaneID

	--	UPDATE dbo.Request_History
	--	SET [IsLatestVersion] = 0
	--	WHERE dbo.Request_History.[RequestVersionID] IN (SELECT [RequestVersionID] FROM @RequestHistory)

	--	INSERT INTO dbo.Request_History
	--	(
	--		[VersionNum],
	--		[IsLatestVersion],
	--		[UpdatedOn],
	--		[UpdatedBy],
	--		[Comments],
	--		[IsActive],
	--		[IsInactiveViewable],
	--		[RequestNumber],
	--		[RequestCode],
	--		[InitiatedOn],
	--		[SubmittedOn],
	--		[IsValidData],
	--		[InitiatedByVersion],
	--		[RequestID],
	--		[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		[RequestLaneVersionID],
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		[IsReview]
	--	)
	--	SELECT [VersionNum]+1,
	--		1,
	--		GETUTCDATE(),
	--		'',
	--		'',
	--		[IsActive],
	--		[IsInactiveViewable],
	--		[RequestNumber],
	--		[RequestCode],
	--		[InitiatedOn],
	--		[SubmittedOn],
	--		[IsValidData],
	--		[InitiatedByVersion],
	--		[RequestID],
	--		[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		@RequestLaneVersionID,
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		[IsReview]
	--	FROM @RequestHistory
	--END

	--DELETE FROM dbo.RequestSectionLane_Staging
	--WHERE RequestLaneID = @RequestLaneID AND ContextID = @ContextID

	DELETE FROM dbo.RequestSectionLanePricingPoint_Staging
	WHERE RequestLaneID = @RequestLaneID AND ContextID = @ContextID

END

COMMIT TRAN

RETURN 1
go

CREATE PROCEDURE [dbo].[RequestSectionLanePricingPoint_Staging_Update_Ex] @RequestSectionID BIGINT,
                                                                          @ContextID NVARCHAR(32),
                                                                          @OrigPointTypeName NVARCHAR(50),
                                                                          @OrigPointID BIGINT,
                                                                          @DestPointTypeName NVARCHAR(50),
                                                                          @DestPointID BIGINT,
                                                                          @LaneStatusName NVARCHAR(50),
                                                                          @RequestSectionLaneTableType_ID NVARCHAR(MAX) = NULL,
                                                                          @RequestSectionLanePricingPointTableType_IDValue NVARCHAR(MAX) = NULL,
                                                                          @OperationName CHAR(1) = NULL,
                                                                          @Multiplier DECIMAL(19, 6) = NULL,
                                                                          @RateTable NVARCHAR(50),
                                                                          @WeightBreakLowerBound NVARCHAR(MAX) = NULL,
                                                                          @MicroSave BIT = NULL,
                                                                          @MacroSave BIT = NULL,
                                                                          @IsActive BIT = NULL,
                                                                          @IsInactiveViewable BIT = NULL
AS

    SET NOCOUNT ON;

--     BEGIN TRAN

DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID
FROM dbo.RequestSection
WHERE RequestSectionID = @RequestSectionID;

DECLARE @RequestSectionLaneTableType IDTableType;
INSERT INTO @RequestSectionLaneTableType
(
    ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLaneTableType_ID)

-- parsing JSON with new values
DECLARE @RequestSectionLanePricingPointTableType IDValueTableType;
INSERT INTO @RequestSectionLanePricingPointTableType
    (ID, Value)
SELECT [key], [value]
FROM OPENJSON(@RequestSectionLanePricingPointTableType_IDValue)


DECLARE @FilterCount1 INT, @FilterCount2 INT;
SELECT @FilterCount1 = COUNT(*)
FROM @RequestSectionLaneTableType;
SELECT @FilterCount2 = COUNT(*)
FROM @RequestSectionLanePricingPointTableType;

DECLARE @WeightBreak IDTableType;
INSERT INTO @WeightBreak
(
    ID
)
SELECT [value]
FROM OPENJSON(@WeightBreakLowerBound)
    IF NOT EXISTS(SELECT TOP 1 ContextID
                  FROM dbo.RequestSectionLane_Staging
                  WHERE [RequestLaneID] = @RequestLaneID
                    AND ContextID = @ContextID)
        BEGIN
            INSERT INTO dbo.RequestSectionLane_Staging
            ([RequestSectionLaneID],
             [RequestSectionID],
             [RequestLaneID],
             [LaneNumber],
             [IsPublished],
             [IsEdited],
             [IsDuplicate],
             [IsLaneGroup],
             [OriginProvinceID],
             [OriginProvinceCode],
             [OriginRegionID],
             [OriginRegionCode],
             [OriginCountryID],
             [OriginCountryCode],
             [OriginTerminalID],
             [OriginTerminalCode],
             [OriginZoneID],
             [OriginZoneName],
             [OriginBasingPointID],
             [OriginBasingPointName],
             [OriginServicePointID],
             [OriginServicePointName],
             [OriginPostalCodeID],
             [OriginPostalCodeName],
             [OriginPointTypeID],
             [OriginPointTypeName],
             [OriginCode],
             [DestinationProvinceID],
             [DestinationProvinceCode],
             [DestinationRegionID],
             [DestinationRegionCode],
             [DestinationCountryID],
             [DestinationCountryCode],
             [DestinationTerminalID],
             [DestinationTerminalCode],
             [DestinationZoneID],
             [DestinationZoneName],
             [DestinationBasingPointID],
             [DestinationBasingPointName],
             [DestinationServicePointID],
             [DestinationServicePointName],
             [DestinationPostalCodeID],
             [DestinationPostalCodeName],
             [DestinationPointTypeID],
             [DestinationPointTypeName],
             [DestinationCode],
             [LaneHashCode],
             [BasingPointHashCode],
             [Cost],
             [NewCost],
             [IsActive],
             [NewIsActive],
             [IsInactiveViewable],
             [NewIsInactiveViewable],
             [IsBetween],
             [NewIsBetween],
             [IsUpdated],
             [ContextID],
             [ContextCreatedOn],
             [DoNotMeetCommitment],
             [NewDoNotMeetCommitment],
             [Commitment],
             [NewCommitment],
             [CustomerRate],
             [NewCustomerRate],
             [CustomerDiscount],
             [NewCustomerDiscount],
             [DrRate],
             [NewDrRate],
             [PartnerRate],
             [NewPartnerRate],
             [PartnerDiscount],
             [NewPartnerDiscount],
             [Profitability],
             [NewProfitability],
             [PickupCount],
             [NewPickupCount],
             [DeliveryCount],
             [NewDeliveryCount],
             [DockAdjustment],
             [NewDockAdjustment],
             [Margin],
             [NewMargin],
             [Density],
             [NewDensity],
             [PickupCost],
             [NewPickupCost],
             [DeliveryCost],
             [NewDeliveryCost],
             [AccessorialsValue],
             [NewAccessorialsValue],
             [AccessorialsPercentage],
             [NewAccessorialsPercentage])
            SELECT [RequestSectionLaneID],
                   RSL.[RequestSectionID],
                   RS.[RequestLaneID],
                   [LaneNumber],
                   [IsPublished],
                   [IsEdited],
                   [IsDuplicate],
                   [IsLaneGroup],
                   [OriginProvinceID],
                   [OriginProvinceCode],
                   [OriginRegionID],
                   [OriginRegionCode],
                   [OriginCountryID],
                   [OriginCountryCode],
                   [OriginTerminalID],
                   [OriginTerminalCode],
                   [OriginZoneID],
                   [OriginZoneName],
                   [OriginBasingPointID],
                   [OriginBasingPointName],
                   [OriginServicePointID],
                   [OriginServicePointName],
                   [OriginPostalCodeID],
                   [OriginPostalCodeName],
                   [OriginPointTypeID],
                   [OriginPointTypeName],
                   [OriginCode],
                   [DestinationProvinceID],
                   [DestinationProvinceCode],
                   [DestinationRegionID],
                   [DestinationRegionCode],
                   [DestinationCountryID],
                   [DestinationCountryCode],
                   [DestinationTerminalID],
                   [DestinationTerminalCode],
                   [DestinationZoneID],
                   [DestinationZoneName],
                   [DestinationBasingPointID],
                   [DestinationBasingPointName],
                   [DestinationServicePointID],
                   [DestinationServicePointName],
                   [DestinationPostalCodeID],
                   [DestinationPostalCodeName],
                   [DestinationPointTypeID],
                   [DestinationPointTypeName],
                   [DestinationCode],
                   [LaneHashCode],
                   [BasingPointHashCode],
                   RSL.[Cost],
                   RSL.[Cost],
                   RSL.[IsActive],
                   RSL.[IsActive],
                   RSL.[IsInactiveViewable],
                   RSL.[IsInactiveViewable],
                   RSL.[IsBetween],
                   RSL.[IsBetween],
                   0,
                   @ContextID,
                   GETUTCDATE(),
                   [DoNotMeetCommitment],
                   [DoNotMeetCommitment],
                   [Commitment],
                   [Commitment],
                   [CustomerRate],
                   [CustomerRate],
                   [CustomerDiscount],
                   [CustomerDiscount],
                   [DrRate],
                   [DrRate],
                   [PartnerRate],
                   [PartnerRate],
                   [PartnerDiscount],
                   [PartnerDiscount],
                   [Profitability],
                   [Profitability],
                   [PickupCount],
                   [PickupCount],
                   [DeliveryCount],
                   [DeliveryCount],
                   [DockAdjustment],
                   [DockAdjustment],
                   [Margin],
                   [Margin],
                   [Density],
                   [Density],
                   [PickupCost],
                   [PickupCost],
                   [DeliveryCost],
                   [DeliveryCost],
                   [AccessorialsValue],
                   [AccessorialsValue],
                   [AccessorialsPercentage],
                   [AccessorialsPercentage]
            FROM dbo.RequestSectionLane RSL
                     INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
            WHERE RS.RequestLaneID = @RequestLaneID
        END;

    IF NOT EXISTS(SELECT TOP 1 ContextID
                  FROM dbo.RequestSectionLanePricingPoint_Staging
                  WHERE [RequestLaneID] = @RequestLaneID
                    AND ContextID = @ContextID
--                     AND RequestSectionLanePricingPointID = @RequestSectionLanePricingPointId
        )
        BEGIN
            INSERT INTO dbo.RequestSectionLanePricingPoint_Staging
            ([IsActive],
             [NewIsActive],
             [IsInactiveViewable],
             [NewIsInactiveViewable],
             [RequestSectionLanePricingPointID],
             [RequestSectionLaneID],
             [RequestLaneID],
             [PricingPointNumber],
             [OriginPostalCodeID],
             [OriginPostalCodeName],
             [DestinationPostalCodeID],
             [DestinationPostalCodeName],
             [PricingPointHashCode],
             [Cost],
             [NewCost],
             [DrRate],
             [NewDrRate],
             [FakRate],
             [NewFakRate],
             [Profitability],
             [NewProfitability],
             [SplitsAll],
             [NewSplitsAll],
             [SplitsAllUsagePercentage],
             [NewSplitsAllUsagePercentage],
             [PickupCount],
             [NewPickupCount],
             [DeliveryCount],
             [NewDeliveryCount],
             [DockAdjustment],
             [NewDockAdjustment],
             [Margin],
             [NewMargin],
             [Density],
             [NewDensity],
             [PickupCost],
             [NewPickupCost],
             [DeliveryCost],
             [NewDeliveryCost],
             [AccessorialsValue],
             [NewAccessorialsValue],
             [AccessorialsPercentage],
             [NewAccessorialsPercentage],
             [IsUpdated],
             [ContextID],
             [ContextCreatedOn])
            SELECT RSLPP.[IsActive],
                   RSLPP.[IsActive],
                   RSLPP.[IsInactiveViewable],
                   RSLPP.[IsInactiveViewable],
                   RSLPP.[RequestSectionLanePricingPointID],
                   RSLPP.[RequestSectionLaneID],
                   @RequestLaneID,
                   RSLPP.[PricingPointNumber],
                   RSLPP.[OriginPostalCodeID],
                   RSLPP.[OriginPostalCodeName],
                   RSLPP.[DestinationPostalCodeID],
                   RSLPP.[DestinationPostalCodeName],
                   RSLPP.[PricingPointHashCode],
                   RSLPP.[Cost],
                   RSLPP.[Cost],
                   RSLPP.[DrRate],
                   '{"0": 10, "1000": 20, "2000": 30, "5000": 40, "10000": 50, "20000": 60}',
                   RSLPP.[FakRate],
                   RSLPP.[FakRate],
                   RSLPP.[Profitability],
                   RSLPP.[Profitability],
                   RSLPP.[SplitsAll],
                   RSLPP.[SplitsAll],
                   RSLPP.[SplitsAllUsagePercentage],
                   RSLPP.[SplitsAllUsagePercentage],
                   RSLPP.[PickupCount],
                   RSLPP.[PickupCount],
                   RSLPP.[DeliveryCount],
                   RSLPP.[DeliveryCount],
                   RSLPP.[DockAdjustment],
                   RSLPP.[DockAdjustment],
                   RSLPP.[Margin],
                   RSLPP.[Margin],
                   RSLPP.[Density],
                   RSLPP.[Density],
                   RSLPP.[PickupCost],
                   RSLPP.[PickupCost],
                   RSLPP.[DeliveryCost],
                   RSLPP.[DeliveryCost],
                   RSLPP.[AccessorialsValue],
                   RSLPP.[AccessorialsValue],
                   RSLPP.[AccessorialsPercentage],
                   RSLPP.[AccessorialsPercentage],
                   0,
                   @ContextID,
                   GETUTCDATE()
            FROM dbo.RequestSectionLanePricingPoint RSLPP
                     INNER JOIN dbo.RequestSectionLane RSL ON RSLPP.RequestSectionLaneID = RSL.RequestSectionLaneID
                     INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
            WHERE RS.RequestLaneID = @RequestLaneID
--               AND RSLPP.RequestSectionLanePricingPointID = @RequestSectionLanePricingPointId
        END;

WITH A AS
         (
             SELECT *
             FROM dbo.RequestSectionLane RSLS
             WHERE RSLS.RequestSectionID = @RequestSectionID
               AND (
                     ((@LaneStatusName = 'None') OR (@LaneStatusName = 'New' AND [IsPublished] = 0) OR
                      (@LaneStatusName = 'Changed' AND [IsEdited] = 1) OR
                      (@LaneStatusName = 'Duplicated' AND [IsDuplicate] = 1) OR
                      (@LaneStatusName = 'DoNotMeetCommitment' AND [DoNotMeetCommitment] = 1))
                     AND ((@OrigPointTypeName = 'None') OR
                          (@OrigPointTypeName = 'Country' AND OriginCountryID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Region' AND OriginRegionID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Province' AND OriginProvinceID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Terminal' AND OriginTerminalID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Basing Point' AND OriginBasingPointID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Service Point' AND OriginServicePointID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Postal Code' AND OriginPostalCodeID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Point Type' AND OriginPointTypeID = @OrigPointID)
                         )
                     AND ((@DestPointTypeName = 'None') OR
                          (@DestPointTypeName = 'Country' AND DestinationCountryID = @DestPointID) OR
                          (@DestPointTypeName = 'Region' AND DestinationRegionID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Province' AND DestinationProvinceID = @DestPointID) OR
                          (@DestPointTypeName = 'Terminal' AND DestinationTerminalID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Basing Point' AND DestinationBasingPointID = @DestPointID) OR
                          (@DestPointTypeName = 'Service Point' AND DestinationServicePointID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Postal Code' AND DestinationPostalCodeID = @DestPointID) OR
                          (@DestPointTypeName = 'Point Type' AND DestinationPointTypeID = @DestPointID)
                         )
                 )
               AND ((@FilterCount1 + @FilterCount2 = 0) OR
                    (@FilterCount1 > 0 AND RSLS.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableType)))
         ),
     B AS
         (
             SELECT *
             FROM dbo.RequestSectionLanePricingPoint_Staging RSLPPS
             WHERE RSLPPS.RequestLaneID = @RequestLaneID
               AND RSLPPS.ContextID = @ContextID
               AND (RSLPPS.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM A)
                 OR
                    RSLPPS.RequestSectionLanePricingPointID IN
                    (SELECT ID FROM @RequestSectionLanePricingPointTableType))
         )

UPDATE dbo.RequestSectionLanePricingPoint_Staging
SET IsUpdated                   = 1,
    NewIsActive                 = CASE WHEN @IsActive IS NOT NULL THEN @IsActive ELSE B.NewIsActive END,
    NewIsInactiveViewable       = CASE
                                      WHEN @IsInactiveViewable IS NOT NULL THEN @IsInactiveViewable
                                      ELSE B.NewIsInactiveViewable END,
    NewCost                     = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'cost' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewCost, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewCost END,
    NewDrRate                   = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'dr_rate' AND
                                           @OperationName IS NOT NULL AND @OperationName = '=' AND
                                           @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN RSLPPTT_NV.Value
                                      ELSE B.NewDrRate END,
    NewFakRate                  = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'fak_rate' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewFakRate, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewFakRate END,
    NewSplitsAll                = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'splits_all' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewSplitsAll, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewSplitsAll END,
    NewProfitability            = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'profitability' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewProfitability, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewProfitability END,
    NewMargin                   = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'margin' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewMargin, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewMargin END,
    NewDensity                  = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'density' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDensity, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewDensity END,
    NewPickupCost               = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_cost' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewPickupCost, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewPickupCost END,
    NewDeliveryCost             = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_cost' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDeliveryCost, @WeightBreak,
                                                                                       @OperationName, @Multiplier)
                                      ELSE B.NewDeliveryCost END,
    NewAccessorialsValue        = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_value' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewAccessorialsValue,
                                                                                       @WeightBreak, @OperationName,
                                                                                       @Multiplier)
                                      ELSE B.NewAccessorialsValue END,
    NewAccessorialsPercentage   = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_percentage' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                           @WeightBreakLowerBound IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_RateTable(B.NewAccessorialsPercentage,
                                                                                       @WeightBreak, @OperationName,
                                                                                       @Multiplier)
                                      ELSE B.NewAccessorialsPercentage END,
    NewPickupCount              = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_count' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_Rate(B.NewPickupCount, @OperationName,
                                                                                  @Multiplier)
                                      ELSE B.NewPickupCount END,
    NewDeliveryCount            = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_count' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_Rate(B.NewDeliveryCount, @OperationName,
                                                                                  @Multiplier)
                                      ELSE B.NewDeliveryCount END,
    NewDockAdjustment           = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'dock_adjustment' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_Rate(B.NewDockAdjustment, @OperationName,
                                                                                  @Multiplier)
                                      ELSE B.NewDockAdjustment END,
    NewSplitsAllUsagePercentage = CASE
                                      WHEN @RateTable IS NOT NULL AND @RateTable = 'splits_all_usage_percentage' AND
                                           @OperationName IS NOT NULL AND @Multiplier IS NOT NULL
                                          THEN dbo.RequestSectionLane_Modify_Rate(B.NewSplitsAllUsagePercentage,
                                                                                  @OperationName, @Multiplier)
                                      ELSE B.NewSplitsAllUsagePercentage END
FROM B
         INNER JOIN @RequestSectionLanePricingPointTableType RSLPPTT_NV
                    on B.RequestSectionLanePricingPointID = RSLPPTT_NV.ID
WHERE dbo.RequestSectionLanePricingPoint_Staging.RequestLaneID = B.RequestLaneID
  AND dbo.RequestSectionLanePricingPoint_Staging.RequestSectionLaneID = B.RequestSectionLaneID
  AND dbo.RequestSectionLanePricingPoint_Staging.ContextID = B.ContextID
  AND dbo.RequestSectionLanePricingPoint_Staging.RequestSectionLanePricingPointID = B.RequestSectionLanePricingPointID
    IF (@MicroSave IS NOT NULL AND @MicroSave = 1) OR (@MacroSave IS NOT NULL AND @MacroSave = 1)
        BEGIN
            ;

            WITH B AS
                     (
                         SELECT *
                         FROM dbo.RequestSectionLanePricingPoint_Staging
                         WHERE ContextID = @ContextID
                           AND IsUpdated = 1
                     )

            Update dbo.RequestSectionLanePricingPoint
            SET Cost                     = B.NewCost,
                [DrRate]                 = B.[NewDrRate],
                FakRate                  = B.NewFakRate,
                SplitsAll                = B.NewSplitsAll,
                SplitsAllUsagePercentage = B.NewSplitsAllUsagePercentage,
                [Profitability]          = B.[NewProfitability],
                [PickupCount]            = B.[NewPickupCount],
                [DeliveryCount]          = B.[NewDeliveryCount],
                [DockAdjustment]         = B.[NewDockAdjustment],
                [Margin]                 = B.[NewMargin],
                [Density]                = B.[NewDensity],
                [PickupCost]             = B.[NewPickupCost],
                [DeliveryCost]           = B.[NewDeliveryCost],
                [AccessorialsValue]      = B.[NewAccessorialsValue],
                [AccessorialsPercentage] = B.[NewAccessorialsPercentage],
                IsActive                 = B.NewIsActive,
                IsInactiveViewable       = B.NewIsInactiveViewable
            FROM B
            WHERE dbo.RequestSectionLanePricingPoint.RequestSectionLanePricingPointID =
                  B.RequestSectionLanePricingPointID;

            DELETE
            FROM dbo.RequestSectionLanePricingPoint_Staging
            WHERE RequestLaneID = @RequestLaneID
              AND ContextID = @ContextID

        END

--     COMMIT TRAN

    RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestSectionLanePricingPoint_Staging_Update_TEMP]
	@RequestSectionID BIGINT,
	@ContextID NVARCHAR(32),
	@OrigPointTypeName NVARCHAR(50),
	@OrigPointID BIGINT,
	@DestPointTypeName NVARCHAR(50),
	@DestPointID BIGINT,
	@LaneStatusName NVARCHAR(50),
	@RequestSectionLaneTableType_ID NVARCHAR(MAX) = NULL,
	@RequestSectionLanePricingPointTableType_ID NVARCHAR(MAX) = NULL,
	@OperationName  CHAR(1) = NULL,
	@Multiplier DECIMAL(19,6) = NULL,
	@RateTable NVARCHAR(50),
	@WeightBreakLowerBound NVARCHAR(MAX) = NULL,
	@MicroSave BIT = NULL,
	@MacroSave BIT = NULL,
	@IsActive BIT = NULL,
	@IsInactiveViewable BIT = NULL
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID FROM dbo.RequestSection WHERE RequestSectionID = @RequestSectionID;

DECLARE @RequestSectionLaneTableType IDTableType;
INSERT INTO @RequestSectionLaneTableType
(
	ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLaneTableType_ID)

DECLARE @RequestSectionLanePricingPointTableType IDTableType;
INSERT INTO @RequestSectionLanePricingPointTableType
(
	ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLanePricingPointTableType_ID)

DECLARE @FilterCount1 INT, @FilterCount2 INT;
SELECT @FilterCount1 = COUNT(*) FROM @RequestSectionLaneTableType;
SELECT @FilterCount2 = COUNT(*) FROM @RequestSectionLanePricingPointTableType;

DECLARE @WeightBreak IDTableType;
INSERT INTO @WeightBreak
(
	ID
)
SELECT [value]
FROM OPENJSON(@WeightBreakLowerBound)

IF NOT EXISTS (SELECT TOP 1 ContextID FROM dbo.RequestSectionLane_Staging WHERE [RequestLaneID] = @RequestLaneID AND ContextID = @ContextID)
BEGIN
	INSERT INTO dbo.RequestSectionLane_Staging
	(
	[RequestSectionLaneID],
	[RequestSectionID],
	[RequestLaneID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsLaneGroup],
	[OriginProvinceID],
	[OriginProvinceCode],
	[OriginRegionID],
	[OriginRegionCode],
	[OriginCountryID],
	[OriginCountryCode],
	[OriginTerminalID],
	[OriginTerminalCode],
	[OriginZoneID],
	[OriginZoneName],
	[OriginBasingPointID],
	[OriginBasingPointName],
	[OriginServicePointID],
	[OriginServicePointName],
	[OriginPostalCodeID],
	[OriginPostalCodeName],
	[OriginPointTypeID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceID],
	[DestinationProvinceCode],
	[DestinationRegionID],
	[DestinationRegionCode],
	[DestinationCountryID],
	[DestinationCountryCode],
	[DestinationTerminalID],
	[DestinationTerminalCode],
	[DestinationZoneID],
	[DestinationZoneName],
	[DestinationBasingPointID],
	[DestinationBasingPointName],
	[DestinationServicePointID],
	[DestinationServicePointName],
	[DestinationPostalCodeID],
	[DestinationPostalCodeName],
	[DestinationPointTypeID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	[Cost],
	[NewCost],
	[IsActive],
	[NewIsActive],
    [IsInactiveViewable],
	[NewIsInactiveViewable],
	[IsBetween],
	[NewIsBetween],
	[IsUpdated],
	[ContextID],
	[ContextCreatedOn],
	[DoNotMeetCommitment],
	[NewDoNotMeetCommitment],
	[Commitment],
	[NewCommitment],
	[CustomerRate],
	[NewCustomerRate],
	[CustomerDiscount],
	[NewCustomerDiscount],
	[DrRate],
	[NewDrRate],
	[PartnerRate],
	[NewPartnerRate],
	[PartnerDiscount],
	[NewPartnerDiscount],
	[Profitability],
	[NewProfitability],
	[PickupCount],
	[NewPickupCount],
	[DeliveryCount],
	[NewDeliveryCount],
	[DockAdjustment],
	[NewDockAdjustment],
	[Margin],
	[NewMargin],
	[Density],
	[NewDensity],
	[PickupCost],
	[NewPickupCost],
	[DeliveryCost],
	[NewDeliveryCost],
	[AccessorialsValue],
	[NewAccessorialsValue],
	[AccessorialsPercentage],
	[NewAccessorialsPercentage]
	)
	SELECT
	[RequestSectionLaneID],
	RSL.[RequestSectionID],
	RS.[RequestLaneID],
    [LaneNumber],
	[IsPublished],
	[IsEdited],
	[IsDuplicate],
	[IsLaneGroup],
	[OriginProvinceID],
	[OriginProvinceCode],
	[OriginRegionID],
	[OriginRegionCode],
	[OriginCountryID],
	[OriginCountryCode],
	[OriginTerminalID],
	[OriginTerminalCode],
	[OriginZoneID],
	[OriginZoneName],
	[OriginBasingPointID],
	[OriginBasingPointName],
	[OriginServicePointID],
	[OriginServicePointName],
	[OriginPostalCodeID],
	[OriginPostalCodeName],
	[OriginPointTypeID],
	[OriginPointTypeName],
	[OriginCode],
	[DestinationProvinceID],
	[DestinationProvinceCode],
	[DestinationRegionID],
	[DestinationRegionCode],
	[DestinationCountryID],
	[DestinationCountryCode],
	[DestinationTerminalID],
	[DestinationTerminalCode],
	[DestinationZoneID],
	[DestinationZoneName],
	[DestinationBasingPointID],
	[DestinationBasingPointName],
	[DestinationServicePointID],
	[DestinationServicePointName],
	[DestinationPostalCodeID],
	[DestinationPostalCodeName],
	[DestinationPointTypeID],
	[DestinationPointTypeName],
	[DestinationCode],
	[LaneHashCode],
	[BasingPointHashCode],
	RSL.[Cost],
	RSL.[Cost],
	RSL.[IsActive],
	RSL.[IsActive],
    RSL.[IsInactiveViewable],
	RSL.[IsInactiveViewable],
	RSL.[IsBetween],
	RSL.[IsBetween],
	0,
	@ContextID,
	GETUTCDATE(),
	[DoNotMeetCommitment],
	[DoNotMeetCommitment],
	[Commitment],
	[Commitment],
	[CustomerRate],
	[CustomerRate],
	[CustomerDiscount],
	[CustomerDiscount],
	[DrRate],
	[DrRate],
	[PartnerRate],
	[PartnerRate],
	[PartnerDiscount],
	[PartnerDiscount],
	[Profitability],
	[Profitability],
	[PickupCount],
	[PickupCount],
	[DeliveryCount],
	[DeliveryCount],
	[DockAdjustment],
	[DockAdjustment],
	[Margin],
	[Margin],
	[Density],
	[Density],
	[PickupCost],
	[PickupCost],
	[DeliveryCost],
	[DeliveryCost],
	[AccessorialsValue],
	[AccessorialsValue],
	[AccessorialsPercentage],
	[AccessorialsPercentage]
	FROM dbo.RequestSectionLane RSL
	INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
	WHERE RS.RequestLaneID = @RequestLaneID
END;

IF NOT EXISTS (SELECT TOP 1 ContextID FROM dbo.RequestSectionLanePricingPoint_Staging WHERE [RequestLaneID] = @RequestLaneID AND ContextID = @ContextID)
BEGIN
	INSERT INTO dbo.RequestSectionLanePricingPoint_Staging
	(
		[IsActive],
		[NewIsActive],
		[IsInactiveViewable],
		[NewIsInactiveViewable],
		[RequestSectionLanePricingPointID],
		[RequestSectionLaneID],
		[RequestLaneID],
		[PricingPointNumber],
		[OriginPostalCodeID],
		[OriginPostalCodeName],
		[DestinationPostalCodeID],
		[DestinationPostalCodeName],
		[PricingPointHashCode],
		[Cost],
		[NewCost],
		[DrRate],
		[NewDrRate],
		[FakRate],
		[NewFakRate],
		[Profitability],
		[NewProfitability],
		[SplitsAll],
		[NewSplitsAll],
		[SplitsAllUsagePercentage],
		[NewSplitsAllUsagePercentage],
		[PickupCount],
		[NewPickupCount],
		[DeliveryCount],
		[NewDeliveryCount],
		[DockAdjustment],
		[NewDockAdjustment],
		[Margin],
		[NewMargin],
		[Density],
		[NewDensity],
		[PickupCost],
		[NewPickupCost],
		[DeliveryCost],
		[NewDeliveryCost],
		[AccessorialsValue],
		[NewAccessorialsValue],
		[AccessorialsPercentage],
		[NewAccessorialsPercentage],
		[IsUpdated],
		[ContextID],
		[ContextCreatedOn]
	)
	SELECT RSLPP.[IsActive],
		RSLPP.[IsActive],
		RSLPP.[IsInactiveViewable],
		RSLPP.[IsInactiveViewable],
		RSLPP.[RequestSectionLanePricingPointID],
		RSLPP.[RequestSectionLaneID],
		@RequestLaneID,
		RSLPP.[PricingPointNumber],
		RSLPP.[OriginPostalCodeID],
		RSLPP.[OriginPostalCodeName],
		RSLPP.[DestinationPostalCodeID],
		RSLPP.[DestinationPostalCodeName],
		RSLPP.[PricingPointHashCode],
		RSLPP.[Cost],
		RSLPP.[Cost],
		RSLPP.[DrRate],
		RSLPP.[DrRate],
		RSLPP.[FakRate],
		RSLPP.[FakRate],
		RSLPP.[Profitability],
		RSLPP.[Profitability],
		RSLPP.[SplitsAll],
		RSLPP.[SplitsAll],
		RSLPP.[SplitsAllUsagePercentage],
		RSLPP.[SplitsAllUsagePercentage],
		RSLPP.[PickupCount],
		RSLPP.[PickupCount],
		RSLPP.[DeliveryCount],
		RSLPP.[DeliveryCount],
		RSLPP.[DockAdjustment],
		RSLPP.[DockAdjustment],
		RSLPP.[Margin],
		RSLPP.[Margin],
		RSLPP.[Density],
		RSLPP.[Density],
		RSLPP.[PickupCost],
		RSLPP.[PickupCost],
		RSLPP.[DeliveryCost],
		RSLPP.[DeliveryCost],
		RSLPP.[AccessorialsValue],
		RSLPP.[AccessorialsValue],
		RSLPP.[AccessorialsPercentage],
		RSLPP.[AccessorialsPercentage],
		0,
		@ContextID,
		GETUTCDATE()
		FROM dbo.RequestSectionLanePricingPoint RSLPP
		INNER JOIN 	dbo.RequestSectionLane RSL ON RSLPP.RequestSectionLaneID = RSL.RequestSectionLaneID
		INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
		WHERE RS.RequestLaneID = @RequestLaneID
END;

WITH A AS
(
	SELECT *
	FROM dbo.RequestSectionLane RSLS
	WHERE RSLS.RequestSectionID = @RequestSectionID
	AND (
		( (@LaneStatusName = 'None') OR (@LaneStatusName = 'New' AND [IsPublished] = 0) OR (@LaneStatusName = 'Changed' AND [IsEdited] = 1) OR (@LaneStatusName = 'Duplicated' AND [IsDuplicate] = 1) OR (@LaneStatusName = 'DoNotMeetCommitment' AND [DoNotMeetCommitment] = 1))
		AND ( (@OrigPointTypeName = 'None') OR
			(@OrigPointTypeName = 'Country' AND OriginCountryID = @OrigPointID) OR (@OrigPointTypeName = 'Region' AND OriginRegionID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Province' AND OriginProvinceID = @OrigPointID) OR (@OrigPointTypeName = 'Terminal' AND OriginTerminalID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Basing Point' AND OriginBasingPointID = @OrigPointID) OR (@OrigPointTypeName = 'Service Point' AND OriginServicePointID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Postal Code' AND OriginPostalCodeID = @OrigPointID) OR (@OrigPointTypeName = 'Point Type' AND OriginPointTypeID = @OrigPointID)
			)
		AND ( (@DestPointTypeName = 'None') OR
			(@DestPointTypeName = 'Country' AND DestinationCountryID = @DestPointID) OR (@DestPointTypeName = 'Region' AND DestinationRegionID = @DestPointID)
			OR
			(@DestPointTypeName = 'Province' AND DestinationProvinceID = @DestPointID) OR (@DestPointTypeName = 'Terminal' AND DestinationTerminalID = @DestPointID)
			OR
			(@DestPointTypeName = 'Basing Point' AND DestinationBasingPointID = @DestPointID) OR (@DestPointTypeName = 'Service Point' AND DestinationServicePointID = @DestPointID)
			OR
			(@DestPointTypeName = 'Postal Code' AND DestinationPostalCodeID = @DestPointID) OR (@DestPointTypeName = 'Point Type' AND DestinationPointTypeID = @DestPointID)
			)
		)
	AND ((@FilterCount1 + @FilterCount2 = 0) OR (@FilterCount1 > 0 AND RSLS.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableType)))
), B AS
(
	SELECT *
	FROM dbo.RequestSectionLanePricingPoint_Staging RSLPPS
	WHERE RSLPPS.RequestLaneID = @RequestLaneID AND RSLPPS.ContextID = @ContextID AND
	(RSLPPS.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM A)
		OR
	RSLPPS.RequestSectionLanePricingPointID IN (SELECT ID FROM @RequestSectionLanePricingPointTableType))
)

UPDATE dbo.RequestSectionLanePricingPoint_Staging
SET IsUpdated = 1,
	NewIsActive = CASE WHEN @IsActive IS NOT NULL THEN @IsActive ELSE B.NewIsActive END,
	NewIsInactiveViewable = CASE WHEN @IsInactiveViewable IS NOT NULL THEN @IsInactiveViewable ELSE B.NewIsInactiveViewable END,
	NewCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewCost, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewCost END,
	NewDrRate = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'dr_rate' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDrRate, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewDrRate END,
	NewFakRate = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'fak_rate' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewFakRate, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewFakRate END,
	NewSplitsAll = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'splits_all' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewSplitsAll, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewSplitsAll END,
	NewProfitability = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'profitability' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewProfitability, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewProfitability END,
	NewMargin = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'margin' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewMargin, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewMargin END,
	NewDensity = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'density' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDensity, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewDensity END,
	NewPickupCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewPickupCost, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewPickupCost END,
	NewDeliveryCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewDeliveryCost, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewDeliveryCost END,
	NewAccessorialsValue = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_value' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewAccessorialsValue, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewAccessorialsValue END,
	NewAccessorialsPercentage = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_percentage' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(B.NewAccessorialsPercentage, @WeightBreak, @OperationName, @Multiplier) ELSE B.NewAccessorialsPercentage END,
	NewPickupCount = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_count' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewPickupCount, @OperationName, @Multiplier) ELSE B.NewPickupCount END,
	NewDeliveryCount = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_count' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewDeliveryCount, @OperationName, @Multiplier) ELSE B.NewDeliveryCount END,
	NewDockAdjustment = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'dock_adjustment' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewDockAdjustment, @OperationName, @Multiplier) ELSE B.NewDockAdjustment END,
	NewSplitsAllUsagePercentage = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'splits_all_usage_percentage' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(B.NewSplitsAllUsagePercentage, @OperationName, @Multiplier) ELSE B.NewSplitsAllUsagePercentage END,
    WorkflowErrors = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'clear_workflow_errors' THEN NULL ELSE B.WorkflowErrors END

FROM B
WHERE dbo.RequestSectionLanePricingPoint_Staging.RequestLaneID = B.RequestLaneID
	AND dbo.RequestSectionLanePricingPoint_Staging.RequestSectionLaneID = B.RequestSectionLaneID
	AND dbo.RequestSectionLanePricingPoint_Staging.ContextID = B.ContextID
	AND dbo.RequestSectionLanePricingPoint_Staging.RequestSectionLanePricingPointID = B.RequestSectionLanePricingPointID

IF (@MicroSave IS NOT NULL AND @MicroSave = 1) OR (@MacroSave IS NOT NULL AND @MacroSave = 1)
BEGIN;

	WITH B AS
	(
		SELECT *
		FROM dbo.RequestSectionLanePricingPoint_Staging
		WHERE ContextID = @ContextID AND IsUpdated = 1
	)

	Update dbo.RequestSectionLanePricingPoint
	SET Cost = B.NewCost,
		[DrRate] = B.[NewDrRate],
		FakRate = B.NewFakRate,
		SplitsAll = B.NewSplitsAll,
		SplitsAllUsagePercentage = B.NewSplitsAllUsagePercentage,
		[Profitability] = B.[NewProfitability],
		[PickupCount] = B.[NewPickupCount],
		[DeliveryCount] = B.[NewDeliveryCount],
		[DockAdjustment] = B.[NewDockAdjustment],
		[Margin] = B.[NewMargin],
		[Density] = B.[NewDensity],
		[PickupCost] = B.[NewPickupCost],
		[DeliveryCost] = B.[NewDeliveryCost],
		[AccessorialsValue] = B.[NewAccessorialsValue],
		[AccessorialsPercentage] = B.[NewAccessorialsPercentage],
		IsActive = B.NewIsActive,
		IsInactiveViewable = B.NewIsInactiveViewable,
        PricingRates = B.PricingRates,
        WorkflowErrors = B.WorkflowErrors
	FROM B
	WHERE dbo.RequestSectionLanePricingPoint.RequestSectionLanePricingPointID = B.RequestSectionLanePricingPointID;

	--WITH C AS
	--(
	--	SELECT DISTINCT RequestSectionLaneID
	--	FROM dbo.RequestSectionLanePricingPoint_Staging
	--	WHERE ContextID = @ContextID AND IsUpdated = 1
	--)

	--UPDATE dbo.RequestSectionLane
	--SET IsEdited = 1
	--WHERE dbo.RequestSectionLane.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM C)

	--EXEC dbo.RequestLane_Count @RequestLaneID;

	--DECLARE @RequestSectionLanePricingPointToBeUpdated IDTableType;

	--INSERT INTO @RequestSectionLanePricingPointToBeUpdated
	--(
	--	[ID]
	--)
	--SELECT RequestSectionLanePricingPointID
	--FROM dbo.RequestSectionLanePricingPoint_Staging
	--WHERE ContextID = @ContextID AND IsUpdated = 1

	--EXEC [dbo].[RequestSectionLanePricingPoint_History_Update] @RequestSectionLanePricingPointToBeUpdated

	--IF (@MacroSave IS NOT NULL AND @MacroSave = 1)
	--BEGIN
	--	DECLARE @RequestLaneVersionID BIGINT;

	--	SELECT @RequestLaneVersionID = RequestLaneVersionID
	--	FROM dbo.RequestLane_History RLH
	--	WHERE RLH.RequestLaneID = @RequestLaneID AND RLH.IsLatestVersion = 1

	--	DECLARE @RequestHistory TABLE
	--	(
	--		[VersionNum]                   INT             NOT NULL,
	--		[BaseVersion]		  INT				  NULL,
	--		[IsLatestVersion]              BIT             NOT NULL,
	--		[UpdatedOn]                    DATETIME2 (7)   NOT NULL,
	--		[UpdatedBy]                    NVARCHAR (50)   NOT NULL,
	--		[Comments]                     NVARCHAR (4000) NOT NULL,
	--		[IsActive]                     BIT             NOT NULL,
	--		[IsInactiveViewable]           BIT             NOT NULL,
	--		[RequestVersionID]             BIGINT          NOT NULL,
	--		[RequestNumber]                NVARCHAR (32)   NOT NULL,
	--		[RequestCode]                NVARCHAR (32)   NOT NULL,
	--		[InitiatedOn]                  DATETIME2 (7)   NOT NULL,
	--		[SubmittedOn]                  DATETIME2 (7)   NULL,
	--		[IsValidData]                  BIT             NOT NULL,
	--		[InitiatedByVersion]           BIGINT          NOT NULL,
	--		[RequestID]                    BIGINT          NOT NULL,
	--		[RequestAccessorialsVersionID] BIGINT          NULL,
	--		[RequestInformationVersionID]  BIGINT          NULL,
	--		[RequestLaneVersionID]        BIGINT          NULL,
	--		[RequestProfileVersionID]      BIGINT          NULL,
	--		[SubmittedByVersion]           BIGINT          NULL,
	--		[IsReview] BIT NOT NULL
	--	)
	--	INSERT INTO @RequestHistory
	--	(
	--		[VersionNum],
	--		[BaseVersion],
	--		[IsLatestVersion],
	--		[UpdatedOn],
	--		[UpdatedBy],
	--		[Comments],
	--		[IsActive],
	--		[IsInactiveViewable],
	--		[RequestVersionID],
	--		[RequestNumber],
	--		[RequestCode],
	--		[InitiatedOn],
	--		[SubmittedOn],
	--		[IsValidData],
	--		[InitiatedByVersion],
	--		[RequestID],
	--		[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		[RequestLaneVersionID],
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		[IsReview]
	--	)
	--	SELECT [VersionNum],
	--		[BaseVersion],
	--		[IsLatestVersion],
	--		[UpdatedOn],
	--		[UpdatedBy],
	--		[Comments],
	--		RH.[IsActive],
	--		RH.[IsInactiveViewable],
	--		[RequestVersionID],
	--		RH.[RequestNumber],
	--		RH.[RequestCode],
	--		RH.[InitiatedOn],
	--		RH.[SubmittedOn],
	--		RH.[IsValidData],
	--		[InitiatedByVersion],
	--		RH.[RequestID],
	--		RH.[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		[RequestLaneVersionID],
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		RH.[IsReview]
	--	FROM dbo.Request_History RH
	--	INNER JOIN dbo.Request R ON RH.[RequestID] = R.[RequestID] AND RH.[IsLatestVersion] = 1 AND R.RequestLaneID = @RequestLaneID

	--	UPDATE dbo.Request_History
	--	SET [IsLatestVersion] = 0
	--	WHERE dbo.Request_History.[RequestVersionID] IN (SELECT [RequestVersionID] FROM @RequestHistory)

	--	INSERT INTO dbo.Request_History
	--	(
	--		[VersionNum],
	--		[IsLatestVersion],
	--		[UpdatedOn],
	--		[UpdatedBy],
	--		[Comments],
	--		[IsActive],
	--		[IsInactiveViewable],
	--		[RequestNumber],
	--		[RequestCode],
	--		[InitiatedOn],
	--		[SubmittedOn],
	--		[IsValidData],
	--		[InitiatedByVersion],
	--		[RequestID],
	--		[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		[RequestLaneVersionID],
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		[IsReview]
	--	)
	--	SELECT [VersionNum]+1,
	--		1,
	--		GETUTCDATE(),
	--		'',
	--		'',
	--		[IsActive],
	--		[IsInactiveViewable],
	--		[RequestNumber],
	--		[RequestCode],
	--		[InitiatedOn],
	--		[SubmittedOn],
	--		[IsValidData],
	--		[InitiatedByVersion],
	--		[RequestID],
	--		[RequestAccessorialsVersionID],
	--		[RequestInformationVersionID],
	--		@RequestLaneVersionID,
	--		[RequestProfileVersionID],
	--		[SubmittedByVersion],
	--		[IsReview]
	--	FROM @RequestHistory
	--END

	--DELETE FROM dbo.RequestSectionLane_Staging
	--WHERE RequestLaneID = @RequestLaneID AND ContextID = @ContextID

	DELETE FROM dbo.RequestSectionLanePricingPoint_Staging
	WHERE RequestLaneID = @RequestLaneID AND ContextID = @ContextID

END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestSectionLane_Clear_Cost]
	@RequestSectionTableType_ID     IDTableType READONLY,
	@RequestID BIGINT,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Clearing Invalid Cost.';

BEGIN TRAN

DECLARE @RequestSectionLaneCost TABLE
(
	[RequestSectionID] BIGINT NOT NULL,
	[Cost] NVARCHAR(MAX) NOT NULL
)

INSERT INTO @RequestSectionLaneCost
(
	[RequestSectionID],
	[Cost]
)
SELECT ID,
	dbo.GetRequestSectionLaneDefaultCost(ID)
FROM @RequestSectionTableType_ID

DECLARE @RequestSectionLane TABLE
(
	[RequestSectionLaneID] BIGINT NOT NULL,
	[Cost] NVARCHAR(MAX) NOT NULL
)

INSERT INTO @RequestSectionLane
(
	[RequestSectionLaneID],
	[Cost]
)
SELECT RSL.RequestSectionLaneID,
	RS.[Cost]
FROM dbo.RequestSectionLane RSL
INNER JOIN @RequestSectionLaneCost RS ON RSL.RequestSectionID = RS.RequestSectionID

UPDATE dbo.RequestSectionLane
SET [Commitment] = A.Cost,
	[CustomerRate] = A.Cost,
	[CustomerDiscount] = A.Cost,
	[DrRate] = A.Cost,
	[PartnerRate] = A.Cost,
	[PartnerDiscount] = A.Cost,
	[Profitability] = A.Cost,
	[PickupCount] = NULL,
	[DeliveryCount] = NULL,
	[DockAdjustment] = NULL,
	[Margin] = A.Cost,
	[Density] = A.Cost,
	[PickupCost] = A.Cost,
	[DeliveryCost] = A.Cost,
	[AccessorialsValue] = A.Cost,
	[AccessorialsPercentage] = A.Cost,
	IsEdited = 1,
	[DoNotMeetCommitment] = 0
FROM @RequestSectionLane A
WHERE dbo.RequestSectionLane.RequestSectionLaneID = A.RequestSectionLaneID

UPDATE dbo.RequestSectionLanePricingPoint
SET [DrRate] = A.Cost,
	[FakRate] = A.Cost,
	[Profitability] = A.Cost,
	[SplitsAll] = A.Cost,
	[SplitsAllUsagePercentage] = 0,
	[PickupCount] = NULL,
	[DeliveryCount] = NULL,
	[DockAdjustment] = NULL,
	[Margin] = A.Cost,
	[Density] = A.Cost,
	[PickupCost] = A.Cost,
	[DeliveryCost] = A.Cost,
	[AccessorialsValue] = A.Cost,
	[AccessorialsPercentage] = A.Cost
FROM @RequestSectionLane A
WHERE dbo.RequestSectionLanePricingPoint.RequestSectionLaneID = A.RequestSectionLaneID

SELECT @ERROR1 = @@ERROR

IF (@ERROR1 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID FROM dbo.Request WHERE RequestID = @RequestID
EXEC dbo.RequestLane_Count @RequestLaneID, @UpdatedBy, @Comments

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestSectionLane_Copy]
	@RequestSectionLaneIDs NVARCHAR(MAX),
	@SourceRequestSectionID BIGINT,
	@DestinationRequestSectionID BIGINT,
	@OrigPointTypeName NVARCHAR(50),
	@OrigPointID BIGINT,
	@DestPointTypeName NVARCHAR(50),
	@DestPointID BIGINT,
	@LaneStatusName NVARCHAR(50),
	@IsMove BIT,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Duplicating lanes.';

BEGIN TRAN

	DECLARE @RequestSectionLanes IDTableType;
	INSERT INTO @RequestSectionLanes
	(
		ID
	)
	SELECT [value]
	FROM OPENJSON(@RequestSectionLaneIDs)

	DECLARE @FilterCount INT;
	SELECT @FilterCount = COUNT(*) FROM @RequestSectionLanes;

	DECLARE @Cost NVARCHAR(MAX) = dbo.GetRequestSectionLaneDefaultCost(@DestinationRequestSectionID);

	DECLARE @RequestSectionLaneTableType RequestSectionLaneTableType;

	INSERT INTO @RequestSectionLaneTableType
	(
		[IsActive],
		[IsInactiveViewable],
		[RequestSectionID],
		[LaneNumber],
		[IsPublished],
		[IsEdited],
		[IsDuplicate],
		[IsBetween],
		[IsLaneGroup],
		[OriginProvinceID],
		[OriginProvinceCode],
		[OriginRegionID],
		[OriginRegionCode],
		[OriginCountryID],
		[OriginCountryCode],
		[OriginTerminalID],
		[OriginTerminalCode],
		[OriginZoneID],
		[OriginZoneName],
		[OriginBasingPointID],
		[OriginBasingPointName],
		[OriginServicePointID],
		[OriginServicePointName],
		[OriginPostalCodeID],
		[OriginPostalCodeName],
		[OriginPointTypeID],
		[OriginPointTypeName],
		[OriginCode],
		[DestinationProvinceID],
		[DestinationProvinceCode],
		[DestinationRegionID],
		[DestinationRegionCode],
		[DestinationCountryID],
		[DestinationCountryCode],
		[DestinationTerminalID],
		[DestinationTerminalCode],
		[DestinationZoneID],
		[DestinationZoneName],
		[DestinationBasingPointID],
		[DestinationBasingPointName],
		[DestinationServicePointID],
		[DestinationServicePointName],
		[DestinationPostalCodeID],
		[DestinationPostalCodeName],
		[DestinationPointTypeID],
		[DestinationPointTypeName],
		[DestinationCode],
		[LaneHashCode],
		[BasingPointHashCode],
		[Cost],
		[RequestSectionLaneID],
		[DoNotMeetCommitment],
		[Commitment],
		[CustomerRate],
		[CustomerDiscount],
		[DrRate],
		[PartnerRate],
		[PartnerDiscount],
		[Profitability],
		[PickupCount],
		[DeliveryCount],
		[DockAdjustment],
		[Margin],
		[Density],
		[PickupCost],
		[DeliveryCost],
		[AccessorialsValue],
		[AccessorialsPercentage]
	)
	SELECT 1,
		1,
		@DestinationRequestSectionID,
		REPLACE(NEWID(), '-', ''),
		0,
		0,
		0,
		[IsBetween],
		[IsLaneGroup],
		[OriginProvinceID],
		[OriginProvinceCode],
		[OriginRegionID],
		[OriginRegionCode],
		[OriginCountryID],
		[OriginCountryCode],
		[OriginTerminalID],
		[OriginTerminalCode],
		[OriginZoneID],
		[OriginZoneName],
		[OriginBasingPointID],
		[OriginBasingPointName],
		[OriginServicePointID],
		[OriginServicePointName],
		[OriginPostalCodeID],
		[OriginPostalCodeName],
		[OriginPointTypeID],
		[OriginPointTypeName],
		[OriginCode],
		[DestinationProvinceID],
		[DestinationProvinceCode],
		[DestinationRegionID],
		[DestinationRegionCode],
		[DestinationCountryID],
		[DestinationCountryCode],
		[DestinationTerminalID],
		[DestinationTerminalCode],
		[DestinationZoneID],
		[DestinationZoneName],
		[DestinationBasingPointID],
		[DestinationBasingPointName],
		[DestinationServicePointID],
		[DestinationServicePointName],
		[DestinationPostalCodeID],
		[DestinationPostalCodeName],
		[DestinationPointTypeID],
		[DestinationPointTypeName],
		[DestinationCode],
		[LaneHashCode],
		[BasingPointHashCode],
		@Cost,
		[RequestSectionLaneID],
		0,
		@Cost,
		@Cost,
		@Cost,
		@Cost,
		@Cost,
		@Cost,
		@Cost,
		NULL,
		NULL,
		NULL,
		@Cost,
		@Cost,
		@Cost,
		@Cost,
		@Cost,
		@Cost
	FROM dbo.RequestSectionLane RSL
	WHERE RSL.RequestSectionID = @SourceRequestSectionID
	AND (
		( (@LaneStatusName = 'None') OR (@LaneStatusName = 'New' AND [IsPublished] = 0) OR (@LaneStatusName = 'Changed' AND [IsEdited] = 1) OR (@LaneStatusName = 'Duplicated' AND [IsDuplicate] = 1) OR (@LaneStatusName = 'DoNotMeetCommitment' AND [DoNotMeetCommitment] = 1) )
		AND ( (@OrigPointTypeName = 'None') OR
			(@OrigPointTypeName = 'Country' AND OriginCountryID = @OrigPointID) OR (@OrigPointTypeName = 'Region' AND OriginRegionID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Province' AND OriginProvinceID = @OrigPointID) OR (@OrigPointTypeName = 'Terminal' AND OriginTerminalID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Basing Point' AND OriginBasingPointID = @OrigPointID) OR (@OrigPointTypeName = 'Service Point' AND OriginServicePointID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Postal Code' AND OriginPostalCodeID = @OrigPointID) OR (@OrigPointTypeName = 'Point Type' AND OriginPointTypeID = @OrigPointID)
			)
		AND ( (@DestPointTypeName = 'None') OR
			(@DestPointTypeName = 'Country' AND DestinationCountryID = @DestPointID) OR (@DestPointTypeName = 'Region' AND DestinationRegionID = @DestPointID)
			OR
			(@DestPointTypeName = 'Province' AND DestinationProvinceID = @DestPointID) OR (@DestPointTypeName = 'Terminal' AND DestinationTerminalID = @DestPointID)
			OR
			(@DestPointTypeName = 'Basing Point' AND DestinationBasingPointID = @DestPointID) OR (@DestPointTypeName = 'Service Point' AND DestinationServicePointID = @DestPointID)
			OR
			(@DestPointTypeName = 'Postal Code' AND DestinationPostalCodeID = @DestPointID) OR (@DestPointTypeName = 'Point Type' AND DestinationPointTypeID = @DestPointID)
			)
		)
	AND ((@FilterCount = 0) OR (@FilterCount > 0 AND RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLanes)))

	DECLARE @RequestLaneID BIGINT = (SELECT RequestLaneID FROM dbo.RequestSection WHERE RequestSectionID = @SourceRequestSectionID)

	EXEC dbo.RequestSectionLane_Insert_Bulk @RequestSectionLaneTableType, @RequestLaneID

	IF @IsMove = 1
	BEGIN
		Update dbo.RequestSectionLane
		SET IsActive = 0
		WHERE dbo.RequestSectionLane.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM @RequestSectionLaneTableType)

		EXEC dbo.RequestLane_Count @RequestLaneID
	END

COMMIT TRAN
RETURN 1

go

CREATE
 PROCEDURE [dbo].[RequestSectionLane_Cost_Override] @RequestSectionLaneIDS VARCHAR(MAX),
                                                         @CostOverridePickupCount BIGINT,
                                                         @CostOverrideDeliveryCount BIGINT,
                                                         @CostOverrideDockAdjustment DECIMAL(19, 6),
                                                         @CostOverrideMargin NVARCHAR(MAX),
                                                         @CostOverrideDensity NVARCHAR(MAX),
                                                         @CostOverridePickupCost NVARCHAR(MAX),
                                                         @CostOverrideDeliveryCost NVARCHAR(MAX),
                                                         @CostOverrideAccessorialsValue NVARCHAR(MAX),
                                                         @CostOverrideAccessorialsPercentage NVARCHAR(MAX)
AS

    SET NOCOUNT ON;


    IF OBJECT_ID(N'tempdb..#RequestSectionLaneId') IS NOT NULL
        DROP TABLE #RequestSectionLaneId
    CREATE TABLE #RequestSectionLaneId
    (
        RequestSectionLaneId BIGINT
    );

INSERT INTO #RequestSectionLaneId (RequestSectionLaneId)
SELECT value
FROM STRING_SPLIT(@RequestSectionLaneIDS, ',');

UPDATE RequestSectionLane
SET CostOverridePickupCount= @CostOverridePickupCount,
    CostOverrideDeliveryCount=@CostOverrideDeliveryCount,
    CostOverrideDockAdjustment=@CostOverrideDockAdjustment,
    CostOverrideMargin=@CostOverrideMargin,
    CostOverrideDensity=@CostOverrideDensity,
    CostOverridePickupCost=@CostOverridePickupCost,
    CostOverrideDeliveryCost=@CostOverrideDeliveryCost,
    CostOverrideAccessorialsValue=@CostOverrideAccessorialsValue,
    CostOverrideAccessorialsPercentage=@CostOverrideAccessorialsPercentage

WHERE RequestSectionLaneID IN (SELECT RequestSectionLaneId FROM #RequestSectionLaneId)

    RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestSectionLane_Delete]
	@RequestSectionID BIGINT,
	@OrigPointTypeName NVARCHAR(50),
	@OrigPointID BIGINT,
	@DestPointTypeName NVARCHAR(50),
	@DestPointID BIGINT,
	@LaneStatusName NVARCHAR(50),
	@RequestSectionLaneTableType_ID NVARCHAR(MAX)
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @RequestSectionLaneTableType IDTableType;
INSERT INTO @RequestSectionLaneTableType
(
	ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLaneTableType_ID)

DECLARE @FilterCount INT;
SELECT @FilterCount = COUNT(*) FROM @RequestSectionLaneTableType;

WITH A AS
(
	SELECT RequestSectionLaneID
	FROM dbo.RequestSectionLane RSLS
	WHERE RSLS.RequestSectionID = @RequestSectionID
	AND (
		( (@LaneStatusName = 'None') OR (@LaneStatusName = 'New' AND [IsPublished] = 0) OR (@LaneStatusName = 'Changed' AND [IsEdited] = 1) OR (@LaneStatusName = 'Duplicated' AND [IsDuplicate] = 1) OR (@LaneStatusName = 'DoNotMeetCommitment' AND [DoNotMeetCommitment] = 1))
		AND ( (@OrigPointTypeName = 'None') OR
			(@OrigPointTypeName = 'Country' AND OriginCountryID = @OrigPointID) OR (@OrigPointTypeName = 'Region' AND OriginRegionID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Province' AND OriginProvinceID = @OrigPointID) OR (@OrigPointTypeName = 'Terminal' AND OriginTerminalID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Basing Point' AND OriginBasingPointID = @OrigPointID) OR (@OrigPointTypeName = 'Service Point' AND OriginServicePointID = @OrigPointID)
			OR
			(@OrigPointTypeName = 'Postal Code' AND OriginPostalCodeID = @OrigPointID) OR (@OrigPointTypeName = 'Point Type' AND OriginPointTypeID = @OrigPointID)
			)
		AND ( (@DestPointTypeName = 'None') OR
			(@DestPointTypeName = 'Country' AND DestinationCountryID = @DestPointID) OR (@DestPointTypeName = 'Region' AND DestinationRegionID = @DestPointID)
			OR
			(@DestPointTypeName = 'Province' AND DestinationProvinceID = @DestPointID) OR (@DestPointTypeName = 'Terminal' AND DestinationTerminalID = @DestPointID)
			OR
			(@DestPointTypeName = 'Basing Point' AND DestinationBasingPointID = @DestPointID) OR (@DestPointTypeName = 'Service Point' AND DestinationServicePointID = @DestPointID)
			OR
			(@DestPointTypeName = 'Postal Code' AND DestinationPostalCodeID = @DestPointID) OR (@DestPointTypeName = 'Point Type' AND DestinationPointTypeID = @DestPointID)
			)
		)
	AND ((@FilterCount = 0) OR (@FilterCount > 0 AND RSLS.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableType)))
)

UPDATE dbo.RequestSectionLane
SET IsActive = 0
FROM A
WHERE dbo.RequestSectionLane.RequestSectionLaneID = A.RequestSectionLaneID

DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID FROM dbo.RequestSection WHERE RequestSectionID = @RequestSectionID;
EXEC dbo.RequestLane_Count @RequestLaneID

COMMIT TRAN

RETURN 1
go

CREATE PROCEDURE [dbo].[RequestSectionLane_History_Update] @RequestSectionLaneTableTypeID IDTableType READONLY,
                                                           @UpdatedBy nvarchar(50) = NULL,
                                                           @Comments nvarchar(4000) = NULL
AS

    SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT;

    IF @UpdatedBy IS NULL
        SELECT @UpdatedBy = 'P&C System';

    IF @Comments IS NULL
        SELECT @Comments = 'Saving RequestLane_History.';

    BEGIN TRAN

DECLARE @RequestSectionTableTypeID IDTableType;

INSERT INTO @RequestSectionTableTypeID
(
    ID
)
SELECT DISTINCT RSL.RequestSectionID
FROM dbo.RequestSectionLane RSL
WHERE RSL.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableTypeID)

DECLARE
    @RequestSectionVersion TABLE
                           (
                               RequestSectionID        BIGINT NOT NULL,
                               RequestSectionVersionID BIGINT NOT NULL
                           )

INSERT INTO @RequestSectionVersion
(RequestSectionID,
 RequestSectionVersionID)
SELECT RSH.RequestSectionID,
       RSH.RequestSectionVersionID
FROM dbo.RequestSection_History RSH
         INNER JOIN @RequestSectionTableTypeID RS ON RSH.RequestSectionID = RS.ID AND RSH.IsLatestVersion = 1

DECLARE
    @RequestSectionLaneID TABLE
                          (
                              [RequestSectionLaneID] BIGINT NOT NULL,
                              [RequestSectionID]     BIGINT NOT NULL
                          )
INSERT INTO @RequestSectionLaneID
([RequestSectionLaneID],
 [RequestSectionID])
SELECT [RequestSectionLaneID], [RequestSectionID]
FROM dbo.RequestSectionLane
WHERE [RequestSectionLaneID] IN (SELECT ID FROM @RequestSectionLaneTableTypeID)

DECLARE
    @RequestSectionLaneHistory TABLE
                               (
                                   [VersionNum]                       INT             NOT NULL,
                                   [IsActive]                         BIT             NOT NULL,
                                   [IsInactiveViewable]               BIT             NOT NULL,
                                   [RequestSectionLaneVersionID]      BIGINT          NOT NULL,
                                   [RequestSectionLaneID]             BIGINT          NOT NULL,
                                   [RequestSectionVersionID]          BIGINT          NOT NULL,
                                   [LaneNumber]                       NVARCHAR(32)    NOT NULL,
                                   [IsPublished]                      BIT             NOT NULL,
                                   [IsEdited]                         BIT             NOT NULL,
                                   [IsDuplicate]                      BIT             NOT NULL,
                                   [IsBetween]                        BIT             NOT NULL,
                                   [IsLaneGroup]                      BIT             NOT NULL,
                                   [OriginProvinceVersionID]          BIGINT          NULL,
                                   [OriginProvinceCode]               NVARCHAR(2)     NULL,
                                   [OriginRegionVersionID]            BIGINT          NULL,
                                   [OriginRegionCode]                 NVARCHAR(4)     NULL,
                                   [OriginCountryVersionID]           BIGINT          NULL,
                                   [OriginCountryCode]                NVARCHAR(2)     NULL,
                                   [OriginTerminalVersionID]          BIGINT          NULL,
                                   [OriginTerminalCode]               NVARCHAR(3)     NULL,
                                   [OriginZoneVersionID]              BIGINT          NULL,
                                   [OriginZoneName]                   NVARCHAR(50)    NULL,
                                   [OriginBasingPointVersionID]       BIGINT          NULL,
                                   [OriginBasingPointName]            NVARCHAR(50)    NULL,
                                   [OriginServicePointVersionID]      BIGINT          NULL,
                                   [OriginServicePointName]           NVARCHAR(50)    NULL,
                                   [OriginPostalCodeVersionID]        BIGINT          NULL,
                                   [OriginPostalCodeName]             NVARCHAR(10)    NULL,
                                   [OriginPointTypeVersionID]         BIGINT          NOT NULL,
                                   [OriginPointTypeName]              NVARCHAR(50)    NOT NULL,
                                   [OriginCode]                       NVARCHAR(50)    NOT NULL,
                                   [DestinationProvinceVersionID]     BIGINT          NULL,
                                   [DestinationProvinceCode]          NVARCHAR(2)     NULL,
                                   [DestinationRegionVersionID]       BIGINT          NULL,
                                   [DestinationRegionCode]            NVARCHAR(4)     NULL,
                                   [DestinationCountryVersionID]      BIGINT          NULL,
                                   [DestinationCountryCode]           NVARCHAR(2)     NULL,
                                   [DestinationTerminalVersionID]     BIGINT          NULL,
                                   [DestinationTerminalCode]          NVARCHAR(3)     NULL,
                                   [DestinationZoneVersionID]         BIGINT          NULL,
                                   [DestinationZoneName]              NVARCHAR(50)    NULL,
                                   [DestinationBasingPointVersionID]  BIGINT          NULL,
                                   [DestinationBasingPointName]       NVARCHAR(50)    NULL,
                                   [DestinationServicePointVersionID] BIGINT          NULL,
                                   [DestinationServicePointName]      NVARCHAR(50)    NULL,
                                   [DestinationPostalCodeVersionID]   BIGINT          NULL,
                                   [DestinationPostalCodeName]        NVARCHAR(10)    NULL,
                                   [DestinationPointTypeVersionID]    BIGINT          NOT NULL,
                                   [DestinationPointTypeName]         NVARCHAR(50)    NOT NULL,
                                   [DestinationCode]                  NVARCHAR(50)    NOT NULL,
                                   [LaneHashCode]                     VARBINARY(8000) NOT NULL,
                                   [BasingPointHashCode]              VARBINARY(8000) NULL,
                                   [Cost]                             NVARCHAR(MAX)   NULL,
                                   [DoNotMeetCommitment]              BIT             NOT NULL,
                                   [Commitment]                       NVARCHAR(MAX)   NULL,
                                   [CustomerRate]                     NVARCHAR(MAX)   NOT NULL,
                                   [CustomerDiscount]                 NVARCHAR(MAX)   NOT NULL,
                                   [DrRate]                           NVARCHAR(MAX)   NOT NULL,
                                   [PartnerRate]                      NVARCHAR(MAX)   NOT NULL,
                                   [PartnerDiscount]                  NVARCHAR(MAX)   NOT NULL,
                                   [Profitability]                    NVARCHAR(MAX)   NOT NULL,
                                   [PickupCount]                      INT             NULL,
                                   [DeliveryCount]                    INT             NULL,
                                   [DockAdjustment]                   DECIMAL(19, 6)  NULL,
                                   [Margin]                           NVARCHAR(MAX)   NOT NULL,
                                   [Density]                          NVARCHAR(MAX)   NOT NULL,
                                   [PickupCost]                       NVARCHAR(MAX)   NOT NULL,
                                   [DeliveryCost]                     NVARCHAR(MAX)   NOT NULL,
                                   [AccessorialsValue]                NVARCHAR(MAX)   NOT NULL,
                                   [AccessorialsPercentage]           NVARCHAR(MAX)   NOT NULL,
								   [CostOverrideAccessorialsPercentage] NVARCHAR(MAX) NULL,
								   [CostOverrideAccessorialsValue]	  NVARCHAR(MAX)	  NULL,
								   [CostOverrideDeliveryCost]		  NVARCHAR(MAX)   NULL,
								   [CostOverrideDeliveryCount]		  INT			  NULL,
								   [CostOverrideDensity]			  NVARCHAR(MAX)   NULL,
								   [CostOverrideDockAdjustment]		  DECIMAL(19,6)   NULL,
								   [CostOverrideMargin]				  NVARCHAR(MAX)   NULL,
								   [CostOverridePickupCost]			  NVARCHAR(MAX)   NULL,
								   [CostOverridePickupCount]		  INT			  NULL,
								   [PricingRates]					  NVARCHAR(MAX)   NULL,
								   [WorkflowErrors]					  NVARCHAR(MAX)   NULL,
								   [IsExcluded]						  INT             NULL
                               )

INSERT INTO @RequestSectionLaneHistory
([VersionNum],
 [IsActive],
 [IsInactiveViewable],
 [RequestSectionLaneVersionID],
 [RequestSectionLaneID],
 [RequestSectionVersionID],
 [LaneNumber],
 [IsPublished],
 [IsEdited],
 [IsDuplicate],
 [IsBetween],
 [IsLaneGroup],
 [OriginProvinceVersionID],
 [OriginProvinceCode],
 [OriginRegionVersionID],
 [OriginRegionCode],
 [OriginCountryVersionID],
 [OriginCountryCode],
 [OriginTerminalVersionID],
 [OriginTerminalCode],
 [OriginZoneVersionID],
 [OriginZoneName],
 [OriginBasingPointVersionID],
 [OriginBasingPointName],
 [OriginServicePointVersionID],
 [OriginServicePointName],
 [OriginPostalCodeVersionID],
 [OriginPostalCodeName],
 [OriginPointTypeVersionID],
 [OriginPointTypeName],
 [OriginCode],
 [DestinationProvinceVersionID],
 [DestinationProvinceCode],
 [DestinationRegionVersionID],
 [DestinationRegionCode],
 [DestinationCountryVersionID],
 [DestinationCountryCode],
 [DestinationTerminalVersionID],
 [DestinationTerminalCode],
 [DestinationZoneVersionID],
 [DestinationZoneName],
 [DestinationBasingPointVersionID],
 [DestinationBasingPointName],
 [DestinationServicePointVersionID],
 [DestinationServicePointName],
 [DestinationPostalCodeVersionID],
 [DestinationPostalCodeName],
 [DestinationPointTypeVersionID],
 [DestinationPointTypeName],
 [DestinationCode],
 [LaneHashCode],
 [BasingPointHashCode],
 [Cost],
 [DoNotMeetCommitment],
 [Commitment],
 [CustomerRate],
 [CustomerDiscount],
 [DrRate],
 [PartnerRate],
 [PartnerDiscount],
 [Profitability],
 [PickupCount],
 [DeliveryCount],
 [DockAdjustment],
 [Margin],
 [Density],
 [PickupCost],
 [DeliveryCost],
 [AccessorialsValue],
 [AccessorialsPercentage],
 [CostOverrideAccessorialsPercentage],
 [CostOverrideAccessorialsValue],
 [CostOverrideDeliveryCost],
 [CostOverrideDeliveryCount],
 [CostOverrideDensity],
 [CostOverrideDockAdjustment],
 [CostOverrideMargin],
 [CostOverridePickupCost],
 [CostOverridePickupCount],
 [PricingRates],
 [WorkflowErrors],
 [IsExcluded])
SELECT [VersionNum],
       RSL.[IsActive],
       RSL.[IsInactiveViewable],
       [RequestSectionLaneVersionID],
       RSLH.[RequestSectionLaneID],
       [RequestSectionVersionID],
       RSL.[LaneNumber],
       RSL.[IsPublished],
       RSL.[IsEdited],
       RSL.[IsDuplicate],
       RSL.[IsBetween],
       RSL.[IsLaneGroup],
       [OriginProvinceVersionID],
       RSL.[OriginProvinceCode],
       [OriginRegionVersionID],
       RSL.[OriginRegionCode],
       [OriginCountryVersionID],
       RSL.[OriginCountryCode],
       [OriginTerminalVersionID],
       RSL.[OriginTerminalCode],
       [OriginZoneVersionID],
       RSL.[OriginZoneName],
       [OriginBasingPointVersionID],
       RSL.[OriginBasingPointName],
       [OriginServicePointVersionID],
       RSL.[OriginServicePointName],
       [OriginPostalCodeVersionID],
       RSL.[OriginPostalCodeName],
       [OriginPointTypeVersionID],
       RSL.[OriginPointTypeName],
       RSL.[OriginCode],
       [DestinationProvinceVersionID],
       RSL.[DestinationProvinceCode],
       [DestinationRegionVersionID],
       RSL.[DestinationRegionCode],
       [DestinationCountryVersionID],
       RSL.[DestinationCountryCode],
       [DestinationTerminalVersionID],
       RSL.[DestinationTerminalCode],
       [DestinationZoneVersionID],
       RSL.[DestinationZoneName],
       [DestinationBasingPointVersionID],
       RSL.[DestinationBasingPointName],
       [DestinationServicePointVersionID],
       RSL.[DestinationServicePointName],
       [DestinationPostalCodeVersionID],
       RSL.[DestinationPostalCodeName],
       [DestinationPointTypeVersionID],
       RSL.[DestinationPointTypeName],
       RSL.[DestinationCode],
       RSL.[LaneHashCode],
       RSL.[BasingPointHashCode],
       RSL.[Cost],
       RSL.[DoNotMeetCommitment],
       RSL.[Commitment],
       RSL.[CustomerRate],
       RSL.[CustomerDiscount],
       RSL.[DrRate],
       RSL.[PartnerRate],
       RSL.[PartnerDiscount],
       RSL.[Profitability],
       RSL.[PickupCount],
       RSL.[DeliveryCount],
       RSL.[DockAdjustment],
       RSL.[Margin],
       RSL.[Density],
       RSL.[PickupCost],
       RSL.[DeliveryCost],
       RSL.[AccessorialsValue],
       RSL.[AccessorialsPercentage],
	   RSL.[CostOverrideAccessorialsPercentage],
	   RSL.[CostOverrideAccessorialsValue],
	   RSL.[CostOverrideDeliveryCost],
	   RSL.[CostOverrideDeliveryCount],
	   RSL.[CostOverrideDensity],
	   RSL.[CostOverrideDockAdjustment],
	   RSL.[CostOverrideMargin],
	   RSL.[CostOverridePickupCost],
	   RSL.[CostOverridePickupCount],
	   RSL.[PricingRates],
	   RSL.[WorkflowErrors],
	   RSL.[IsExcluded]
FROM dbo.RequestSectionLane_History RSLH
         INNER JOIN dbo.RequestSectionLane RSL
                    ON RSLH.RequestSectionLaneID = RSL.RequestSectionLaneID AND RSLH.IsLatestVersion = 1
WHERE RSL.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM @RequestSectionLaneID)

UPDATE dbo.RequestSectionLane_History
SET IsLatestVersion = 0
WHERE dbo.RequestSectionLane_History.RequestSectionLaneVersionID IN
      (SELECT RequestSectionLaneVersionID FROM @RequestSectionLaneHistory)

SELECT @ERROR1 = @@ERROR

-- Insert INTO RequestSectionLane_History

INSERT INTO dbo.RequestSectionLane_History
([VersionNum],
 [IsLatestVersion],
 [UpdatedOn],
 [UpdatedBy],
 [Comments],
 [IsActive],
 [IsInactiveViewable],
 [RequestSectionLaneID],
 [RequestSectionVersionID],
 [LaneNumber],
 [IsPublished],
 [IsEdited],
 [IsDuplicate],
 [IsBetween],
 [IsLaneGroup],
 [OriginProvinceVersionID],
 [OriginProvinceCode],
 [OriginRegionVersionID],
 [OriginRegionCode],
 [OriginCountryVersionID],
 [OriginCountryCode],
 [OriginTerminalVersionID],
 [OriginTerminalCode],
 [OriginZoneVersionID],
 [OriginZoneName],
 [OriginBasingPointVersionID],
 [OriginBasingPointName],
 [OriginServicePointVersionID],
 [OriginServicePointName],
 [OriginPostalCodeVersionID],
 [OriginPostalCodeName],
 [OriginPointTypeVersionID],
 [OriginPointTypeName],
 [OriginCode],
 [DestinationProvinceVersionID],
 [DestinationProvinceCode],
 [DestinationRegionVersionID],
 [DestinationRegionCode],
 [DestinationCountryVersionID],
 [DestinationCountryCode],
 [DestinationTerminalVersionID],
 [DestinationTerminalCode],
 [DestinationZoneVersionID],
 [DestinationZoneName],
 [DestinationBasingPointVersionID],
 [DestinationBasingPointName],
 [DestinationServicePointVersionID],
 [DestinationServicePointName],
 [DestinationPostalCodeVersionID],
 [DestinationPostalCodeName],
 [DestinationPointTypeVersionID],
 [DestinationPointTypeName],
 [DestinationCode],
 [LaneHashCode],
 [BasingPointHashCode],
 [Cost],
 [DoNotMeetCommitment],
 [Commitment],
 [CustomerRate],
 [CustomerDiscount],
 [DrRate],
 [PartnerRate],
 [PartnerDiscount],
 [Profitability],
 [PickupCount],
 [DeliveryCount],
 [DockAdjustment],
 [Margin],
 [Density],
 [PickupCost],
 [DeliveryCost],
 [AccessorialsValue],
 [AccessorialsPercentage],
 [CostOverrideAccessorialsPercentage],
 [CostOverrideAccessorialsValue],
 [CostOverrideDeliveryCost],
 [CostOverrideDeliveryCount],
 [CostOverrideDensity],
 [CostOverrideDockAdjustment],
 [CostOverrideMargin],
 [CostOverridePickupCost],
 [CostOverridePickupCount],
 [PricingRates],
 [WorkflowErrors],
 [IsExcluded])
SELECT [VersionNum] + 1,
       1,
       GETUTCDATE(),
       @UpdatedBy,
       @Comments,
       [IsActive],
       [IsInactiveViewable],
       RSLH.[RequestSectionLaneID],
       RS.[RequestSectionVersionID],
       [LaneNumber],
       [IsPublished],
       [IsEdited],
       [IsDuplicate],
       [IsBetween],
       [IsLaneGroup],
       [OriginProvinceVersionID],
       [OriginProvinceCode],
       [OriginRegionVersionID],
       [OriginRegionCode],
       [OriginCountryVersionID],
       [OriginCountryCode],
       [OriginTerminalVersionID],
       [OriginTerminalCode],
       [OriginZoneVersionID],
       [OriginZoneName],
       [OriginBasingPointVersionID],
       [OriginBasingPointName],
       [OriginServicePointVersionID],
       [OriginServicePointName],
       [OriginPostalCodeVersionID],
       [OriginPostalCodeName],
       [OriginPointTypeVersionID],
       [OriginPointTypeName],
       [OriginCode],
       [DestinationProvinceVersionID],
       [DestinationProvinceCode],
       [DestinationRegionVersionID],
       [DestinationRegionCode],
       [DestinationCountryVersionID],
       [DestinationCountryCode],
       [DestinationTerminalVersionID],
       [DestinationTerminalCode],
       [DestinationZoneVersionID],
       [DestinationZoneName],
       [DestinationBasingPointVersionID],
       [DestinationBasingPointName],
       [DestinationServicePointVersionID],
       [DestinationServicePointName],
       [DestinationPostalCodeVersionID],
       [DestinationPostalCodeName],
       [DestinationPointTypeVersionID],
       [DestinationPointTypeName],
       [DestinationCode],
       [LaneHashCode],
       [BasingPointHashCode],
       [Cost],
       [DoNotMeetCommitment],
       [Commitment],
       [CustomerRate],
       [CustomerDiscount],
       [DrRate],
       [PartnerRate],
       [PartnerDiscount],
       [Profitability],
       [PickupCount],
       [DeliveryCount],
       [DockAdjustment],
       [Margin],
       [Density],
       [PickupCost],
       [DeliveryCost],
       [AccessorialsValue],
       [AccessorialsPercentage],
	   [CostOverrideAccessorialsPercentage],
	   [CostOverrideAccessorialsValue],
	   [CostOverrideDeliveryCost],
	   [CostOverrideDeliveryCount],
	   [CostOverrideDensity],
	   [CostOverrideDockAdjustment],
	   [CostOverrideMargin],
	   [CostOverridePickupCost],
	   [CostOverridePickupCount],
	   [PricingRates],
	   [WorkflowErrors],
	   [IsExcluded]
FROM @RequestSectionLaneHistory RSLH
         INNER JOIN @RequestSectionLaneID RSL ON RSLH.RequestSectionLaneID = RSL.RequestSectionLaneID
         INNER JOIN @RequestSectionVersion RS ON RSL.RequestSectionID = RS.RequestSectionID

DECLARE @RequestSectionLanePricingPointTableTypeID IDTableType;
INSERT INTO @RequestSectionLanePricingPointTableTypeID
(
    [ID]
)
SELECT RequestSectionLanePricingPointID
FROM dbo.RequestSectionLanePricingPoint
WHERE RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableTypeID)
    EXEC dbo.RequestSectionLanePricingPoint_History_Update @RequestSectionLanePricingPointTableTypeID, @UpdatedBy,
         @Comments

SELECT @ERROR2 = @@ERROR
    IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)
        BEGIN
            ROLLBACK TRAN
            RAISERROR ('Insert Procedure Failed!', 16, 1)
            RETURN 0
        END

    COMMIT TRAN
    RETURN 1
go

CREATE PROCEDURE [dbo].[RequestSectionLane_History_Update_Proxy]
AS
    SET NOCOUNT ON;

BEGIN
    DECLARE @RequestSectionLaneTableTypeID IDTableType;


    INSERT INTO @RequestSectionLaneTableTypeID
    (
        ID
    )
    SELECT [RequestSectionLaneID]
    FROM [RequestSectionLane]
    WHERE RequestSectionLaneID in (40515, 40516)


    DECLARE @Count INT;
    SELECT @Count = COUNT(*) FROM @RequestSectionLaneTableTypeID

    IF @Count > 0
        BEGIN
            EXEC dbo.RequestSectionLane_History_Update @RequestSectionLaneTableTypeID, 32, 'test3'
        END
END
go

CREATE
    PROCEDURE [dbo].[RequestSectionLane_Insert] @RequestSectionID BIGINT,
                                                @OriginGroupTypeID BIGINT,
                                                @OriginGroupID BIGINT,
                                                @OriginPointTypeID BIGINT,
                                                @OriginPointID BIGINT,
                                                @DestinationGroupTypeID BIGINT,
                                                @DestinationGroupID BIGINT,
                                                @DestinationPointTypeID BIGINT,
                                                @DestinationPointID BIGINT,
                                                @IsBetween BIT,
                                                @Cost nvarchar(max) = NULL,
                                                @UpdatedBy nvarchar(50) = NULL,
                                                @Comments nvarchar(4000) = NULL,
                                                @SaveHistory BIT = 1,
                                                @RateTable nvarchar(50) = NULL
AS

    SET NOCOUNT ON;

    IF @UpdatedBy IS NULL
        SELECT @UpdatedBy = 'P&C System';

    IF @Comments IS NULL
        SELECT @Comments = 'Created first version.';

    BEGIN TRAN

DECLARE @OriginPointTypeName NVARCHAR(50);
DECLARE @DestinationPointTypeName NVARCHAR(50);

SELECT @OriginPointTypeName = RequestSectionLanePointTypeName
FROM dbo.RequestSectionLanePointType
WHERE RequestSectionLanePointTypeID = @OriginPointTypeID;
SELECT @DestinationPointTypeName = RequestSectionLanePointTypeName
FROM dbo.RequestSectionLanePointType
WHERE RequestSectionLanePointTypeID = @DestinationPointTypeID;


DECLARE @Origin RequestSectionLanePointTableType;
DECLARE @Destination RequestSectionLanePointTableType;

DECLARE @DefaultCost NVARCHAR(MAX)
    SET @DefaultCost = (SELECT dbo.GetRequestSectionLaneDefaultCost(@RequestSectionID))

-- DECLARE @Cost NVARCHAR(MAX);
IF @Cost IS NUll SELECT @Cost = dbo.GetRequestSectionLaneDefaultCost(@RequestSectionID);

INSERT INTO @Origin
([ProvinceID],
 [ProvinceCode],
 [RegionID],
 [RegionCode],
 [CountryID],
 [CountryCode],
 [TerminalID],
 [TerminalCode],
 [ZoneID],
 [ZoneName],
 [BasingPointID],
 [BasingPointName],
 [ServicePointID],
 [ServicePointName],
 [PostalCodeID],
 [PostalCodeName],
 [PointCode])
SELECT [ProvinceID],
       [ProvinceCode],
       [RegionID],
       [RegionCode],
       [CountryID],
       [CountryCode],
       [TerminalID],
       [TerminalCode],
       [ZoneID],
       [ZoneName],
       [BasingPointID],
       [BasingPointName],
       [ServicePointID],
       [ServicePointName],
       [PostalCodeID],
       [PostalCodeName],
       [PointCode]
FROM dbo.GetRequestSectionLanePoints(@OriginGroupTypeID, @OriginGroupID, @OriginPointTypeID, @OriginPointID)

INSERT INTO @Destination
([ProvinceID],
 [ProvinceCode],
 [RegionID],
 [RegionCode],
 [CountryID],
 [CountryCode],
 [TerminalID],
 [TerminalCode],
 [ZoneID],
 [ZoneName],
 [BasingPointID],
 [BasingPointName],
 [ServicePointID],
 [ServicePointName],
 [PostalCodeID],
 [PostalCodeName],
 [PointCode])
SELECT [ProvinceID],
       [ProvinceCode],
       [RegionID],
       [RegionCode],
       [CountryID],
       [CountryCode],
       [TerminalID],
       [TerminalCode],
       [ZoneID],
       [ZoneName],
       [BasingPointID],
       [BasingPointName],
       [ServicePointID],
       [ServicePointName],
       [PostalCodeID],
       [PostalCodeName],
       [PointCode]
FROM dbo.GetRequestSectionLanePoints(@DestinationGroupTypeID, @DestinationGroupID, @DestinationPointTypeID,
                                     @DestinationPointID)

DECLARE @OriginCount INT, @DestinationCount INT;

SELECT @OriginCount = COUNT(*)
FROM @Origin
SELECT @DestinationCount = COUNT(*)
FROM @Destination
    IF @OriginCount > 0 AND @DestinationCount > 0
        BEGIN
            DECLARE @RequestSectionLaneTableType RequestSectionLaneTableType;

            INSERT INTO @RequestSectionLaneTableType
            ([IsActive],
             [IsInactiveViewable],
             [RequestSectionID],
             [LaneNumber],
             [IsPublished],
             [IsEdited],
             [IsDuplicate],
             [IsBetween],
             [IsLaneGroup],
             [OriginProvinceID],
             [OriginProvinceCode],
             [OriginRegionID],
             [OriginRegionCode],
             [OriginCountryID],
             [OriginCountryCode],
             [OriginTerminalID],
             [OriginTerminalCode],
             [OriginZoneID],
             [OriginZoneName],
             [OriginBasingPointID],
             [OriginBasingPointName],
             [OriginServicePointID],
             [OriginServicePointName],
             [OriginPostalCodeID],
             [OriginPostalCodeName],
             [OriginPointTypeID],
             [OriginPointTypeName],
             [OriginCode],
             [DestinationProvinceID],
             [DestinationProvinceCode],
             [DestinationRegionID],
             [DestinationRegionCode],
             [DestinationCountryID],
             [DestinationCountryCode],
             [DestinationTerminalID],
             [DestinationTerminalCode],
             [DestinationZoneID],
             [DestinationZoneName],
             [DestinationBasingPointID],
             [DestinationBasingPointName],
             [DestinationServicePointID],
             [DestinationServicePointName],
             [DestinationPostalCodeID],
             [DestinationPostalCodeName],
             [DestinationPointTypeID],
             [DestinationPointTypeName],
             [DestinationCode],
             [LaneHashCode],
             [BasingPointHashCode],
             [Cost],
             [DoNotMeetCommitment],
             [Commitment],
             [CustomerRate],
             [CustomerDiscount],
             [DrRate],
             [PartnerRate],
             [PartnerDiscount],
             [Profitability],
             [PickupCount],
             [DeliveryCount],
             [DockAdjustment],
             [Margin],
             [Density],
             [PickupCost],
             [DeliveryCost],
             [AccessorialsValue],
             [AccessorialsPercentage])
            SELECT 1,
                   1,
                   @RequestSectionID,
                   REPLACE(NEWID(), '-', ''),
                   0,
                   0,
                   0,
                   @IsBetween,
                   0,
                   O.[ProvinceID],
                   O.[ProvinceCode],
                   O.[RegionID],
                   O.[RegionCode],
                   O.[CountryID],
                   O.[CountryCode],
                   O.[TerminalID],
                   O.[TerminalCode],
                   O.[ZoneID],
                   O.[ZoneName],
                   O.[BasingPointID],
                   O.[BasingPointName],
                   O.[ServicePointID],
                   O.[ServicePointName],
                   O.[PostalCodeID],
                   O.[PostalCodeName],
                   @OriginPointTypeID,
                   @OriginPointTypeName,
                   O.[PointCode],
                   D.[ProvinceID],
                   D.[ProvinceCode],
                   D.[RegionID],
                   D.[RegionCode],
                   D.[CountryID],
                   D.[CountryCode],
                   D.[TerminalID],
                   D.[TerminalCode],
                   D.[ZoneID],
                   D.[ZoneName],
                   D.[BasingPointID],
                   D.[BasingPointName],
                   D.[ServicePointID],
                   D.[ServicePointName],
                   D.[PostalCodeID],
                   D.[PostalCodeName],
                   @DestinationPointTypeID,
                   @DestinationPointTypeName,
                   D.[PointCode],
                   (SELECT HASHBYTES('SHA2_512', (SELECT O.[ProvinceID]     AS OProvince,
                                                         D.[ProvinceID]     AS DProvince,
                                                         O.[RegionID]       AS ORegion,
                                                         D.[RegionID]       AS DRegion,
                                                         O.[CountryID]      AS OCountry,
                                                         D.[CountryID]      AS DCountry,
                                                         O.[TerminalID]     AS OTerminal,
                                                         D.[TerminalID]     AS DTerminal,
                                                         O.[ZoneID]         AS OZone,
                                                         D.[ZoneID]         AS DZone,
                                                         O.[BasingPointID]  AS OBasingPoint,
                                                         D.[BasingPointID]  AS DBasingPoint,
                                                         O.[ServicePointID] AS OServicePoint,
                                                         D.[ServicePointID] AS DServicePoint,
                                                         O.[PostalCodeID]   AS OPostalCode,
                                                         D.[PostalCodeID]   AS DPostalCode
                                                  FOR JSON PATH, WITHOUT_ARRAY_WRAPPER))) AS LaneHashCode,
                   CASE
                       WHEN O.[BasingPointID] IS NOT NULL AND D.[BasingPointID] IS NOT NULL THEN (SELECT HASHBYTES(
                                                                                                                 'SHA2_512',
                                                                                                                 (SELECT O.[BasingPointID] AS OBasingPoint,
                                                                                                                         D.[BasingPointID] AS DBasingPoint
                                                                                                                  FOR JSON PATH, WITHOUT_ARRAY_WRAPPER)))
                       ELSE NULL END                                                      AS BasingPointHashCode,
                   CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'cost' THEN @Cost ELSE @DefaultCost END,
                   0,
                   CASE
                       WHEN @RateTable IS NOT NULL AND @RateTable = 'commitment' THEN @Cost
                       ELSE @DefaultCost END,
                   CASE
                       WHEN @RateTable IS NOT NULL AND @RateTable = 'customer_rate' THEN @Cost
                       ELSE @DefaultCost END,
                   CASE
                       WHEN @RateTable IS NOT NULL AND @RateTable = 'customer_discount' THEN @Cost
                       ELSE @DefaultCost END,
                   CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'dr_rate' THEN @Cost ELSE @DefaultCost END,
                   CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'partner_rate' THEN @Cost ELSE @DefaultCost END,
                   CASE
                       WHEN @RateTable IS NOT NULL AND @RateTable = 'partner_discount' THEN @Cost
                       ELSE @DefaultCost END,
                   CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'profitability' THEN @Cost ELSE @DefaultCost END,
                   NULL,
                   NULL,
                   NULL,
                   @DefaultCost,
                   @DefaultCost,
                   @DefaultCost,
                   @DefaultCost,
                   @DefaultCost,
                   @DefaultCost
            FROM @Origin O,
                 @Destination D

            DECLARE @RequestLaneID BIGINT;
            SELECT @RequestLaneID = RequestLaneID
            FROM dbo.RequestSection
            WHERE RequestSectionID = @RequestSectionID

            EXEC dbo.RequestSectionLane_Insert_Bulk @RequestSectionLaneTableType, @RequestLaneID, NULL, NULL,
                 @SaveHistory

        END

    COMMIT TRAN
    RETURN 1
go

CREATE PROCEDURE [dbo].[RequestSectionLane_Insert_Bulk] @RequestSectionLaneTableType RequestSectionLaneTableType READONLY,
                                                        @RequestLaneID BIGINT,
                                                        @UpdatedBy nvarchar(50) = NULL,
                                                        @Comments nvarchar(4000) = NULL,
                                                        @SaveHistory BIT = 1
AS

    SET NOCOUNT ON;

    IF @UpdatedBy IS NULL
        SELECT @UpdatedBy = 'P&C System';

    IF @Comments IS NULL
        SELECT @Comments = 'Created first version.';

    BEGIN TRAN

-- Get Distinct RequestSections

DECLARE @DistinctRequestSectionID IDTableType;

INSERT INTO @DistinctRequestSectionID
(
    ID
)
SELECT DISTINCT [RequestSectionID]
FROM @RequestSectionLaneTableType

-- Get Union of RequestSectionLanes, mark the identical ones

DECLARE
    @AllRequestSectionLane TABLE
                           (
                               [RequestSectionID]    BIGINT          NOT NULL,
                               [LaneNumber]          NVARCHAR(32)    NOT NULL,
                               [LaneHashCode]        VARBINARY(8000) NOT NULL,
                               [BasingPointHashCode] VARBINARY(8000) NULL
                           )
INSERT INTO @AllRequestSectionLane
([RequestSectionID],
 [LaneNumber],
 [LaneHashCode],
 [BasingPointHashCode])
SELECT RSL.[RequestSectionID], RSL.[LaneNumber], RSL.[LaneHashCode], RSL.[BasingPointHashCode]
FROM dbo.RequestSectionLane RSL
         INNER JOIN @DistinctRequestSectionID RS ON RSL.[RequestSectionID] = RS.ID
UNION
SELECT [RequestSectionID], [LaneNumber], [LaneHashCode], [BasingPointHashCode]
FROM @RequestSectionLaneTableType

DECLARE
    @IdenticalLaneHashCode TABLE
                           (
                               [RequestSectionID] BIGINT          NOT NULL,
                               [LaneHashCode]     VARBINARY(8000) NOT NULL
                           )
INSERT INTO @IdenticalLaneHashCode
([RequestSectionID],
 [LaneHashCode])
SELECT [RequestSectionID], [LaneHashCode]
FROM @AllRequestSectionLane
GROUP BY [RequestSectionID], [LaneHashCode]
HAVING COUNT(*) > 1

DECLARE
    @IdenticalRequestSectionLane TABLE
                                 (
                                     [RequestSectionID] BIGINT       NOT NULL,
                                     [LaneNumber]       NVARCHAR(32) NOT NULL
                                 )
INSERT INTO @IdenticalRequestSectionLane
([RequestSectionID],
 [LaneNumber])
SELECT A.[RequestSectionID], A.[LaneNumber]
FROM @AllRequestSectionLane A
         INNER JOIN @IdenticalLaneHashCode B
                    ON A.[RequestSectionID] = B.[RequestSectionID] AND A.[LaneHashCode] = B.[LaneHashCode]

-- Get Union of Active RequestSectionLanes, mark the duplicate ones

DECLARE
    @AllActiveRequestSectionLane TABLE
                                 (
                                     [RequestSectionID]    BIGINT          NOT NULL,
                                     [LaneNumber]          NVARCHAR(32)    NOT NULL,
                                     [LaneHashCode]        VARBINARY(8000) NOT NULL,
                                     [BasingPointHashCode] VARBINARY(8000) NULL
                                 )
INSERT INTO @AllActiveRequestSectionLane
([RequestSectionID],
 [LaneNumber],
 [LaneHashCode],
 [BasingPointHashCode])
SELECT RSL.[RequestSectionID], RSL.[LaneNumber], RSL.[LaneHashCode], RSL.[BasingPointHashCode]
FROM dbo.RequestSectionLane RSL
         INNER JOIN @DistinctRequestSectionID RS ON RSL.[RequestSectionID] = RS.ID
WHERE (RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1)
   OR RSL.[LaneNumber] IN (SELECT [LaneNumber] FROM @IdenticalLaneHashCode)
UNION
SELECT [RequestSectionID], [LaneNumber], [LaneHashCode], [BasingPointHashCode]
FROM @RequestSectionLaneTableType
WHERE IsActive = 1
  AND [IsInactiveViewable] = 1
  AND [LaneNumber] NOT IN (SELECT [LaneNumber] FROM @IdenticalLaneHashCode)

DECLARE
    @DuplicateBasingPointHashCode TABLE
                                  (
                                      [RequestSectionID]    BIGINT          NOT NULL,
                                      [BasingPointHashCode] VARBINARY(8000) NOT NULL
                                  )
INSERT INTO @DuplicateBasingPointHashCode
([RequestSectionID],
 [BasingPointHashCode])
SELECT [RequestSectionID], [BasingPointHashCode]
FROM @AllActiveRequestSectionLane
WHERE [BasingPointHashCode] IS NOT NULL
GROUP BY [RequestSectionID], [BasingPointHashCode]
HAVING COUNT(*) > 1

DECLARE
    @DuplicateRequestSectionLane TABLE
                                 (
                                     [RequestSectionID] BIGINT       NOT NULL,
                                     [LaneNumber]       NVARCHAR(32) NOT NULL
                                 )
INSERT INTO @DuplicateRequestSectionLane
([RequestSectionID],
 [LaneNumber])
SELECT A.[RequestSectionID], A.[LaneNumber]
FROM @AllActiveRequestSectionLane A
         INNER JOIN @DuplicateBasingPointHashCode B
                    ON A.[RequestSectionID] = B.[RequestSectionID] AND A.[BasingPointHashCode] = B.[BasingPointHashCode]

DECLARE
    @ToBeUpDatedRequestSectionLane TABLE
                                   (
                                       [RequestSectionLaneID] BIGINT NOT NULL,
                                       [RequestSectionID]     BIGINT NOT NULL,
                                       [IsDuplicate]          BIT    NOT NULL,
                                       [IsActive]             BIT    NOT NULL,
                                       [IsInactiveViewable]   BIT    NOT NULL
                                   )
INSERT INTO @ToBeUpDatedRequestSectionLane
([RequestSectionLaneID],
 [RequestSectionID],
 [IsDuplicate],
 [IsActive],
 [IsInactiveViewable])
SELECT A.[RequestSectionLaneID],
       A.[RequestSectionID],
       1,
       1,
       1
FROM dbo.RequestSectionLane A
         INNER JOIN @DuplicateRequestSectionLane B
                    ON A.[RequestSectionID] = B.[RequestSectionID] AND A.[LaneNumber] = B.[LaneNumber]
UNION
SELECT A.[RequestSectionLaneID],
       A.[RequestSectionID],
       0,
       1,
       1
FROM dbo.RequestSectionLane A
         INNER JOIN @IdenticalRequestSectionLane B
                    ON A.[RequestSectionID] = B.[RequestSectionID] AND A.[LaneNumber] = B.[LaneNumber]
WHERE (A.[IsActive] = 0 OR A.[IsInactiveViewable] = 0)
  AND A.[LaneNumber] NOT IN (SELECT [LaneNumber] FROM @DuplicateRequestSectionLane)

-- Prepare VersionID

DECLARE
    @ProvinceVersionID table
                       (
                           [ProvinceID]        [bigint] NOT NULL,
                           [ProvinceVersionID] [bigint] NOT NULL
                       )
INSERT INTO @ProvinceVersionID
([ProvinceID],
 [ProvinceVersionID])
SELECT [ProvinceID],
       [ProvinceVersionID]
FROM [dbo].[Province_History]
WHERE [IsLatestVersion] = 1
  AND [ProvinceID] IN
      (SELECT DISTINCT ProvinceID
       FROM (SELECT [OriginProvinceID] AS ProvinceID
             FROM @RequestSectionLaneTableType
             WHERE [OriginProvinceID] IS NOT NULL
             UNION
             SELECT [DestinationProvinceID] AS ProvinceID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationProvinceID] IS NOT NULL) AS A)

DECLARE
    @CountryVersionID table
                      (
                          [CountryID]        [bigint] NOT NULL,
                          [CountryVersionID] [bigint] NOT NULL
                      )
INSERT INTO @CountryVersionID
([CountryID],
 [CountryVersionID])
SELECT [CountryID],
       [CountryVersionID]
FROM [dbo].[Country_History]
WHERE [IsLatestVersion] = 1
  AND [CountryID] IN
      (SELECT DISTINCT CountryID
       FROM (SELECT [OriginCountryID] AS CountryID
             FROM @RequestSectionLaneTableType
             WHERE [OriginCountryID] IS NOT NULL
             UNION
             SELECT [DestinationCountryID] AS CountryID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationCountryID] IS NOT NULL) AS A)

DECLARE
    @RegionVersionID table
                     (
                         [RegionID]        [bigint] NOT NULL,
                         [RegionVersionID] [bigint] NOT NULL
                     )
INSERT INTO @RegionVersionID
([RegionID],
 [RegionVersionID])
SELECT [RegionID],
       [RegionVersionID]
FROM [dbo].[Region_History]
WHERE [IsLatestVersion] = 1
  AND [RegionID] IN
      (SELECT DISTINCT RegionID
       FROM (SELECT [OriginRegionID] AS RegionID
             FROM @RequestSectionLaneTableType
             WHERE [OriginRegionID] IS NOT NULL
             UNION
             SELECT [DestinationRegionID] AS RegionID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationRegionID] IS NOT NULL) AS A)

DECLARE
    @ZoneVersionID table
                   (
                       [ZoneID]        [bigint] NOT NULL,
                       [ZoneVersionID] [bigint] NOT NULL
                   )
INSERT INTO @ZoneVersionID
([ZoneID],
 [ZoneVersionID])
SELECT [ZoneID],
       [ZoneVersionID]
FROM [dbo].[Zone_History]
WHERE [IsLatestVersion] = 1
  AND [ZoneID] IN
      (SELECT DISTINCT ZoneID
       FROM (SELECT [OriginZoneID] AS ZoneID
             FROM @RequestSectionLaneTableType
             WHERE [OriginZoneID] IS NOT NULL
             UNION
             SELECT [DestinationZoneID] AS ZoneID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationZoneID] IS NOT NULL) AS A)

DECLARE
    @ServicePointVersionID table
                           (
                               [ServicePointID]        [bigint] NOT NULL,
                               [ServicePointVersionID] [bigint] NOT NULL
                           )
INSERT INTO @ServicePointVersionID
([ServicePointID],
 [ServicePointVersionID])
SELECT [ServicePointID],
       [ServicePointVersionID]
FROM [dbo].[ServicePoint_History]
WHERE [IsLatestVersion] = 1
  AND [ServicePointID] IN
      (SELECT DISTINCT ServicePointID
       FROM (SELECT [OriginServicePointID] AS ServicePointID
             FROM @RequestSectionLaneTableType
             WHERE [OriginServicePointID] IS NOT NULL
             UNION
             SELECT [DestinationServicePointID] AS ServicePointID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationServicePointID] IS NOT NULL) AS A)

DECLARE
    @PostalCodeVersionID table
                         (
                             [PostalCodeID]        [bigint] NOT NULL,
                             [PostalCodeVersionID] [bigint] NOT NULL
                         )
INSERT INTO @PostalCodeVersionID
([PostalCodeID],
 [PostalCodeVersionID])
SELECT [PostalCodeID],
       [PostalCodeVersionID]
FROM [dbo].[PostalCode_History]
WHERE [IsLatestVersion] = 1
  AND [PostalCodeID] IN
      (SELECT DISTINCT PostalCodeID
       FROM (SELECT [OriginPostalCodeID] AS PostalCodeID
             FROM @RequestSectionLaneTableType
             WHERE [OriginPostalCodeID] IS NOT NULL
             UNION
             SELECT [DestinationPostalCodeID] AS PostalCodeID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationPostalCodeID] IS NOT NULL) AS A)

DECLARE
    @TerminalVersionID table
                       (
                           [TerminalID]        [bigint] NOT NULL,
                           [TerminalVersionID] [bigint] NOT NULL
                       )
INSERT INTO @TerminalVersionID
([TerminalID],
 [TerminalVersionID])
SELECT [TerminalID],
       [TerminalVersionID]
FROM [dbo].[Terminal_History]
WHERE [IsLatestVersion] = 1
  AND [TerminalID] IN
      (SELECT DISTINCT TerminalID
       FROM (SELECT [OriginTerminalID] AS TerminalID
             FROM @RequestSectionLaneTableType
             WHERE [OriginTerminalID] IS NOT NULL
             UNION
             SELECT [DestinationTerminalID] AS TerminalID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationTerminalID] IS NOT NULL) AS A)

DECLARE
    @BasingPointVersionID table
                          (
                              [BasingPointID]        [bigint] NOT NULL,
                              [BasingPointVersionID] [bigint] NOT NULL
                          )
INSERT INTO @BasingPointVersionID
([BasingPointID],
 [BasingPointVersionID])
SELECT [BasingPointID],
       [BasingPointVersionID]
FROM [dbo].[BasingPoint_History]
WHERE [IsLatestVersion] = 1
  AND [BasingPointID] IN
      (SELECT DISTINCT BasingPointID
       FROM (SELECT [OriginBasingPointID] AS BasingPointID
             FROM @RequestSectionLaneTableType
             WHERE [OriginBasingPointID] IS NOT NULL
             UNION
             SELECT [DestinationBasingPointID] AS BasingPointID
             FROM @RequestSectionLaneTableType
             WHERE [DestinationBasingPointID] IS NOT NULL) AS A)

DECLARE
    @PointTypeVersionID table
                        (
                            [PointTypeID]        [bigint] NOT NULL,
                            [PointTypeVersionID] [bigint] NOT NULL
                        )
INSERT INTO @PointTypeVersionID
([PointTypeID],
 [PointTypeVersionID])
SELECT [RequestSectionLanePointTypeID],
       [RequestSectionLanePointTypeVersionID]
FROM [dbo].[RequestSectionLanePointType_History]
WHERE [IsLatestVersion] = 1
  AND [RequestSectionLanePointTypeID] IN
      (SELECT DISTINCT PointTypeID
       FROM (SELECT [OriginPointTypeID] AS PointTypeID
             FROM @RequestSectionLaneTableType
             UNION
             SELECT [DestinationPointTypeID] AS PointTypeID
             FROM @RequestSectionLaneTableType) AS A)

-- Insert new RequestSectionLane

DECLARE @NewRequestSectionLaneTableType RequestSectionLaneTableType

INSERT INTO dbo.RequestSectionLane
([IsActive],
 [IsInactiveViewable],
 [RequestSectionID],
 [LaneNumber],
 [IsPublished],
 [IsEdited],
 [IsDuplicate],
 [IsBetween],
 [IsLaneGroup],
 [OriginProvinceID],
 [OriginProvinceCode],
 [OriginRegionID],
 [OriginRegionCode],
 [OriginCountryID],
 [OriginCountryCode],
 [OriginTerminalID],
 [OriginTerminalCode],
 [OriginZoneID],
 [OriginZoneName],
 [OriginBasingPointID],
 [OriginBasingPointName],
 [OriginServicePointID],
 [OriginServicePointName],
 [OriginPostalCodeID],
 [OriginPostalCodeName],
 [OriginPointTypeID],
 [OriginPointTypeName],
 [OriginCode],
 [DestinationProvinceID],
 [DestinationProvinceCode],
 [DestinationRegionID],
 [DestinationRegionCode],
 [DestinationCountryID],
 [DestinationCountryCode],
 [DestinationTerminalID],
 [DestinationTerminalCode],
 [DestinationZoneID],
 [DestinationZoneName],
 [DestinationBasingPointID],
 [DestinationBasingPointName],
 [DestinationServicePointID],
 [DestinationServicePointName],
 [DestinationPostalCodeID],
 [DestinationPostalCodeName],
 [DestinationPointTypeID],
 [DestinationPointTypeName],
 [DestinationCode],
 [LaneHashCode],
 [BasingPointHashCode],
 [Cost],
 [DoNotMeetCommitment],
 [Commitment],
 [CustomerRate],
 [CustomerDiscount],
 [DrRate],
 [PartnerRate],
 [PartnerDiscount],
 [Profitability],
 [PickupCount],
 [DeliveryCount],
 [DockAdjustment],
 [Margin],
 [Density],
 [PickupCost],
 [DeliveryCost],
 [AccessorialsValue],
 [AccessorialsPercentage])
OUTPUT INSERTED.[RequestSectionLaneID], INSERTED.[IsActive], INSERTED.[IsInactiveViewable], INSERTED.[RequestSectionID], INSERTED.[LaneNumber], INSERTED.[IsPublished], INSERTED.[IsEdited], INSERTED.[IsDuplicate], INSERTED.[IsBetween], INSERTED.[IsLaneGroup], INSERTED.[OriginProvinceID], INSERTED.[OriginProvinceCode], INSERTED.[OriginRegionID], INSERTED.[OriginRegionCode], INSERTED.[OriginCountryID], INSERTED.[OriginCountryCode], INSERTED.[OriginTerminalID], INSERTED.[OriginTerminalCode], INSERTED.[OriginZoneID], INSERTED.[OriginZoneName], INSERTED.[OriginBasingPointID], INSERTED.[OriginBasingPointName], INSERTED.[OriginServicePointID], INSERTED.[OriginServicePointName], INSERTED.[OriginPostalCodeID], INSERTED.[OriginPostalCodeName], INSERTED.[OriginPointTypeID], INSERTED.[OriginPointTypeName], INSERTED.[OriginCode], INSERTED.[DestinationProvinceID], INSERTED.[DestinationProvinceCode], INSERTED.[DestinationRegionID], INSERTED.[DestinationRegionCode], INSERTED.[DestinationCountryID], INSERTED.[DestinationCountryCode], INSERTED.[DestinationTerminalID], INSERTED.[DestinationTerminalCode], INSERTED.[DestinationZoneID], INSERTED.[DestinationZoneName], INSERTED.[DestinationBasingPointID], INSERTED.[DestinationBasingPointName], INSERTED.[DestinationServicePointID], INSERTED.[DestinationServicePointName], INSERTED.[DestinationPostalCodeID], INSERTED.[DestinationPostalCodeName], INSERTED.[DestinationPointTypeID], INSERTED.[DestinationPointTypeName], INSERTED.[DestinationCode], INSERTED.[LaneHashCode], INSERTED.[BasingPointHashCode], INSERTED.[Cost], INSERTED.[DoNotMeetCommitment], INSERTED.[Commitment], INSERTED.[CustomerRate], INSERTED.[CustomerDiscount], INSERTED.[DrRate], INSERTED.[PartnerRate], INSERTED.[PartnerDiscount], INSERTED.[Profitability], INSERTED.[PickupCount], INSERTED.[DeliveryCount], INSERTED.[DockAdjustment], INSERTED.[Margin], INSERTED.[Density], INSERTED.[PickupCost], INSERTED.[DeliveryCost], INSERTED.[AccessorialsValue], INSERTED.[AccessorialsPercentage] INTO @NewRequestSectionLaneTableType
    (
     [NewRequestSectionLaneID],
     [IsActive],
     [IsInactiveViewable],
     [RequestSectionID],
     [LaneNumber],
     [IsPublished],
     [IsEdited],
     [IsDuplicate],
     [IsBetween],
     [IsLaneGroup],
     [OriginProvinceID],
     [OriginProvinceCode],
     [OriginRegionID],
     [OriginRegionCode],
     [OriginCountryID],
     [OriginCountryCode],
     [OriginTerminalID],
     [OriginTerminalCode],
     [OriginZoneID],
     [OriginZoneName],
     [OriginBasingPointID],
     [OriginBasingPointName],
     [OriginServicePointID],
     [OriginServicePointName],
     [OriginPostalCodeID],
     [OriginPostalCodeName],
     [OriginPointTypeID],
     [OriginPointTypeName],
     [OriginCode],
     [DestinationProvinceID],
     [DestinationProvinceCode],
     [DestinationRegionID],
     [DestinationRegionCode],
     [DestinationCountryID],
     [DestinationCountryCode],
     [DestinationTerminalID],
     [DestinationTerminalCode],
     [DestinationZoneID],
     [DestinationZoneName],
     [DestinationBasingPointID],
     [DestinationBasingPointName],
     [DestinationServicePointID],
     [DestinationServicePointName],
     [DestinationPostalCodeID],
     [DestinationPostalCodeName],
     [DestinationPointTypeID],
     [DestinationPointTypeName],
     [DestinationCode],
     [LaneHashCode],
     [BasingPointHashCode],
     [Cost],
     [DoNotMeetCommitment],
     [Commitment],
     [CustomerRate],
     [CustomerDiscount],
     [DrRate],
     [PartnerRate],
     [PartnerDiscount],
     [Profitability],
     [PickupCount],
     [DeliveryCount],
     [DockAdjustment],
     [Margin],
     [Density],
     [PickupCost],
     [DeliveryCost],
     [AccessorialsValue],
     [AccessorialsPercentage]
        )
SELECT [IsActive],
       [IsInactiveViewable],
       A.[RequestSectionID],
       A.[LaneNumber],
       [IsPublished],
       [IsEdited],
       CASE WHEN B.[LaneNumber] IS NOT NULL THEN 1 ELSE 0 END,
       [IsBetween],
       [IsLaneGroup],
       [OriginProvinceID],
       [OriginProvinceCode],
       [OriginRegionID],
       [OriginRegionCode],
       [OriginCountryID],
       [OriginCountryCode],
       [OriginTerminalID],
       [OriginTerminalCode],
       [OriginZoneID],
       [OriginZoneName],
       [OriginBasingPointID],
       [OriginBasingPointName],
       [OriginServicePointID],
       [OriginServicePointName],
       [OriginPostalCodeID],
       [OriginPostalCodeName],
       [OriginPointTypeID],
       [OriginPointTypeName],
       [OriginCode],
       [DestinationProvinceID],
       [DestinationProvinceCode],
       [DestinationRegionID],
       [DestinationRegionCode],
       [DestinationCountryID],
       [DestinationCountryCode],
       [DestinationTerminalID],
       [DestinationTerminalCode],
       [DestinationZoneID],
       [DestinationZoneName],
       [DestinationBasingPointID],
       [DestinationBasingPointName],
       [DestinationServicePointID],
       [DestinationServicePointName],
       [DestinationPostalCodeID],
       [DestinationPostalCodeName],
       [DestinationPointTypeID],
       [DestinationPointTypeName],
       [DestinationCode],
       [LaneHashCode],
       [BasingPointHashCode],
       [Cost],
       [DoNotMeetCommitment],
       [Commitment],
       [CustomerRate],
       [CustomerDiscount],
       [DrRate],
       [PartnerRate],
       [PartnerDiscount],
       [Profitability],
       [PickupCount],
       [DeliveryCount],
       [DockAdjustment],
       [Margin],
       [Density],
       [PickupCost],
       [DeliveryCost],
       [AccessorialsValue],
       [AccessorialsPercentage]
FROM @RequestSectionLaneTableType A
         LEFT JOIN @DuplicateRequestSectionLane B
                   ON A.RequestSectionID = B.RequestSectionID AND A.[LaneNumber] = B.[LaneNumber]
WHERE A.[LaneNumber] NOT IN (SELECT [LaneNumber] FROM @IdenticalRequestSectionLane)

-- Update IsDuplicate/IsActive for existing lanes

UPDATE dbo.RequestSectionLane
SET [IsDuplicate]        = A.[IsDuplicate],
    [IsActive]           = A.[IsActive],
    [IsInactiveViewable] = A.[IsInactiveViewable],
    [Cost]               = dbo.GetRequestSectionLaneDefaultCost(A.[RequestSectionID])
FROM @ToBeUpDatedRequestSectionLane A
WHERE dbo.RequestSectionLane.[RequestSectionLaneID] = A.[RequestSectionLaneID]

-- Check If there was a change

DECLARE @InsertedCount BIGINT, @UpdatedCount BIGINT;

SELECT @InsertedCount = COUNT(*)
FROM @NewRequestSectionLaneTableType
SELECT @UpdatedCount = COUNT(*)
FROM @ToBeUpDatedRequestSectionLane
    IF (@InsertedCount IS NULL OR @InsertedCount < 1) AND (@UpdatedCount IS NULL OR @UpdatedCount < 1)
        BEGIN

            SELECT CAST(
                           (SELECT *
                            FROM (
                                     SELECT (SELECT *
                                             FROM @RequestSectionLaneTableType
                                             WHERE [LaneNumber] IN (SELECT [LaneNumber] FROM @IdenticalRequestSectionLane)
                                             FOR JSON AUTO) AS identical_lanes_not_added,
                                            (SELECT *
                                             FROM @RequestSectionLaneTableType
                                             WHERE [LaneNumber] IN (SELECT [LaneNumber] FROM @DuplicateRequestSectionLane)
                                             FOR JSON AUTO) AS duplicate_lanes_added
                                 ) AS Q
                            FOR JSON AUTO, WITHOUT_ARRAY_WRAPPER)
                       AS VARCHAR(MAX))

            COMMIT TRAN
            RETURN 1
        END

-- Update RequestSection

DECLARE
    @RequestSectionStatistics TABLE
                              (
                                  [RequestSectionID]            BIGINT NOT NULL,
                                  [NumLanes]                    INT    NOT NULL,
                                  [NumUnpublishedLanes]         INT    NOT NULL,
                                  [NumEditedLanes]              INT    NOT NULL,
                                  [NumDuplicateLanes]           INT    NOT NULL,
                                  [NumDoNotMeetCommitmentLanes] INT    NOT NULL
                              )
INSERT INTO @RequestSectionStatistics
([RequestSectionID],
 [NumLanes],
 [NumUnpublishedLanes],
 [NumEditedLanes],
 [NumDuplicateLanes],
 [NumDoNotMeetCommitmentLanes])
SELECT RSL.[RequestSectionID],
       ISNULL(SUM(CASE WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 THEN 1 ELSE 0 END), 0),
       ISNULL(SUM(CASE
                      WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.IsPublished = 0 THEN 1
                      ELSE 0 END), 0),
       ISNULL(SUM(CASE WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.IsEdited = 1 THEN 1 ELSE 0 END),
              0),
       ISNULL(SUM(CASE
                      WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.IsDuplicate = 1 THEN 1
                      ELSE 0 END), 0),
       ISNULL(SUM(CASE
                      WHEN RSL.IsActive = 1 AND RSL.[IsInactiveViewable] = 1 AND RSL.[DoNotMeetCommitment] = 1 THEN 1
                      ELSE 0 END), 0)
FROM dbo.RequestSectionLane RSL
         INNER JOIN @DistinctRequestSectionID RS ON RSL.[RequestSectionID] = RS.ID
GROUP BY RSL.[RequestSectionID]

UPDATE dbo.RequestSection
SET [NumLanes]                    = A.[NumLanes],
    [NumUnpublishedLanes]         = A.[NumUnpublishedLanes],
    [NumEditedLanes]              = A.[NumEditedLanes],
    [NumDuplicateLanes]           = A.[NumDuplicateLanes],
    [NumDoNotMeetCommitmentLanes] = A.[NumDoNotMeetCommitmentLanes]
FROM @RequestSectionStatistics A
WHERE dbo.RequestSection.[RequestSectionID] = A.[RequestSectionID]

-- Update RequestLane

DECLARE
    @RequestLaneStatistics TABLE
                           (
                               [RequestLaneID]               BIGINT NOT NULL,
                               [NumLanes]                    INT    NOT NULL,
                               [NumUnpublishedLanes]         INT    NOT NULL,
                               [NumEditedLanes]              INT    NOT NULL,
                               [NumDuplicateLanes]           INT    NOT NULL,
                               [NumSections]                 INT    NOT NULL,
                               [NumDoNotMeetCommitmentLanes] INT    NOT NULL
                           )
INSERT INTO @RequestLaneStatistics
([RequestLaneID],
 [NumLanes],
 [NumUnpublishedLanes],
 [NumEditedLanes],
 [NumDuplicateLanes],
 [NumSections],
 [NumDoNotMeetCommitmentLanes])
SELECT RS.[RequestLaneID],
       ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumLanes] ELSE 0 END), 0),
       ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumUnPublishedLanes] ELSE 0 END), 0),
       ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumEditedLanes] ELSE 0 END), 0),
       ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumDuplicateLanes] ELSE 0 END), 0),
       ISNULL(SUM(CASE WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN 1 ELSE 0 END), 0),
       ISNULL(SUM(CASE
                      WHEN RS.IsActive = 1 AND RS.[IsInactiveViewable] = 1 THEN [NumDoNotMeetCommitmentLanes]
                      ELSE 0 END), 0)
FROM dbo.RequestSection RS
WHERE RS.[RequestLaneID] = @RequestLaneID
GROUP BY RS.[RequestLaneID]

UPDATE dbo.RequestLane
SET [NumLanes]                    = A.[NumLanes],
    [NumUnpublishedLanes]         = A.[NumUnpublishedLanes],
    [NumEditedLanes]              = A.[NumEditedLanes],
    [NumDuplicateLanes]           = A.[NumDuplicateLanes],
    [NumDoNotMeetCommitmentLanes] = A.[NumDoNotMeetCommitmentLanes]
FROM @RequestLaneStatistics A
WHERE dbo.RequestLane.[RequestLaneID] = A.[RequestLaneID]

-- INSERT RequestLane_History
    IF @SaveHistory = 1
        BEGIN
            DECLARE @RequestLaneHistory TABLE
                                        (
                                            [VersionNum]                  INT          NOT NULL,
                                            [IsActive]                    BIT          NOT NULL,
                                            [IsInactiveViewable]          BIT          NOT NULL,
                                            [RequestLaneVersionID]        BIGINT       NOT NULL,
                                            [RequestNumber]               NVARCHAR(32) NOT NULL,
                                            [NumSections]                 INT          NOT NULL,
                                            [NumLanes]                    INT          NOT NULL,
                                            [NumUnpublishedLanes]         INT          NOT NULL,
                                            [NumDuplicateLanes]           INT          NOT NULL,
                                            [NumEditedLanes]              INT          NOT NULL,
                                            [NumDoNotMeetCommitmentLanes] INT          NOT NULL,
                                            [IsValidData]                 BIT          NOT NULL,
                                            [RequestLaneID]               BIGINT       NOT NULL
                                        )

            INSERT INTO @RequestLaneHistory
            ([VersionNum],
             [IsActive],
             [IsInactiveViewable],
             [RequestLaneVersionID],
             [RequestNumber],
             [NumSections],
             [NumLanes],
             [NumUnpublishedLanes],
             [NumDuplicateLanes],
             [NumEditedLanes],
             [NumDoNotMeetCommitmentLanes],
             [IsValidData],
             [RequestLaneID])
            SELECT RLH.[VersionNum],
                   RLH.[IsActive],
                   RLH.[IsInactiveViewable],
                   RLH.[RequestLaneVersionID],
                   RLH.[RequestNumber],
                   RLH.[NumSections],
                   RL.[NumLanes],
                   RL.[NumUnpublishedLanes],
                   RL.[NumDuplicateLanes],
                   RL.[NumEditedLanes],
                   RL.[NumDoNotMeetCommitmentLanes],
                   RLH.[IsValidData],
                   RLH.[RequestLaneID]
            FROM dbo.RequestLane_History RLH
                     INNER JOIN dbo.RequestLane RL ON RLH.[RequestLaneID] = RL.[RequestLaneID]
            WHERE RLH.[RequestLaneID] = @RequestLaneID
              AND RLH.IsLatestVersion = 1

            UPDATE dbo.RequestLane_History
            SET IsLatestVersion = 0
            WHERE dbo.RequestLane_History.RequestLaneVersionID IN (SELECT RequestLaneVersionID FROM @RequestLaneHistory)

            INSERT INTO dbo.RequestLane_History
            ([VersionNum],
             [IsActive],
             [IsInactiveViewable],
             [RequestNumber],
             [NumSections],
             [NumLanes],
             [NumUnpublishedLanes],
             [NumEditedLanes],
             [NumDoNotMeetCommitmentLanes],
             [NumDuplicateLanes],
             [IsValidData],
             [RequestLaneID],
             UpdatedOn,
             UpdatedBy,
             Comments,
             IsLatestVersion)
            SELECT [VersionNum] + 1,
                   [IsActive],
                   [IsInactiveViewable],
                   [RequestNumber],
                   [NumSections],
                   [NumLanes],
                   [NumUnpublishedLanes],
                   [NumEditedLanes],
                   [NumDoNotMeetCommitmentLanes],
                   [NumDuplicateLanes],
                   [IsValidData],
                   [RequestLaneID],
                   GETUTCDATE(),
                   @UpdatedBy,
                   @Comments,
                   1
            FROM @RequestLaneHistory

-- INSERT RequestSection_History

            DECLARE @RequestLaneVersionID BIGINT;

            SELECT @RequestLaneVersionID = RequestLaneVersionID
            FROM dbo.RequestLane_History
            WHERE RequestLaneID = @RequestLaneID
              AND IsLatestVersion = 1;

            DECLARE @RequestSectionHistory TABLE
                                           (
                                               [VersionNum]                  INT            NOT NULL,
                                               [IsActive]                    BIT            NOT NULL,
                                               [IsInactiveViewable]          BIT            NOT NULL,
                                               [RequestSectionVersionID]     BIGINT         NOT NULL,
                                               [RequestSectionID]            BIGINT         NOT NULL,
                                               [RequestLaneVersionID]        BIGINT         NOT NULL,
                                               [SectionNumber]               NVARCHAR(50)   NOT NULL,
                                               [SectionName]                 NVARCHAR(50)   NOT NULL,
                                               [SubServiceLevelVersionID]    BIGINT         NOT NULL,
                                               [WeightBreak]                 NVARCHAR(MAX)  NOT NULL,
                                               [WeightBreakHeaderVersionID]  BIGINT         NOT NULL,
                                               [IsDensityPricing]            [BIT]          NOT NULL,
                                               [OverrideDensity]             DECIMAL(19, 6) NULL,
                                               [RateBaseVersionID]           BIGINT         NULL,
                                               [OverrideClassVersionID]      BIGINT         NULL,
                                               [EquipmentTypeVersionID]      BIGINT         NULL,
                                               [Commodity]                   NVARCHAR(100)  NULL,
                                               [NumLanes]                    INT            NOT NULL,
                                               [NumUnpublishedLanes]         INT            NOT NULL,
                                               [NumEditedLanes]              INT            NOT NULL,
                                               [NumDuplicateLanes]           INT            NOT NULL,
                                               [NumDoNotMeetCommitmentLanes] INT            NOT NULL
                                           )

            INSERT INTO @RequestSectionHistory
            ([VersionNum],
             [IsActive],
             [IsInactiveViewable],
             [RequestSectionVersionID],
             [RequestSectionID],
             [RequestLaneVersionID],
             [SectionNumber],
             [SectionName],
             [SubServiceLevelVersionID],
             [WeightBreak],
             [WeightBreakHeaderVersionID],
             [IsDensityPricing],
             [OverrideDensity],
             [RateBaseVersionID],
             [OverrideClassVersionID],
             [EquipmentTypeVersionID],
             [Commodity],
             [NumLanes],
             [NumUnpublishedLanes],
             [NumEditedLanes],
             [NumDuplicateLanes],
             [NumDoNotMeetCommitmentLanes])
            SELECT RSH.[VersionNum],
                   RSH.[IsActive],
                   RSH.[IsInactiveViewable],
                   RSH.[RequestSectionVersionID],
                   RSH.[RequestSectionID],
                   @RequestLaneVersionID,
                   RSH.[SectionNumber],
                   RSH.[SectionName],
                   RSH.[SubServiceLevelVersionID],
                   RSH.[WeightBreak],
                   RSH.[WeightBreakHeaderVersionID],
                   RSH.[IsDensityPricing],
                   RSH.[OverrideDensity],
                   RSH.[RateBaseVersionID],
                   RSH.[OverrideClassVersionID],
                   RSH.[EquipmentTypeVersionID],
                   RSH.[Commodity],
                   RS.[NumLanes],
                   RS.[NumUnpublishedLanes],
                   RS.[NumEditedLanes],
                   RS.[NumDuplicateLanes],
                   RS.[NumDoNotMeetCommitmentLanes]
            FROM dbo.RequestSection_History RSH
                     INNER JOIN dbo.RequestSection RS
                                ON RSH.[RequestSectionID] = RS.[RequestSectionID] AND RSH.IsLatestVersion = 1
                     INNER JOIN @DistinctRequestSectionID A ON RSH.[RequestSectionID] = A.ID

            UPDATE dbo.RequestSection_History
            SET IsLatestVersion = 0
            WHERE dbo.RequestSection_History.RequestSectionVersionID IN
                  (SELECT RequestSectionVersionID FROM @RequestSectionHistory)

            DECLARE @RequestSectionVersion TABLE
                                           (
                                               [RequestSectionID]        BIGINT NOT NULL,
                                               [RequestSectionVersionID] BIGINT NOT NULL
                                           )

            INSERT INTO dbo.RequestSection_History
            ([VersionNum],
             [IsActive],
             [IsInactiveViewable],
             [RequestSectionID],
             [RequestLaneVersionID],
             [SectionNumber],
             [SectionName],
             [SubServiceLevelVersionID],
             [WeightBreak],
             [WeightBreakHeaderVersionID],
             [IsDensityPricing],
             [OverrideDensity],
             [RateBaseVersionID],
             [OverrideClassVersionID],
             [EquipmentTypeVersionID],
             [Commodity],
             [NumLanes],
             [NumUnpublishedLanes],
             [NumEditedLanes],
             [NumDoNotMeetCommitmentLanes],
             [NumDuplicateLanes],
             UpdatedOn,
             UpdatedBy,
             Comments,
             IsLatestVersion)
            OUTPUT INSERTED.[RequestSectionID], INSERTED.[RequestSectionVersionID] INTO @RequestSectionVersion
                (
                 [RequestSectionID],
                 [RequestSectionVersionID]
                    )
            SELECT [VersionNum] + 1,
                   [IsActive],
                   [IsInactiveViewable],
                   [RequestSectionID],
                   [RequestLaneVersionID],
                   [SectionNumber],
                   [SectionName],
                   [SubServiceLevelVersionID],
                   [WeightBreak],
                   [WeightBreakHeaderVersionID],
                   [IsDensityPricing],
                   [OverrideDensity],
                   [RateBaseVersionID],
                   [OverrideClassVersionID],
                   [EquipmentTypeVersionID],
                   [Commodity],
                   [NumLanes],
                   [NumUnpublishedLanes],
                   [NumEditedLanes],
                   [NumDoNotMeetCommitmentLanes],
                   [NumDuplicateLanes],
                   GETUTCDATE(),
                   @UpdatedBy,
                   @Comments,
                   1
            FROM @RequestSectionHistory RSH

-- INSERT RequestSectionLane_History

            DECLARE @RequestSectionLaneVersion TABLE
                                               (
                                                   [RequestSectionLaneID]        BIGINT NOT NULL,
                                                   [RequestSectionLaneVersionID] BIGINT NOT NULL
                                               )

            INSERT INTO dbo.RequestSectionLane_History
            ([VersionNum],
             [IsLatestVersion],
             [UpdatedOn],
             [UpdatedBy],
             [Comments],
             [IsActive],
             [IsInactiveViewable],
             [RequestSectionLaneID],
             [RequestSectionVersionID],
             [LaneNumber],
             [IsPublished],
             [IsEdited],
             [IsDuplicate],
             [IsBetween],
             [IsLaneGroup],
             [OriginProvinceVersionID],
             [OriginProvinceCode],
             [OriginRegionVersionID],
             [OriginRegionCode],
             [OriginCountryVersionID],
             [OriginCountryCode],
             [OriginTerminalVersionID],
             [OriginTerminalCode],
             [OriginZoneVersionID],
             [OriginZoneName],
             [OriginBasingPointVersionID],
             [OriginBasingPointName],
             [OriginServicePointVersionID],
             [OriginServicePointName],
             [OriginPostalCodeVersionID],
             [OriginPostalCodeName],
             [OriginPointTypeVersionID],
             [OriginPointTypeName],
             [OriginCode],
             [DestinationProvinceVersionID],
             [DestinationProvinceCode],
             [DestinationRegionVersionID],
             [DestinationRegionCode],
             [DestinationCountryVersionID],
             [DestinationCountryCode],
             [DestinationTerminalVersionID],
             [DestinationTerminalCode],
             [DestinationZoneVersionID],
             [DestinationZoneName],
             [DestinationBasingPointVersionID],
             [DestinationBasingPointName],
             [DestinationServicePointVersionID],
             [DestinationServicePointName],
             [DestinationPostalCodeVersionID],
             [DestinationPostalCodeName],
             [DestinationPointTypeVersionID],
             [DestinationPointTypeName],
             [DestinationCode],
             [LaneHashCode],
             [BasingPointHashCode],
             [Cost],
             [DoNotMeetCommitment],
             [Commitment],
             [CustomerRate],
             [CustomerDiscount],
             [DrRate],
             [PartnerRate],
             [PartnerDiscount],
             [Profitability],
             [PickupCount],
             [DeliveryCount],
             [DockAdjustment],
             [Margin],
             [Density],
             [PickupCost],
             [DeliveryCost],
             [AccessorialsValue],
             [AccessorialsPercentage])
            OUTPUT INSERTED.[RequestSectionLaneID], INSERTED.[RequestSectionLaneVersionID] INTO @RequestSectionLaneVersion
                (
                 [RequestSectionLaneID],
                 [RequestSectionLaneVersionID]
                    )
            SELECT 1,
                   1,
                   GETUTCDATE(),
                   @UpdatedBy,
                   @Comments,
                   RSL.[IsActive],
                   RSL.[IsInactiveViewable],
                   RSL.[NewRequestSectionLaneID],
                   RS.[RequestSectionVersionID],
                   RSL.[LaneNumber],
                   RSL.[IsPublished],
                   RSL.[IsEdited],
                   RSL.[IsDuplicate],
                   RSL.[IsBetween],
                   RSL.[IsLaneGroup],
                   O_P.[ProvinceVersionID],
                   RSL.[OriginProvinceCode],
                   O_R.[RegionVersionID],
                   RSL.[OriginRegionCode],
                   O_C.[CountryVersionID],
                   RSL.[OriginCountryCode],
                   O_T.[TerminalVersionID],
                   RSL.[OriginTerminalCode],
                   O_Z.[ZoneVersionID],
                   RSL.[OriginZoneName],
                   O_BP.[BasingPointVersionID],
                   RSL.[OriginBasingPointName],
                   O_Y.[ServicePointVersionID],
                   RSL.[OriginServicePointName],
                   O_PC.[PostalCodeVersionID],
                   RSL.[OriginPostalCodeName],
                   O_PT.[PointTypeVersionID],
                   RSL.[OriginPointTypeName],
                   RSL.[OriginCode],
                   D_P.[ProvinceVersionID],
                   RSL.[DestinationProvinceCode],
                   D_R.[RegionVersionID],
                   RSL.[DestinationRegionCode],
                   D_C.[CountryVersionID],
                   RSL.[DestinationCountryCode],
                   D_T.[TerminalVersionID],
                   RSL.[DestinationTerminalCode],
                   D_Z.[ZoneVersionID],
                   RSL.[DestinationZoneName],
                   D_BP.[BasingPointVersionID],
                   RSL.[DestinationBasingPointName],
                   D_Y.[ServicePointVersionID],
                   RSL.[DestinationServicePointName],
                   D_PC.[PostalCodeVersionID],
                   RSL.[DestinationPostalCodeName],
                   D_PT.[PointTypeVersionID],
                   RSL.[DestinationPointTypeName],
                   RSL.[DestinationCode],
                   RSL.[LaneHashCode],
                   RSL.[BasingPointHashCode],
                   RSL.[Cost],
                   RSL.[DoNotMeetCommitment],
                   RSL.[Commitment],
                   RSL.[CustomerRate],
                   RSL.[CustomerDiscount],
                   RSL.[DrRate],
                   RSL.[PartnerRate],
                   RSL.[PartnerDiscount],
                   RSL.[Profitability],
                   RSL.[PickupCount],
                   RSL.[DeliveryCount],
                   RSL.[DockAdjustment],
                   RSL.[Margin],
                   RSL.[Density],
                   RSL.[PickupCost],
                   RSL.[DeliveryCost],
                   RSL.[AccessorialsValue],
                   RSL.[AccessorialsPercentage]
            FROM @NewRequestSectionLaneTableType RSL
                     INNER JOIN @RequestSectionVersion RS ON RSL.RequestSectionID = RS.RequestSectionID
                     INNER JOIN @PointTypeVersionID O_PT ON RSL.OriginPointTypeID = O_PT.PointTypeID
                     INNER JOIN @PointTypeVersionID D_PT ON RSL.DestinationPointTypeID = D_PT.PointTypeID
                     LEFT JOIN @ProvinceVersionID O_P ON RSL.OriginProvinceID = O_P.ProvinceID
                     LEFT JOIN @ProvinceVersionID D_P ON RSL.DestinationProvinceID = D_P.ProvinceID
                     LEFT JOIN @RegionVersionID O_R ON RSL.OriginRegionID = O_R.RegionID
                     LEFT JOIN @RegionVersionID D_R ON RSL.DestinationRegionID = D_R.RegionID
                     LEFT JOIN @CountryVersionID O_C ON RSL.OriginCountryID = O_C.CountryID
                     LEFT JOIN @CountryVersionID D_C ON RSL.DestinationCountryID = D_C.CountryID
                     LEFT JOIN @ServicePointVersionID O_Y ON RSL.OriginServicePointID = O_Y.ServicePointID
                     LEFT JOIN @ServicePointVersionID D_Y ON RSL.DestinationServicePointID = D_Y.ServicePointID
                     LEFT JOIN @TerminalVersionID O_T ON RSL.OriginTerminalID = O_T.TerminalID
                     LEFT JOIN @TerminalVersionID D_T ON RSL.DestinationTerminalID = D_T.TerminalID
                     LEFT JOIN @PostalCodeVersionID O_PC ON RSL.OriginPostalCodeID = O_PC.PostalCodeID
                     LEFT JOIN @PostalCodeVersionID D_PC ON RSL.DestinationPostalCodeID = D_PC.PostalCodeID
                     LEFT JOIN @ZoneVersionID O_Z ON RSL.OriginZoneID = O_Z.ZoneID
                     LEFT JOIN @ZoneVersionID D_Z ON RSL.DestinationZoneID = D_Z.ZoneID
                     LEFT JOIN @BasingPointVersionID O_BP ON RSL.OriginBasingPointID = O_BP.BasingPointID
                     LEFT JOIN @BasingPointVersionID D_BP ON RSL.DestinationBasingPointID = D_BP.BasingPointID

-- Update the history of existing modified request-section-lanes

            DECLARE @RequestSectionLaneTableTypeID IDTableType;

            INSERT INTO @RequestSectionLaneTableTypeID
            (
                ID
            )
            SELECT [RequestSectionLaneID]
            FROM @ToBeUpDatedRequestSectionLane

            EXEC dbo.RequestSectionLane_History_Update @RequestSectionLaneTableTypeID, @UpdatedBy, @Comments
        END
-- INSERT RequestSectionLanePricingPoint

DECLARE
    @RequestSectionCost TABLE
                        (
                            [RequestSectionID] BIGINT        NOT NULL,
                            [Cost]             NVARCHAR(MAX) NOT NULL
                        )

INSERT INTO @RequestSectionCost
([RequestSectionID],
 [Cost])
SELECT ID,
       dbo.GetRequestSectionLaneDefaultCost(ID)
FROM @DistinctRequestSectionID

DECLARE
    @RequestSectionLaneCost TABLE
                            (
                                [RequestSectionLaneID] BIGINT        NOT NULL,
                                [Cost]                 NVARCHAR(MAX) NOT NULL
                            )

INSERT INTO @RequestSectionLaneCost
([RequestSectionLaneID],
 [Cost])
SELECT RSL.RequestSectionLaneID,
       RS.[Cost]
FROM @RequestSectionLaneTableType RSL
         INNER JOIN @RequestSectionCost RS ON RSL.RequestSectionID = RS.RequestSectionID
WHERE RSL.RequestSectionLaneID IS NOT NULL

DECLARE @RequestSectionLanePricingPoint RequestSectionLanePricingPointTableType;

INSERT INTO @RequestSectionLanePricingPoint
([IsActive],
 [IsInactiveViewable],
 [RequestSectionLaneID],
 [PricingPointNumber],
 [OriginPostalCodeID],
 [OriginPostalCodeName],
 [DestinationPostalCodeID],
 [DestinationPostalCodeName],
 [PricingPointHashCode],
 [Cost],
 [DrRate],
 [FakRate],
 [Profitability],
 [SplitsAll],
 [SplitsAllUsagePercentage],
 [PickupCount],
 [DeliveryCount],
 [DockAdjustment],
 [Margin],
 [Density],
 [PickupCost],
 [DeliveryCost],
 [AccessorialsValue],
 [AccessorialsPercentage])
SELECT 1,
       1,
       NRSL.[NewRequestSectionLaneID],
       REPLACE(NEWID(), '-', ''),
       PP.[OriginPostalCodeID],
       PP.[OriginPostalCodeName],
       PP.[DestinationPostalCodeID],
       PP.[DestinationPostalCodeName],
       PP.[PricingPointHashCode],
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       0,
       NULL,
       NULL,
       NULL,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost,
       RSLC.Cost
FROM [dbo].[RequestSectionLanePricingPoint] PP
         INNER JOIN @RequestSectionLaneTableType RSL ON PP.RequestSectionLaneID = RSL.RequestSectionLaneID
         INNER JOIN @NewRequestSectionLaneTableType NRSL ON RSL.LaneNumber = NRSL.LaneNumber
         INNER JOIN @RequestSectionLaneCost RSLC ON RSL.RequestSectionLaneID = RSLC.RequestSectionLaneID
WHERE PP.IsActive = 1
  AND PP.IsInactiveViewable = 1
    EXEC dbo.RequestSectionLanePricingPoint_Insert_Bulk @RequestSectionLanePricingPoint, @UpdatedBy, @Comments

SELECT CAST(
               (SELECT *
                FROM (
                         SELECT (SELECT *
                                 FROM @RequestSectionLaneTableType
                                 WHERE [LaneNumber] IN (SELECT [LaneNumber] FROM @IdenticalRequestSectionLane)
                                 FOR JSON AUTO) AS identical_lanes_not_added,
                                (SELECT *
                                 FROM @RequestSectionLaneTableType
                                 WHERE [LaneNumber] IN (SELECT [LaneNumber] FROM @DuplicateRequestSectionLane)
                                 FOR JSON AUTO) AS duplicate_lanes_added
                     ) AS Q
                FOR JSON AUTO, WITHOUT_ARRAY_WRAPPER)
           AS VARCHAR(MAX))

    COMMIT TRAN
    RETURN 1
go


CREATE FUNCTION dbo.RequestSectionLane_Modify_Rate
(
	@Cost DECIMAL(19,6),
	@Operation NVARCHAR(1),
	@Multiplier DECIMAL(19,6)
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewCost DECIMAL(19,6);

	SELECT @NewCost = CASE
	WHEN @Operation = '+' THEN @Cost + @Multiplier
	WHEN @Operation = '-' THEN @Cost - @Multiplier
	WHEN @Operation = '*' THEN @Cost * @Multiplier
	WHEN @Operation = '/' THEN @Cost / @Multiplier
	WHEN @Operation = '=' THEN @Multiplier
	END

	RETURN @NewCost

END
go


CREATE FUNCTION [dbo].[RequestSectionLane_Modify_RateTable]
(
	@Cost NVARCHAR(MAX),
	@WeightBreak IDTableType READONLY,
	@Operation NVARCHAR(1),
	@Multiplier DECIMAL(19,6)
)

RETURNS NVARCHAR(MAX)
AS
BEGIN
    if @Cost = '{}'
        RETURN @Cost;


	DECLARE @NewCost NVARCHAR(MAX);

	DECLARE @Count INT;
	SELECT @Count = COUNT(*)
	FROM @WeightBreak;

	With
		A
		AS
		(
			SELECT [key], [value]
			FROM OPENJSON(@Cost)
		)

	SELECT @NewCost = '{' +
 STUFF((
SELECT ', ' + '"' +  CAST(C.[key] AS VARCHAR(MAX)) + '"' + ':' + CAST(C.[value] AS VARCHAR(MAX))
		FROM
			(
				SELECT A.[key], CASE
	WHEN @Operation = '+' THEN A.[value] + @Multiplier
	WHEN @Operation = '-' THEN A.[value] - @Multiplier
	WHEN @Operation = '*' THEN A.[value] * @Multiplier
	WHEN @Operation = '/' THEN A.[value] / @Multiplier
	WHEN @Operation = '=' THEN  @Multiplier
	END AS [value]
				FROM A
				WHERE @Count = 0 OR A.[key] IN (SELECT ID
					FROM @WeightBreak)
			UNION
				SELECT A.[key], A.[value]
				FROM A
				WHERE @Count > 0 AND A.[key] NOT IN (SELECT ID
					FROM @WeightBreak)
) AS C
		FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
,1,2,'') + '}'

	RETURN @NewCost

END
go

CREATE PROCEDURE [dbo].[RequestSectionLane_Rate_Update] @RequestSectionID BIGINT,
                                                        @RequestSectionLaneID BIGINT,
                                                        @RateType NVARCHAR(50),
                                                        @RateValue NVARCHAR(max)
AS
    SET NOCOUNT ON;

--     BEGIN TRAN
DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID
FROM dbo.RequestSection
WHERE RequestSectionID = @RequestSectionID;


UPDATE dbo.RequestSectionLane
SET [Cost]         = @RateValue,
    [Commitment]   = @RateValue,
    [CustomerRate] = @RateValue,
    [DrRate]       = @RateValue,
    [PartnerRate]  = @RateValue,
    IsEdited       = 1

WHERE dbo.RequestSectionLane.RequestSectionID = @RequestSectionID
  AND dbo.RequestSectionLane.RequestSectionLaneID = @RequestSectionLaneID;
go

CREATE PROCEDURE [dbo].[RequestSectionLane_Staging_Update] @RequestSectionID BIGINT,
                                                           @ContextID NVARCHAR(32),
                                                           @OrigPointTypeName NVARCHAR(50),
                                                           @OrigPointID BIGINT,
                                                           @DestPointTypeName NVARCHAR(50),
                                                           @DestPointID BIGINT,
                                                           @LaneStatusName NVARCHAR(50),
                                                           @RequestSectionLaneTableType_ID NVARCHAR(MAX) = NULL,
                                                           @IsBetween BIT = NULL,
                                                           @OperationName CHAR(1) = NULL,
                                                           @Multiplier DECIMAL(19, 6) = NULL,
                                                           @RateTable NVARCHAR(50),
                                                           @WeightBreakLowerBound NVARCHAR(MAX) = NULL,
                                                           @MicroSave BIT = NULL,
                                                           @MacroSave BIT = NULL,
                                                           @IsActive BIT = NULL,
                                                           @IsInactiveViewable BIT = NULL
AS

    SET NOCOUNT ON;

    BEGIN TRAN

DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID
FROM dbo.RequestSection
WHERE RequestSectionID = @RequestSectionID;

DECLARE @RequestSectionLaneTableType IDTableType;
INSERT INTO @RequestSectionLaneTableType
(
    ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLaneTableType_ID)

DECLARE @FilterCount INT;
SELECT @FilterCount = COUNT(*)
FROM @RequestSectionLaneTableType;

DECLARE @WeightBreak IDTableType;
INSERT INTO @WeightBreak
(
    ID
)
SELECT [value]
FROM OPENJSON(@WeightBreakLowerBound)
    IF NOT EXISTS(SELECT TOP 1 ContextID
                  FROM dbo.RequestSectionLane_Staging
                  WHERE [RequestLaneID] = @RequestLaneID
                    AND ContextID = @ContextID)
        BEGIN
            INSERT INTO dbo.RequestSectionLane_Staging
            ([RequestSectionLaneID],
             [RequestSectionID],
             [RequestLaneID],
             [LaneNumber],
             [IsPublished],
             [IsEdited],
             [IsDuplicate],
             [IsLaneGroup],
             [OriginProvinceID],
             [OriginProvinceCode],
             [OriginRegionID],
             [OriginRegionCode],
             [OriginCountryID],
             [OriginCountryCode],
             [OriginTerminalID],
             [OriginTerminalCode],
             [OriginZoneID],
             [OriginZoneName],
             [OriginBasingPointID],
             [OriginBasingPointName],
             [OriginServicePointID],
             [OriginServicePointName],
             [OriginPostalCodeID],
             [OriginPostalCodeName],
             [OriginPointTypeID],
             [OriginPointTypeName],
             [OriginCode],
             [DestinationProvinceID],
             [DestinationProvinceCode],
             [DestinationRegionID],
             [DestinationRegionCode],
             [DestinationCountryID],
             [DestinationCountryCode],
             [DestinationTerminalID],
             [DestinationTerminalCode],
             [DestinationZoneID],
             [DestinationZoneName],
             [DestinationBasingPointID],
             [DestinationBasingPointName],
             [DestinationServicePointID],
             [DestinationServicePointName],
             [DestinationPostalCodeID],
             [DestinationPostalCodeName],
             [DestinationPointTypeID],
             [DestinationPointTypeName],
             [DestinationCode],
             [LaneHashCode],
             [BasingPointHashCode],
             [Cost],
             [NewCost],
             [IsActive],
             [NewIsActive],
             [IsInactiveViewable],
             [NewIsInactiveViewable],
             [IsBetween],
             [NewIsBetween],
             [IsUpdated],
             [ContextID],
             [ContextCreatedOn],
             [DoNotMeetCommitment],
             [NewDoNotMeetCommitment],
             [Commitment],
             [NewCommitment],
             [CustomerRate],
             [NewCustomerRate],
             [CustomerDiscount],
             [NewCustomerDiscount],
             [DrRate],
             [NewDrRate],
             [PartnerRate],
             [NewPartnerRate],
             [PartnerDiscount],
             [NewPartnerDiscount],
             [Profitability],
             [NewProfitability],
             [PickupCount],
             [NewPickupCount],
             [DeliveryCount],
             [NewDeliveryCount],
             [DockAdjustment],
             [NewDockAdjustment],
             [Margin],
             [NewMargin],
             [Density],
             [NewDensity],
             [PickupCost],
             [NewPickupCost],
             [DeliveryCost],
             [NewDeliveryCost],
             [AccessorialsValue],
             [NewAccessorialsValue],
             [AccessorialsPercentage],
             [NewAccessorialsPercentage],
             [PricingRates],
		     [WorkflowErrors]
             )
            SELECT [RequestSectionLaneID],
                   RSL.[RequestSectionID],
                   RS.[RequestLaneID],
                   [LaneNumber],
                   [IsPublished],
                   [IsEdited],
                   [IsDuplicate],
                   [IsLaneGroup],
                   [OriginProvinceID],
                   [OriginProvinceCode],
                   [OriginRegionID],
                   [OriginRegionCode],
                   [OriginCountryID],
                   [OriginCountryCode],
                   [OriginTerminalID],
                   [OriginTerminalCode],
                   [OriginZoneID],
                   [OriginZoneName],
                   [OriginBasingPointID],
                   [OriginBasingPointName],
                   [OriginServicePointID],
                   [OriginServicePointName],
                   [OriginPostalCodeID],
                   [OriginPostalCodeName],
                   [OriginPointTypeID],
                   [OriginPointTypeName],
                   [OriginCode],
                   [DestinationProvinceID],
                   [DestinationProvinceCode],
                   [DestinationRegionID],
                   [DestinationRegionCode],
                   [DestinationCountryID],
                   [DestinationCountryCode],
                   [DestinationTerminalID],
                   [DestinationTerminalCode],
                   [DestinationZoneID],
                   [DestinationZoneName],
                   [DestinationBasingPointID],
                   [DestinationBasingPointName],
                   [DestinationServicePointID],
                   [DestinationServicePointName],
                   [DestinationPostalCodeID],
                   [DestinationPostalCodeName],
                   [DestinationPointTypeID],
                   [DestinationPointTypeName],
                   [DestinationCode],
                   [LaneHashCode],
                   [BasingPointHashCode],
                   RSL.[Cost],
                   RSL.[Cost],
                   RSL.[IsActive],
                   RSL.[IsActive],
                   RSL.[IsInactiveViewable],
                   RSL.[IsInactiveViewable],
                   RSL.[IsBetween],
                   RSL.[IsBetween],
                   0,
                   @ContextID,
                   GETUTCDATE(),
                   [DoNotMeetCommitment],
                   [DoNotMeetCommitment],
                   [Commitment],
                   [Commitment],
                   [CustomerRate],
                   [CustomerRate],
                   [CustomerDiscount],
                   [CustomerDiscount],
                   [DrRate],
                   [DrRate],
                   [PartnerRate],
                   [PartnerRate],
                   [PartnerDiscount],
                   [PartnerDiscount],
                   [Profitability],
                   [Profitability],
                   [PickupCount],
                   [PickupCount],
                   [DeliveryCount],
                   [DeliveryCount],
                   [DockAdjustment],
                   [DockAdjustment],
                   [Margin],
                   [Margin],
                   [Density],
                   [Density],
                   [PickupCost],
                   [PickupCost],
                   [DeliveryCost],
                   [DeliveryCost],
                   [AccessorialsValue],
                   [AccessorialsValue],
                   [AccessorialsPercentage],
                   [AccessorialsPercentage],
                   [PricingRates],
		           [WorkflowErrors]
            FROM dbo.RequestSectionLane RSL
                     INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
            WHERE RS.RequestLaneID = @RequestLaneID
        END;

    IF NOT EXISTS(SELECT TOP 1 ContextID
                  FROM dbo.RequestSectionLanePricingPoint_Staging
                  WHERE [RequestLaneID] = @RequestLaneID
                    AND ContextID = @ContextID)
        BEGIN
            INSERT INTO dbo.RequestSectionLanePricingPoint_Staging
            ([IsActive],
             [NewIsActive],
             [IsInactiveViewable],
             [NewIsInactiveViewable],
             [RequestSectionLanePricingPointID],
             [RequestSectionLaneID],
             [RequestLaneID],
             [PricingPointNumber],
             [OriginPostalCodeID],
             [OriginPostalCodeName],
             [DestinationPostalCodeID],
             [DestinationPostalCodeName],
             [PricingPointHashCode],
             [Cost],
             [NewCost],
             [DrRate],
             [NewDrRate],
             [FakRate],
             [NewFakRate],
             [Profitability],
             [NewProfitability],
             [SplitsAll],
             [NewSplitsAll],
             [SplitsAllUsagePercentage],
             [NewSplitsAllUsagePercentage],
             [PickupCount],
             [NewPickupCount],
             [DeliveryCount],
             [NewDeliveryCount],
             [DockAdjustment],
             [NewDockAdjustment],
             [Margin],
             [NewMargin],
             [Density],
             [NewDensity],
             [PickupCost],
             [NewPickupCost],
             [DeliveryCost],
             [NewDeliveryCost],
             [AccessorialsValue],
             [NewAccessorialsValue],
             [AccessorialsPercentage],
             [NewAccessorialsPercentage],
             [IsUpdated],
             [ContextID],
             [ContextCreatedOn],
             [PricingRates],
		     [WorkflowErrors])
            SELECT RSLPP.[IsActive],
                   RSLPP.[IsActive],
                   RSLPP.[IsInactiveViewable],
                   RSLPP.[IsInactiveViewable],
                   RSLPP.[RequestSectionLanePricingPointID],
                   RSLPP.[RequestSectionLaneID],
                   @RequestLaneID,
                   RSLPP.[PricingPointNumber],
                   RSLPP.[OriginPostalCodeID],
                   RSLPP.[OriginPostalCodeName],
                   RSLPP.[DestinationPostalCodeID],
                   RSLPP.[DestinationPostalCodeName],
                   RSLPP.[PricingPointHashCode],
                   RSLPP.[Cost],
                   RSLPP.[Cost],
                   RSLPP.[DrRate],
                   RSLPP.[DrRate],
                   RSLPP.[FakRate],
                   RSLPP.[FakRate],
                   RSLPP.[Profitability],
                   RSLPP.[Profitability],
                   RSLPP.[SplitsAll],
                   RSLPP.[SplitsAll],
                   RSLPP.[SplitsAllUsagePercentage],
                   RSLPP.[SplitsAllUsagePercentage],
                   RSLPP.[PickupCount],
                   RSLPP.[PickupCount],
                   RSLPP.[DeliveryCount],
                   RSLPP.[DeliveryCount],
                   RSLPP.[DockAdjustment],
                   RSLPP.[DockAdjustment],
                   RSLPP.[Margin],
                   RSLPP.[Margin],
                   RSLPP.[Density],
                   RSLPP.[Density],
                   RSLPP.[PickupCost],
                   RSLPP.[PickupCost],
                   RSLPP.[DeliveryCost],
                   RSLPP.[DeliveryCost],
                   RSLPP.[AccessorialsValue],
                   RSLPP.[AccessorialsValue],
                   RSLPP.[AccessorialsPercentage],
                   RSLPP.[AccessorialsPercentage],
                   0,
                   @ContextID,
                   GETUTCDATE(),
                   RSLPP.[PricingRates],
		           RSLPP.[WorkflowErrors]
            FROM dbo.RequestSectionLanePricingPoint RSLPP
                     INNER JOIN dbo.RequestSectionLane RSL ON RSLPP.RequestSectionLaneID = RSL.RequestSectionLaneID
                     INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
            WHERE RS.RequestLaneID = @RequestLaneID
        END;


WITH A AS
         (
             SELECT *
             FROM dbo.RequestSectionLane_Staging RSLS
             WHERE RSLS.RequestLaneID = @RequestLaneID
               AND RSLS.RequestSectionID = @RequestSectionID
               AND RSLS.ContextID = @ContextID
               AND (
                     ((@LaneStatusName = 'None') OR (@LaneStatusName = 'New' AND [IsPublished] = 0) OR
                      (@LaneStatusName = 'Changed' AND [IsEdited] = 1) OR
                      (@LaneStatusName = 'Duplicated' AND [IsDuplicate] = 1) OR
                      (@LaneStatusName = 'DoNotMeetCommitment' AND [DoNotMeetCommitment] = 1))
                     AND ((@OrigPointTypeName = 'None') OR
                          (@OrigPointTypeName = 'Country' AND OriginCountryID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Region' AND OriginRegionID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Province' AND OriginProvinceID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Terminal' AND OriginTerminalID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Basing Point' AND OriginBasingPointID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Service Point' AND OriginServicePointID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Postal Code' AND OriginPostalCodeID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Point Type' AND OriginPointTypeID = @OrigPointID)
                         )
                     AND ((@DestPointTypeName = 'None') OR
                          (@DestPointTypeName = 'Country' AND DestinationCountryID = @DestPointID) OR
                          (@DestPointTypeName = 'Region' AND DestinationRegionID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Province' AND DestinationProvinceID = @DestPointID) OR
                          (@DestPointTypeName = 'Terminal' AND DestinationTerminalID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Basing Point' AND DestinationBasingPointID = @DestPointID) OR
                          (@DestPointTypeName = 'Service Point' AND DestinationServicePointID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Postal Code' AND DestinationPostalCodeID = @DestPointID) OR
                          (@DestPointTypeName = 'Point Type' AND DestinationPointTypeID = @DestPointID)
                         )
                 )
               AND ((@FilterCount = 0) OR
                    (@FilterCount > 0 AND RSLS.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableType)))
         )

UPDATE dbo.RequestSectionLane_Staging
SET IsUpdated                 = 1,
    NewIsActive               = CASE WHEN @IsActive IS NOT NULL THEN @IsActive ELSE A.NewIsActive END,
    NewIsInactiveViewable     = CASE
                                    WHEN @IsInactiveViewable IS NOT NULL THEN @IsInactiveViewable
                                    ELSE A.NewIsInactiveViewable END,
    NewIsBetween              = CASE WHEN @IsBetween IS NOT NULL THEN @IsBetween ELSE A.NewIsBetween END,

    NewCost                   = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'cost' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewCost, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewCost END,
    NewCommitment             = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'commitment' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewCommitment, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewCommitment END,
--     NewCommitment             = CASE
--                                     WHEN @RateTable IS NOT NULL AND @RateTable = 'commitment' AND
--                                          @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
--                                          @WeightBreakLowerBound IS NOT NULL
--                                         THEN A.NewCommitment
--                                     ELSE A.NewCommitment END,
--     NewCommitment             = CASE
--                                     WHEN @RateTable IS NOT NULL AND @RateTable = 'commitment' AND
--                                          @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
--                                          @WeightBreakLowerBound IS NOT NULL
--                                         THEN dbo.RequestSectionLane_Modify_RateTable(
--                                             '{"0":555, "1000":0, "1000":0, "2000":0, "2000":0, "5000":0, "5000":0, "10000":0, "10000":0, "20000":0, "20000":0}',
--                                             @WeightBreak,
--                                             @OperationName, @Multiplier)
--                                     ELSE A.NewCommitment END,
    NewCustomerRate           = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'customer_rate' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewCustomerRate, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewCustomerRate END,

    NewCustomerDiscount       = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'customer_discount' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewCustomerDiscount,
                                                                                     @WeightBreak, @OperationName,
                                                                                     @Multiplier)
                                    ELSE A.NewCustomerDiscount END,
    NewDrRate                 = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'dr_rate' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewDrRate, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewDrRate END,
    NewPartnerRate            = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'partner_rate' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewPartnerRate, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewPartnerRate END,
    NewPartnerDiscount        = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'partner_discount' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewPartnerDiscount, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewPartnerDiscount END,
    NewProfitability          = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'profitability' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewProfitability, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewProfitability END,
    NewMargin                 = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'margin' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewMargin, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewMargin END,
    NewDensity                = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'density' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewDensity, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewDensity END,
    NewPickupCost             = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_cost' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewPickupCost, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewPickupCost END,
    NewDeliveryCost           = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_cost' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewDeliveryCost, @WeightBreak,
                                                                                     @OperationName, @Multiplier)
                                    ELSE A.NewDeliveryCost END,
    NewAccessorialsValue      = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_value' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewAccessorialsValue,
                                                                                     @WeightBreak, @OperationName,
                                                                                     @Multiplier)
                                    ELSE A.NewAccessorialsValue END,
    NewAccessorialsPercentage = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_percentage' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND
                                         @WeightBreakLowerBound IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_RateTable(A.NewAccessorialsPercentage,
                                                                                     @WeightBreak, @OperationName,
                                                                                     @Multiplier)
                                    ELSE A.NewAccessorialsPercentage END,
    NewPickupCount            = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_count' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_Rate(A.NewPickupCount, @OperationName,
                                                                                @Multiplier)
                                    ELSE A.NewPickupCount END,
    NewDeliveryCount          = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_count' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_Rate(A.NewDeliveryCount, @OperationName,
                                                                                @Multiplier)
                                    ELSE A.NewDeliveryCount END,
    NewDockAdjustment         = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'dock_adjustment' AND
                                         @OperationName IS NOT NULL AND @Multiplier IS NOT NULL
                                        THEN dbo.RequestSectionLane_Modify_Rate(A.NewDockAdjustment, @OperationName,
                                                                                @Multiplier)
                                    ELSE A.NewDockAdjustment END,
    WorkflowErrors            = CASE
                                    WHEN @RateTable IS NOT NULL AND @RateTable = 'clear_workflow_errors'
                                        THEN NULL
                                    ELSE A.WorkflowErrors END

FROM A
WHERE dbo.RequestSectionLane_Staging.RequestLaneID = A.RequestLaneID
  AND dbo.RequestSectionLane_Staging.RequestSectionID = A.RequestSectionID
  AND dbo.RequestSectionLane_Staging.ContextID = A.ContextID
  AND dbo.RequestSectionLane_Staging.RequestSectionLaneID = A.RequestSectionLaneID
    IF (@MicroSave IS NOT NULL AND @MicroSave = 1) OR (@MacroSave IS NOT NULL AND @MacroSave = 1)
        BEGIN
            ;

            WITH B AS
                     (
                         SELECT *
                         FROM dbo.RequestSectionLane_Staging
                         WHERE ContextID = @ContextID
                           AND IsUpdated = 1
                     )

            Update dbo.RequestSectionLane
            SET Cost                     = B.NewCost,
                [DoNotMeetCommitment]    = 0,
                [Commitment]             = B.[NewCommitment],
                [CustomerRate]           = B.[NewCustomerRate],
                [CustomerDiscount]       = B.[NewCustomerDiscount],
                [DrRate]                 = B.[NewDrRate],
                [PartnerRate]            = B.[NewPartnerRate],
                [PartnerDiscount]        = B.[NewPartnerDiscount],
                [Profitability]          = B.[NewProfitability],
                [PickupCount]            = B.[NewPickupCount],
                [DeliveryCount]          = B.[NewDeliveryCount],
                [DockAdjustment]         = B.[NewDockAdjustment],
                [Margin]                 = B.[NewMargin],
                [Density]                = B.[NewDensity],
                [PickupCost]             = B.[NewPickupCost],
                [DeliveryCost]           = B.[NewDeliveryCost],
                [AccessorialsValue]      = B.[NewAccessorialsValue],
                [AccessorialsPercentage] = B.[NewAccessorialsPercentage],
                IsActive                 = B.NewIsActive,
                IsInactiveViewable       = B.NewIsInactiveViewable,
                IsBetween                = B.NewIsBetween,
                PricingRates             = B.PricingRates,
                WorkflowErrors           = B.WorkflowErrors,
                IsEdited                 = 1
            FROM B
            WHERE dbo.RequestSectionLane.RequestSectionID = B.RequestSectionID
              AND dbo.RequestSectionLane.RequestSectionLaneID = B.RequestSectionLaneID;

            WITH C AS
                     (
                         SELECT DISTINCT RequestSectionLaneID
                         FROM dbo.RequestSectionLanePricingPoint_Staging
                         WHERE ContextID = @ContextID
                           AND IsUpdated = 1
                     )

            UPDATE dbo.RequestSectionLane
            SET IsEdited = 1
            WHERE dbo.RequestSectionLane.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM C)

            EXEC [dbo].[RequestSectionLanePricingPoint_Staging_Update] @RequestSectionID, @ContextID, 'None', 0, 'None',
                 0, 'None', '[]', '[]', NULL, NULL, 'None', NULL, @MicroSave, @MacroSave

            DECLARE @RequestSectionLaneTableTypeID IDTableType;

            INSERT INTO @RequestSectionLaneTableTypeID
            (
                ID
            )
            SELECT DISTINCT RequestSectionLaneID
            FROM (SELECT RequestSectionLaneID
                  FROM dbo.RequestSectionLane_Staging
                  WHERE ContextID = @ContextID
                    AND IsUpdated = 1
                  UNION
                  SELECT DISTINCT RequestSectionLaneID
                  FROM dbo.RequestSectionLanePricingPoint_Staging
                  WHERE ContextID = @ContextID
                    AND IsUpdated = 1) AS D

            --EXEC [dbo].[RequestSectionLane_History_Update] @RequestSectionLaneTableTypeID
            EXEC dbo.RequestLane_Count @RequestLaneID

            IF (@MacroSave IS NOT NULL AND @MacroSave = 1)
                BEGIN
                    DECLARE @RequestLaneVersionID BIGINT;

                    SELECT @RequestLaneVersionID = RequestLaneVersionID
                    FROM dbo.RequestLane_History RLH
                    WHERE RLH.RequestLaneID = @RequestLaneID
                      AND RLH.IsLatestVersion = 1

                    DECLARE @RequestHistory TABLE
                                            (
                                                [VersionNum]                   INT            NOT NULL,
                                                [BaseVersion]                  INT            NULL,
                                                [IsLatestVersion]              BIT            NOT NULL,
                                                [UpdatedOn]                    DATETIME2(7)   NOT NULL,
                                                [UpdatedBy]                    NVARCHAR(50)   NOT NULL,
                                                [Comments]                     NVARCHAR(4000) NOT NULL,
                                                [IsActive]                     BIT            NOT NULL,
                                                [IsInactiveViewable]           BIT            NOT NULL,
                                                [RequestVersionID]             BIGINT         NOT NULL,
                                                [RequestNumber]                NVARCHAR(32)   NOT NULL,
                                                [RequestCode]                  NVARCHAR(32)   NOT NULL,
                                                [InitiatedOn]                  DATETIME2(7)   NOT NULL,
                                                [SubmittedOn]                  DATETIME2(7)   NULL,
                                                [IsValidData]                  BIT            NOT NULL,
                                                [InitiatedByVersion]           BIGINT         NOT NULL,
                                                [RequestID]                    BIGINT         NOT NULL,
                                                [RequestAccessorialsVersionID] BIGINT         NULL,
                                                [RequestInformationVersionID]  BIGINT         NULL,
                                                [RequestLaneVersionID]         BIGINT         NULL,
                                                [RequestProfileVersionID]      BIGINT         NULL,
                                                [SubmittedByVersion]           BIGINT         NULL,
                                                [IsReview]                     BIT            NOT NULL
                                            )
                    INSERT INTO @RequestHistory
                    ([VersionNum],
                     [BaseVersion],
                     [IsLatestVersion],
                     [UpdatedOn],
                     [UpdatedBy],
                     [Comments],
                     [IsActive],
                     [IsInactiveViewable],
                     [RequestVersionID],
                     [RequestNumber],
                     [RequestCode],
                     [InitiatedOn],
                     [SubmittedOn],
                     [IsValidData],
                     [InitiatedByVersion],
                     [RequestID],
                     [RequestAccessorialsVersionID],
                     [RequestInformationVersionID],
                     [RequestLaneVersionID],
                     [RequestProfileVersionID],
                     [SubmittedByVersion],
                     [IsReview])
                    SELECT [VersionNum],
                           [BaseVersion],
                           [IsLatestVersion],
                           [UpdatedOn],
                           [UpdatedBy],
                           [Comments],
                           RH.[IsActive],
                           RH.[IsInactiveViewable],
                           [RequestVersionID],
                           RH.[RequestNumber],
                           RH.[RequestCode],
                           RH.[InitiatedOn],
                           RH.[SubmittedOn],
                           RH.[IsValidData],
                           [InitiatedByVersion],
                           RH.[RequestID],
                           RH.[RequestAccessorialsVersionID],
                           [RequestInformationVersionID],
                           [RequestLaneVersionID],
                           [RequestProfileVersionID],
                           [SubmittedByVersion],
                           RH.[IsReview]
                    FROM dbo.Request_History RH
                             INNER JOIN dbo.Request R ON RH.[RequestID] = R.[RequestID] AND RH.[IsLatestVersion] = 1 AND
                                                         R.RequestLaneID = @RequestLaneID

                    UPDATE dbo.Request_History
                    SET [IsLatestVersion] = 0
                    WHERE dbo.Request_History.[RequestVersionID] IN (SELECT [RequestVersionID] FROM @RequestHistory)

                    INSERT INTO dbo.Request_History
                    ([VersionNum],
                     [IsLatestVersion],
                     [UpdatedOn],
                     [UpdatedBy],
                     [Comments],
                     [IsActive],
                     [IsInactiveViewable],
                     [RequestNumber],
                     [RequestCode],
                     [InitiatedOn],
                     [SubmittedOn],
                     [IsValidData],
                     [InitiatedByVersion],
                     [RequestID],
                     [RequestAccessorialsVersionID],
                     [RequestInformationVersionID],
                     [RequestLaneVersionID],
                     [RequestProfileVersionID],
                     [SubmittedByVersion],
                     [IsReview])
                    SELECT [VersionNum] + 1,
                           1,
                           GETUTCDATE(),
                           '',
                           '',
                           [IsActive],
                           [IsInactiveViewable],
                           [RequestNumber],
                           [RequestCode],
                           [InitiatedOn],
                           [SubmittedOn],
                           [IsValidData],
                           [InitiatedByVersion],
                           [RequestID],
                           [RequestAccessorialsVersionID],
                           [RequestInformationVersionID],
                           @RequestLaneVersionID,
                           [RequestProfileVersionID],
                           [SubmittedByVersion],
                           [IsReview]
                    FROM @RequestHistory
                END

            DELETE
            FROM dbo.RequestSectionLane_Staging
            WHERE RequestLaneID = @RequestLaneID
              AND ContextID = @ContextID

            --DELETE FROM dbo.RequestSectionLanePricingPoint_Staging
            --WHERE RequestLaneID = @RequestLaneID AND ContextID = @ContextID

        END

    COMMIT TRAN

    RETURN 1
go

CREATE PROCEDURE [dbo].[RequestSectionLane_Staging_Update_Ex] @RequestSectionID BIGINT,
                                                              @ContextID NVARCHAR(32),
                                                              @MicroSave BIT = NULL,
                                                              @MacroSave BIT = NULL,
                                                              @LaneStatusName NVARCHAR(50)='None',
                                                              @RequestSectionLaneTableType_ID NVARCHAR(MAX) = NULL,
                                                              @IsBetween BIT = NULL,
                                                              @RateTable NVARCHAR(50) = NULL,
                                                              @RateValue NVARCHAR(MAX)=NULL,
                                                              @WeightBreakLowerBound NVARCHAR(MAX) = NULL
AS

    SET NOCOUNT ON;

    BEGIN TRAN

--  dff
DECLARE @OrigPointTypeName NVARCHAR(50) ='None';
DECLARE @OrigPointID BIGINT=0;
DECLARE @DestPointTypeName NVARCHAR(50)='None';
DECLARE @DestPointID BIGINT =0;
DECLARE @OperationName CHAR(1) = NULL;
DECLARE @Multiplier DECIMAL(19, 6) = NULL;
DECLARE @IsActive BIT = NULL;
DECLARE @IsInactiveViewable BIT = NULL;
--     ddff
DECLARE @RequestLaneID BIGINT;
SELECT @RequestLaneID = RequestLaneID
FROM dbo.RequestSection
WHERE RequestSectionID = @RequestSectionID;

DECLARE @RequestSectionLaneTableType IDTableType;
INSERT INTO @RequestSectionLaneTableType
(
    ID
)
SELECT [value]
FROM OPENJSON(@RequestSectionLaneTableType_ID)

DECLARE @FilterCount INT;
SELECT @FilterCount = COUNT(*)
FROM @RequestSectionLaneTableType;

DECLARE @WeightBreak IDTableType;
INSERT INTO @WeightBreak
(
    ID
)
SELECT [value]
FROM OPENJSON(@WeightBreakLowerBound)
    IF NOT EXISTS(SELECT TOP 1 ContextID
                  FROM dbo.RequestSectionLane_Staging
                  WHERE [RequestLaneID] = @RequestLaneID
                    AND ContextID = @ContextID)
        BEGIN
            INSERT INTO dbo.RequestSectionLane_Staging
            ([RequestSectionLaneID],
             [RequestSectionID],
             [RequestLaneID],
             [LaneNumber],
             [IsPublished],
             [IsEdited],
             [IsDuplicate],
             [IsLaneGroup],
             [OriginProvinceID],
             [OriginProvinceCode],
             [OriginRegionID],
             [OriginRegionCode],
             [OriginCountryID],
             [OriginCountryCode],
             [OriginTerminalID],
             [OriginTerminalCode],
             [OriginZoneID],
             [OriginZoneName],
             [OriginBasingPointID],
             [OriginBasingPointName],
             [OriginServicePointID],
             [OriginServicePointName],
             [OriginPostalCodeID],
             [OriginPostalCodeName],
             [OriginPointTypeID],
             [OriginPointTypeName],
             [OriginCode],
             [DestinationProvinceID],
             [DestinationProvinceCode],
             [DestinationRegionID],
             [DestinationRegionCode],
             [DestinationCountryID],
             [DestinationCountryCode],
             [DestinationTerminalID],
             [DestinationTerminalCode],
             [DestinationZoneID],
             [DestinationZoneName],
             [DestinationBasingPointID],
             [DestinationBasingPointName],
             [DestinationServicePointID],
             [DestinationServicePointName],
             [DestinationPostalCodeID],
             [DestinationPostalCodeName],
             [DestinationPointTypeID],
             [DestinationPointTypeName],
             [DestinationCode],
             [LaneHashCode],
             [BasingPointHashCode],
             [Cost],
             [NewCost],
             [IsActive],
             [NewIsActive],
             [IsInactiveViewable],
             [NewIsInactiveViewable],
             [IsBetween],
             [NewIsBetween],
             [IsUpdated],
             [ContextID],
             [ContextCreatedOn],
             [DoNotMeetCommitment],
             [NewDoNotMeetCommitment],
             [Commitment],
             [NewCommitment],
             [CustomerRate],
             [NewCustomerRate],
             [CustomerDiscount],
             [NewCustomerDiscount],
             [DrRate],
             [NewDrRate],
             [PartnerRate],
             [NewPartnerRate],
             [PartnerDiscount],
             [NewPartnerDiscount],
             [Profitability],
             [NewProfitability],
             [PickupCount],
             [NewPickupCount],
             [DeliveryCount],
             [NewDeliveryCount],
             [DockAdjustment],
             [NewDockAdjustment],
             [Margin],
             [NewMargin],
             [Density],
             [NewDensity],
             [PickupCost],
             [NewPickupCost],
             [DeliveryCost],
             [NewDeliveryCost],
             [AccessorialsValue],
             [NewAccessorialsValue],
             [AccessorialsPercentage],
             [NewAccessorialsPercentage])
            SELECT [RequestSectionLaneID],
                   RSL.[RequestSectionID],
                   RS.[RequestLaneID],
                   [LaneNumber],
                   [IsPublished],
                   [IsEdited],
                   [IsDuplicate],
                   [IsLaneGroup],
                   [OriginProvinceID],
                   [OriginProvinceCode],
                   [OriginRegionID],
                   [OriginRegionCode],
                   [OriginCountryID],
                   [OriginCountryCode],
                   [OriginTerminalID],
                   [OriginTerminalCode],
                   [OriginZoneID],
                   [OriginZoneName],
                   [OriginBasingPointID],
                   [OriginBasingPointName],
                   [OriginServicePointID],
                   [OriginServicePointName],
                   [OriginPostalCodeID],
                   [OriginPostalCodeName],
                   [OriginPointTypeID],
                   [OriginPointTypeName],
                   [OriginCode],
                   [DestinationProvinceID],
                   [DestinationProvinceCode],
                   [DestinationRegionID],
                   [DestinationRegionCode],
                   [DestinationCountryID],
                   [DestinationCountryCode],
                   [DestinationTerminalID],
                   [DestinationTerminalCode],
                   [DestinationZoneID],
                   [DestinationZoneName],
                   [DestinationBasingPointID],
                   [DestinationBasingPointName],
                   [DestinationServicePointID],
                   [DestinationServicePointName],
                   [DestinationPostalCodeID],
                   [DestinationPostalCodeName],
                   [DestinationPointTypeID],
                   [DestinationPointTypeName],
                   [DestinationCode],
                   [LaneHashCode],
                   [BasingPointHashCode],
                   RSL.[Cost],
                   RSL.[Cost],
                   RSL.[IsActive],
                   RSL.[IsActive],
                   RSL.[IsInactiveViewable],
                   RSL.[IsInactiveViewable],
                   RSL.[IsBetween],
                   RSL.[IsBetween],
                   0,
                   @ContextID,
                   GETUTCDATE(),
                   [DoNotMeetCommitment],
                   [DoNotMeetCommitment],
                   [Commitment],
                   [Commitment],
                   [CustomerRate],
                   [CustomerRate],
                   [CustomerDiscount],
                   [CustomerDiscount],
                   [DrRate],
                   [DrRate],
                   [PartnerRate],
                   [PartnerRate],
                   [PartnerDiscount],
                   [PartnerDiscount],
                   [Profitability],
                   [Profitability],
                   [PickupCount],
                   [PickupCount],
                   [DeliveryCount],
                   [DeliveryCount],
                   [DockAdjustment],
                   [DockAdjustment],
                   [Margin],
                   [Margin],
                   [Density],
                   [Density],
                   [PickupCost],
                   [PickupCost],
                   [DeliveryCost],
                   [DeliveryCost],
                   [AccessorialsValue],
                   [AccessorialsValue],
                   [AccessorialsPercentage],
                   [AccessorialsPercentage]
            FROM dbo.RequestSectionLane RSL
                     INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
            WHERE RS.RequestLaneID = @RequestLaneID
        END;

    IF NOT EXISTS(SELECT TOP 1 ContextID
                  FROM dbo.RequestSectionLanePricingPoint_Staging
                  WHERE [RequestLaneID] = @RequestLaneID
                    AND ContextID = @ContextID)
        BEGIN
            INSERT INTO dbo.RequestSectionLanePricingPoint_Staging
            ([IsActive],
             [NewIsActive],
             [IsInactiveViewable],
             [NewIsInactiveViewable],
             [RequestSectionLanePricingPointID],
             [RequestSectionLaneID],
             [RequestLaneID],
             [PricingPointNumber],
             [OriginPostalCodeID],
             [OriginPostalCodeName],
             [DestinationPostalCodeID],
             [DestinationPostalCodeName],
             [PricingPointHashCode],
             [Cost],
             [NewCost],
             [DrRate],
             [NewDrRate],
             [FakRate],
             [NewFakRate],
             [Profitability],
             [NewProfitability],
             [SplitsAll],
             [NewSplitsAll],
             [SplitsAllUsagePercentage],
             [NewSplitsAllUsagePercentage],
             [PickupCount],
             [NewPickupCount],
             [DeliveryCount],
             [NewDeliveryCount],
             [DockAdjustment],
             [NewDockAdjustment],
             [Margin],
             [NewMargin],
             [Density],
             [NewDensity],
             [PickupCost],
             [NewPickupCost],
             [DeliveryCost],
             [NewDeliveryCost],
             [AccessorialsValue],
             [NewAccessorialsValue],
             [AccessorialsPercentage],
             [NewAccessorialsPercentage],
             [IsUpdated],
             [ContextID],
             [ContextCreatedOn])
            SELECT RSLPP.[IsActive],
                   RSLPP.[IsActive],
                   RSLPP.[IsInactiveViewable],
                   RSLPP.[IsInactiveViewable],
                   RSLPP.[RequestSectionLanePricingPointID],
                   RSLPP.[RequestSectionLaneID],
                   @RequestLaneID,
                   RSLPP.[PricingPointNumber],
                   RSLPP.[OriginPostalCodeID],
                   RSLPP.[OriginPostalCodeName],
                   RSLPP.[DestinationPostalCodeID],
                   RSLPP.[DestinationPostalCodeName],
                   RSLPP.[PricingPointHashCode],
                   RSLPP.[Cost],
                   RSLPP.[Cost],
                   RSLPP.[DrRate],
                   RSLPP.[DrRate],
                   RSLPP.[FakRate],
                   RSLPP.[FakRate],
                   RSLPP.[Profitability],
                   RSLPP.[Profitability],
                   RSLPP.[SplitsAll],
                   RSLPP.[SplitsAll],
                   RSLPP.[SplitsAllUsagePercentage],
                   RSLPP.[SplitsAllUsagePercentage],
                   RSLPP.[PickupCount],
                   RSLPP.[PickupCount],
                   RSLPP.[DeliveryCount],
                   RSLPP.[DeliveryCount],
                   RSLPP.[DockAdjustment],
                   RSLPP.[DockAdjustment],
                   RSLPP.[Margin],
                   RSLPP.[Margin],
                   RSLPP.[Density],
                   RSLPP.[Density],
                   RSLPP.[PickupCost],
                   RSLPP.[PickupCost],
                   RSLPP.[DeliveryCost],
                   RSLPP.[DeliveryCost],
                   RSLPP.[AccessorialsValue],
                   RSLPP.[AccessorialsValue],
                   RSLPP.[AccessorialsPercentage],
                   RSLPP.[AccessorialsPercentage],
                   0,
                   @ContextID,
                   GETUTCDATE()
            FROM dbo.RequestSectionLanePricingPoint RSLPP
                     INNER JOIN dbo.RequestSectionLane RSL ON RSLPP.RequestSectionLaneID = RSL.RequestSectionLaneID
                     INNER JOIN dbo.RequestSection RS ON RSL.RequestSectionID = RS.RequestSectionID
            WHERE RS.RequestLaneID = @RequestLaneID
        END;


WITH A AS
         (
             SELECT *
             FROM dbo.RequestSectionLane_Staging RSLS
             WHERE RSLS.RequestLaneID = @RequestLaneID
               AND RSLS.RequestSectionID = @RequestSectionID
               AND RSLS.ContextID = @ContextID
               AND (
                     ((@LaneStatusName = 'None') OR (@LaneStatusName = 'New' AND [IsPublished] = 0) OR
                      (@LaneStatusName = 'Changed' AND [IsEdited] = 1) OR
                      (@LaneStatusName = 'Duplicated' AND [IsDuplicate] = 1) OR
                      (@LaneStatusName = 'DoNotMeetCommitment' AND [DoNotMeetCommitment] = 1))
                     AND ((@OrigPointTypeName = 'None') OR
                          (@OrigPointTypeName = 'Country' AND OriginCountryID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Region' AND OriginRegionID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Province' AND OriginProvinceID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Terminal' AND OriginTerminalID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Basing Point' AND OriginBasingPointID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Service Point' AND OriginServicePointID = @OrigPointID)
                     OR
                          (@OrigPointTypeName = 'Postal Code' AND OriginPostalCodeID = @OrigPointID) OR
                          (@OrigPointTypeName = 'Point Type' AND OriginPointTypeID = @OrigPointID)
                         )
                     AND ((@DestPointTypeName = 'None') OR
                          (@DestPointTypeName = 'Country' AND DestinationCountryID = @DestPointID) OR
                          (@DestPointTypeName = 'Region' AND DestinationRegionID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Province' AND DestinationProvinceID = @DestPointID) OR
                          (@DestPointTypeName = 'Terminal' AND DestinationTerminalID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Basing Point' AND DestinationBasingPointID = @DestPointID) OR
                          (@DestPointTypeName = 'Service Point' AND DestinationServicePointID = @DestPointID)
                     OR
                          (@DestPointTypeName = 'Postal Code' AND DestinationPostalCodeID = @DestPointID) OR
                          (@DestPointTypeName = 'Point Type' AND DestinationPointTypeID = @DestPointID)
                         )
                 )
               AND ((@FilterCount = 0) OR
                    (@FilterCount > 0 AND RSLS.RequestSectionLaneID IN (SELECT ID FROM @RequestSectionLaneTableType)))
         )

UPDATE dbo.RequestSectionLane_Staging
SET IsUpdated             = 1,
    NewIsActive           = CASE WHEN @IsActive IS NOT NULL THEN @IsActive ELSE A.NewIsActive END,
    NewIsInactiveViewable = CASE
                                WHEN @IsInactiveViewable IS NOT NULL THEN @IsInactiveViewable
                                ELSE A.NewIsInactiveViewable END,
    NewIsBetween          = CASE WHEN @IsBetween IS NOT NULL THEN @IsBetween ELSE A.NewIsBetween END,

    NewCost               = CASE
                                WHEN @RateTable IS NOT NULL AND @RateTable = 'cost' AND @OperationName IS NOT NULL AND
                                     @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL
                                    THEN dbo.RequestSectionLane_Modify_RateTable(A.NewCost, @WeightBreak,
                                                                                 @OperationName, @Multiplier)
                                ELSE A.NewCost END,
-- 	NewCommitment = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'commitment' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewCommitment, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewCommitment END,


    NewCommitment         = CASE
                                WHEN @RateValue IS NOT NULL AND @RateTable = 'commitment' THEN @RateValue
                                ELSE A.NewCommitment END,
    NewDrRate             = CASE
                                WHEN @RateValue IS NOT NULL AND @RateTable = 'dr_rate' THEN @RateValue
                                ELSE A.NewDrRate END,
    NewCustomerRate       = CASE
                                WHEN @RateValue IS NOT NULL AND @RateTable = 'customer_rate' THEN @RateValue
                                ELSE A.NewCustomerRate END,
    NewPartnerRate        = CASE
                                WHEN @RateValue IS NOT NULL AND @RateTable = 'partner_rate' THEN @RateValue
                                ELSE A.NewPartnerRate END,
    NewCustomerDiscount   = CASE
                                WHEN @RateValue IS NOT NULL AND @RateTable = 'customer_discount' THEN @RateValue
                                ELSE A.NewCustomerDiscount END,
    NewPartnerDiscount    = CASE
                                WHEN @RateValue IS NOT NULL AND @RateTable = 'partner_discount' THEN @RateValue
                                ELSE A.NewPartnerDiscount END


-- 	NewProfitability = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'profitability' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewProfitability, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewProfitability END,
-- 	NewMargin = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'margin' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewMargin, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewMargin END,
-- 	NewDensity = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'density' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewDensity, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewDensity END,
-- 	NewPickupCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewPickupCost, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewPickupCost END,
-- 	NewDeliveryCost = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_cost' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewDeliveryCost, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewDeliveryCost END,
-- 	NewAccessorialsValue = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_value' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewAccessorialsValue, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewAccessorialsValue END,
-- 	NewAccessorialsPercentage = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'accessorials_percentage' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL AND @WeightBreakLowerBound IS NOT NULL THEN dbo.RequestSectionLane_Modify_RateTable(A.NewAccessorialsPercentage, @WeightBreak, @OperationName, @Multiplier) ELSE A.NewAccessorialsPercentage END,
-- 	NewPickupCount = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'pickup_count' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(A.NewPickupCount, @OperationName, @Multiplier) ELSE A.NewPickupCount END,
-- 	NewDeliveryCount = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'delivery_count' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(A.NewDeliveryCount, @OperationName, @Multiplier) ELSE A.NewDeliveryCount END,
-- 	NewDockAdjustment = CASE WHEN @RateTable IS NOT NULL AND @RateTable = 'dock_adjustment' AND @OperationName IS NOT NULL AND @Multiplier IS NOT NULL THEN dbo.RequestSectionLane_Modify_Rate(A.NewDockAdjustment, @OperationName, @Multiplier) ELSE A.NewDockAdjustment END
    FROM A
WHERE dbo.RequestSectionLane_Staging.RequestLaneID = A.RequestLaneID
  AND dbo.RequestSectionLane_Staging.RequestSectionID = A.RequestSectionID
  AND dbo.RequestSectionLane_Staging.ContextID = A.ContextID
  AND dbo.RequestSectionLane_Staging.RequestSectionLaneID = A.RequestSectionLaneID
    IF (@MicroSave IS NOT NULL AND @MicroSave = 1) OR (@MacroSave IS NOT NULL AND @MacroSave = 1)
        BEGIN
            ;

            WITH B AS
                     (
                         SELECT *
                         FROM dbo.RequestSectionLane_Staging
                         WHERE ContextID = @ContextID
                           AND IsUpdated = 1
                     )

            Update dbo.RequestSectionLane
            SET Cost                     = B.NewCost,
                [DoNotMeetCommitment]    = 0,
                [Commitment]             = B.[NewCommitment],
                [CustomerRate]           = B.[NewCustomerRate],
                [CustomerDiscount]       = B.[NewCustomerDiscount],
                [DrRate]                 = B.[NewDrRate],
                [PartnerRate]            = B.[NewPartnerRate],
                [PartnerDiscount]        = B.[NewPartnerDiscount],
                [Profitability]          = B.[NewProfitability],
                [PickupCount]            = B.[NewPickupCount],
                [DeliveryCount]          = B.[NewDeliveryCount],
                [DockAdjustment]         = B.[NewDockAdjustment],
                [Margin]                 = B.[NewMargin],
                [Density]                = B.[NewDensity],
                [PickupCost]             = B.[NewPickupCost],
                [DeliveryCost]           = B.[NewDeliveryCost],
                [AccessorialsValue]      = B.[NewAccessorialsValue],
                [AccessorialsPercentage] = B.[NewAccessorialsPercentage],
                IsActive                 = B.NewIsActive,
                IsInactiveViewable       = B.NewIsInactiveViewable,
                IsBetween                = B.NewIsBetween,
                IsEdited                 = 1
            FROM B
            WHERE dbo.RequestSectionLane.RequestSectionID = B.RequestSectionID
              AND dbo.RequestSectionLane.RequestSectionLaneID = B.RequestSectionLaneID;

            WITH C AS
                     (
                         SELECT DISTINCT RequestSectionLaneID
                         FROM dbo.RequestSectionLanePricingPoint_Staging
                         WHERE ContextID = @ContextID
                           AND IsUpdated = 1
                     )

            UPDATE dbo.RequestSectionLane
            SET IsEdited = 1
            WHERE dbo.RequestSectionLane.RequestSectionLaneID IN (SELECT RequestSectionLaneID FROM C)

            EXEC [dbo].[RequestSectionLanePricingPoint_Staging_Update] @RequestSectionID, @ContextID, 'None', 0, 'None',
                 0, 'None', '[]', '[]', NULL, NULL, 'None', NULL, @MicroSave, @MacroSave

            DECLARE @RequestSectionLaneTableTypeID IDTableType;

            INSERT INTO @RequestSectionLaneTableTypeID
            (
                ID
            )
            SELECT DISTINCT RequestSectionLaneID
            FROM (SELECT RequestSectionLaneID
                  FROM dbo.RequestSectionLane_Staging
                  WHERE ContextID = @ContextID
                    AND IsUpdated = 1
                  UNION
                  SELECT DISTINCT RequestSectionLaneID
                  FROM dbo.RequestSectionLanePricingPoint_Staging
                  WHERE ContextID = @ContextID
                    AND IsUpdated = 1) AS D

            --EXEC [dbo].[RequestSectionLane_History_Update] @RequestSectionLaneTableTypeID
            EXEC dbo.RequestLane_Count @RequestLaneID

            IF (@MacroSave IS NOT NULL AND @MacroSave = 1)
                BEGIN
                    DECLARE @RequestLaneVersionID BIGINT;

                    SELECT @RequestLaneVersionID = RequestLaneVersionID
                    FROM dbo.RequestLane_History RLH
                    WHERE RLH.RequestLaneID = @RequestLaneID
                      AND RLH.IsLatestVersion = 1

                    DECLARE @RequestHistory TABLE
                                            (
                                                [VersionNum]                   INT            NOT NULL,
                                                [BaseVersion]                  INT            NULL,
                                                [IsLatestVersion]              BIT            NOT NULL,
                                                [UpdatedOn]                    DATETIME2(7)   NOT NULL,
                                                [UpdatedBy]                    NVARCHAR(50)   NOT NULL,
                                                [Comments]                     NVARCHAR(4000) NOT NULL,
                                                [IsActive]                     BIT            NOT NULL,
                                                [IsInactiveViewable]           BIT            NOT NULL,
                                                [RequestVersionID]             BIGINT         NOT NULL,
                                                [RequestNumber]                NVARCHAR(32)   NOT NULL,
                                                [RequestCode]                  NVARCHAR(32)   NOT NULL,
                                                [InitiatedOn]                  DATETIME2(7)   NOT NULL,
                                                [SubmittedOn]                  DATETIME2(7)   NULL,
                                                [IsValidData]                  BIT            NOT NULL,
                                                [InitiatedByVersion]           BIGINT         NOT NULL,
                                                [RequestID]                    BIGINT         NOT NULL,
                                                [RequestAccessorialsVersionID] BIGINT         NULL,
                                                [RequestInformationVersionID]  BIGINT         NULL,
                                                [RequestLaneVersionID]         BIGINT         NULL,
                                                [RequestProfileVersionID]      BIGINT         NULL,
                                                [SubmittedByVersion]           BIGINT         NULL,
                                                [IsReview]                     BIT            NOT NULL
                                            )
                    INSERT INTO @RequestHistory
                    ([VersionNum],
                     [BaseVersion],
                     [IsLatestVersion],
                     [UpdatedOn],
                     [UpdatedBy],
                     [Comments],
                     [IsActive],
                     [IsInactiveViewable],
                     [RequestVersionID],
                     [RequestNumber],
                     [RequestCode],
                     [InitiatedOn],
                     [SubmittedOn],
                     [IsValidData],
                     [InitiatedByVersion],
                     [RequestID],
                     [RequestAccessorialsVersionID],
                     [RequestInformationVersionID],
                     [RequestLaneVersionID],
                     [RequestProfileVersionID],
                     [SubmittedByVersion],
                     [IsReview])
                    SELECT [VersionNum],
                           [BaseVersion],
                           [IsLatestVersion],
                           [UpdatedOn],
                           [UpdatedBy],
                           [Comments],
                           RH.[IsActive],
                           RH.[IsInactiveViewable],
                           [RequestVersionID],
                           RH.[RequestNumber],
                           RH.[RequestCode],
                           RH.[InitiatedOn],
                           RH.[SubmittedOn],
                           RH.[IsValidData],
                           [InitiatedByVersion],
                           RH.[RequestID],
                           RH.[RequestAccessorialsVersionID],
                           [RequestInformationVersionID],
                           [RequestLaneVersionID],
                           [RequestProfileVersionID],
                           [SubmittedByVersion],
                           RH.[IsReview]
                    FROM dbo.Request_History RH
                             INNER JOIN dbo.Request R ON RH.[RequestID] = R.[RequestID] AND RH.[IsLatestVersion] = 1 AND
                                                         R.RequestLaneID = @RequestLaneID

                    UPDATE dbo.Request_History
                    SET [IsLatestVersion] = 0
                    WHERE dbo.Request_History.[RequestVersionID] IN (SELECT [RequestVersionID] FROM @RequestHistory)

                    INSERT INTO dbo.Request_History
                    ([VersionNum],
                     [IsLatestVersion],
                     [UpdatedOn],
                     [UpdatedBy],
                     [Comments],
                     [IsActive],
                     [IsInactiveViewable],
                     [RequestNumber],
                     [RequestCode],
                     [InitiatedOn],
                     [SubmittedOn],
                     [IsValidData],
                     [InitiatedByVersion],
                     [RequestID],
                     [RequestAccessorialsVersionID],
                     [RequestInformationVersionID],
                     [RequestLaneVersionID],
                     [RequestProfileVersionID],
                     [SubmittedByVersion],
                     [IsReview])
                    SELECT [VersionNum] + 1,
                           1,
                           GETUTCDATE(),
                           '',
                           '',
                           [IsActive],
                           [IsInactiveViewable],
                           [RequestNumber],
                           [RequestCode],
                           [InitiatedOn],
                           [SubmittedOn],
                           [IsValidData],
                           [InitiatedByVersion],
                           [RequestID],
                           [RequestAccessorialsVersionID],
                           [RequestInformationVersionID],
                           @RequestLaneVersionID,
                           [RequestProfileVersionID],
                           [SubmittedByVersion],
                           [IsReview]
                    FROM @RequestHistory
                END

            DELETE
            FROM dbo.RequestSectionLane_Staging
            WHERE RequestLaneID = @RequestLaneID
              AND ContextID = @ContextID

            --DELETE FROM dbo.RequestSectionLanePricingPoint_Staging
            --WHERE RequestLaneID = @RequestLaneID AND ContextID = @ContextID

        END

    COMMIT TRAN

    RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestSection_Copy]
	@RequestSectionTableType_Pair     RequestSectionTableType_Pair READONLY,
	@RequestID BIGINT,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL

AS

SET NOCOUNT ON;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Duplicating lanes.';

BEGIN TRAN

	DECLARE @RequestSectionLaneCost TABLE
	(
		[RequestSectionID] BIGINT NOT NULL,
		[Cost] NVARCHAR(MAX) NOT NULL
	)

	INSERT INTO @RequestSectionLaneCost
	(
		[RequestSectionID],
		[Cost]
	)
	SELECT RS.[SourceRequestSectionID],
		dbo.GetRequestSectionLaneDefaultCost(RS.[DestinationRequestSectionID])
	FROM @RequestSectionTableType_Pair RS

	DECLARE @RequestSectionLaneTableType RequestSectionLaneTableType;

	INSERT INTO @RequestSectionLaneTableType
	(
		[IsActive],
		[IsInactiveViewable],
		[RequestSectionID],
		[LaneNumber],
		[IsPublished],
		[IsEdited],
		[IsDuplicate],
		[IsBetween],
		[IsLaneGroup],
		[OriginProvinceID],
		[OriginProvinceCode],
		[OriginRegionID],
		[OriginRegionCode],
		[OriginCountryID],
		[OriginCountryCode],
		[OriginTerminalID],
		[OriginTerminalCode],
		[OriginZoneID],
		[OriginZoneName],
		[OriginBasingPointID],
		[OriginBasingPointName],
		[OriginServicePointID],
		[OriginServicePointName],
		[OriginPostalCodeID],
		[OriginPostalCodeName],
		[OriginPointTypeID],
		[OriginPointTypeName],
		[OriginCode],
		[DestinationProvinceID],
		[DestinationProvinceCode],
		[DestinationRegionID],
		[DestinationRegionCode],
		[DestinationCountryID],
		[DestinationCountryCode],
		[DestinationTerminalID],
		[DestinationTerminalCode],
		[DestinationZoneID],
		[DestinationZoneName],
		[DestinationBasingPointID],
		[DestinationBasingPointName],
		[DestinationServicePointID],
		[DestinationServicePointName],
		[DestinationPostalCodeID],
		[DestinationPostalCodeName],
		[DestinationPointTypeID],
		[DestinationPointTypeName],
		[DestinationCode],
		[LaneHashCode],
		[BasingPointHashCode],
		[Cost],
		[RequestSectionLaneID],
		[DoNotMeetCommitment],
		[Commitment],
		[CustomerRate],
		[CustomerDiscount],
		[DrRate],
		[PartnerRate],
		[PartnerDiscount],
		[Profitability],
		[PickupCount],
		[DeliveryCount],
		[DockAdjustment],
		[Margin],
		[Density],
		[PickupCost],
		[DeliveryCost],
		[AccessorialsValue],
		[AccessorialsPercentage]
	)
	SELECT [IsActive],
		[IsInactiveViewable],
		RS.[DestinationRequestSectionID],
		REPLACE(NEWID(), '-', ''),
		0,
		0,
		0,
		[IsBetween],
		[IsLaneGroup],
		[OriginProvinceID],
		[OriginProvinceCode],
		[OriginRegionID],
		[OriginRegionCode],
		[OriginCountryID],
		[OriginCountryCode],
		[OriginTerminalID],
		[OriginTerminalCode],
		[OriginZoneID],
		[OriginZoneName],
		[OriginBasingPointID],
		[OriginBasingPointName],
		[OriginServicePointID],
		[OriginServicePointName],
		[OriginPostalCodeID],
		[OriginPostalCodeName],
		[OriginPointTypeID],
		[OriginPointTypeName],
		[OriginCode],
		[DestinationProvinceID],
		[DestinationProvinceCode],
		[DestinationRegionID],
		[DestinationRegionCode],
		[DestinationCountryID],
		[DestinationCountryCode],
		[DestinationTerminalID],
		[DestinationTerminalCode],
		[DestinationZoneID],
		[DestinationZoneName],
		[DestinationBasingPointID],
		[DestinationBasingPointName],
		[DestinationServicePointID],
		[DestinationServicePointName],
		[DestinationPostalCodeID],
		[DestinationPostalCodeName],
		[DestinationPointTypeID],
		[DestinationPointTypeName],
		[DestinationCode],
		[LaneHashCode],
		[BasingPointHashCode],
		RSLC.Cost,
		[RequestSectionLaneID],
		0,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		NULL,
		NULL,
		NULL,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost,
		RSLC.Cost
	FROM dbo.RequestSectionLane RSL
	INNER JOIN @RequestSectionTableType_Pair RS ON RSL.RequestSectionID = RS.[SourceRequestSectionID]
	INNER JOIN @RequestSectionLaneCost RSLC ON RS.[SourceRequestSectionID] = RSLC.RequestSectionID
	WHERE RSL.IsActive = 1 AND RSL.IsInactiveViewable = 1

	DECLARE @RequestLaneID BIGINT;
	SELECT @RequestLaneID = RequestLaneID FROM dbo.Request WHERE RequestID = @RequestID
	EXEC dbo.RequestSectionLane_Insert_Bulk @RequestSectionLaneTableType, @RequestLaneID

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[RequestStatusType_Insert_Bulk]
	@RequestStatusTypeTableType RequestStatusTypeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @RequestStatusTypeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RequestStatusType table
(
	[RequestStatusTypeID] [bigint] NOT NULL,
	[RequestStatusTypeName] [nvarchar](50) NOT NULL,
	[NextRequestStatusType]			  NVARCHAR (MAX) NULL,
	[AssignedPersona]           NVARCHAR (50) NULL,
	[Editor]           NVARCHAR (50) NULL,
	[QueuePersonas]           NVARCHAR (MAX) NULL,
	[IsSecondary] BIT           NULL,
	[IsFinal] BIT           NULL
)

BEGIN TRAN

INSERT INTO [dbo].[RequestStatusType]
(
	[RequestStatusTypeName],
	[NextRequestStatusType],
	[AssignedPersona],
	[Editor],
	[QueuePersonas],
	[IsSecondary],
	[IsFinal],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.RequestStatusTypeID,
	 INSERTED.RequestStatusTypeName,
	 INSERTED.[NextRequestStatusType],
	 INSERTED.[AssignedPersona],
	 INSERTED.[Editor],
	 INSERTED.[QueuePersonas],
	 INSERTED.[IsSecondary],
	 INSERTED.[IsFinal]
INTO @RequestStatusType
(
	[RequestStatusTypeID],
	[RequestStatusTypeName],
	[NextRequestStatusType],
	[AssignedPersona],
	[Editor],
	[QueuePersonas],
	[IsSecondary],
	[IsFinal]
)
SELECT [RequestStatusTypeName],
	[NextRequestStatusType],
	[AssignedPersona],
	[Editor],
	[QueuePersonas],
	[IsSecondary],
	[IsFinal],
	1,
	1
FROM @RequestStatusTypeTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RequestStatusType_History]
(
	[RequestStatusTypeID],
	[RequestStatusTypeName],
	[NextRequestStatusType],
	[AssignedPersona],
	[Editor],
	[QueuePersonas],
	[IsSecondary],
	[IsFinal],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [RequestStatusTypeID],
	 [RequestStatusTypeName],
	 [NextRequestStatusType],
	 [AssignedPersona],
	 [Editor],
	 [QueuePersonas],
	 [IsSecondary],
	 [IsFinal],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @RequestStatusType

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestStatus_Insert_Bulk]
	@RequestStatusTableType RequestStatusTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @RequestStatusTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RequestStatus table
(
	[RequestStatusID]  BIGINT NOT NULL,
    [RequestID]        BIGINT NOT NULL,
	[SalesRepresentativeID]        BIGINT NOT NULL,
	[PricingAnalystID]        BIGINT NULL,
	[CurrentEditorID]        BIGINT NOT NULL,
	[RequestStatusTypeID]        BIGINT NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[RequestStatus]
(
	[RequestID],
	[SalesRepresentativeID],
	[PricingAnalystID],
	[CurrentEditorID],
	[RequestStatusTypeID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.RequestStatusID,
	 INSERTED.[RequestID],
	 INSERTED.[SalesRepresentativeID],
	 INSERTED.[PricingAnalystID],
	 INSERTED.[CurrentEditorID],
	 INSERTED.[RequestStatusTypeID]
INTO @RequestStatus
(
	[RequestStatusID],
	[RequestID],
	[SalesRepresentativeID],
	[PricingAnalystID],
	[CurrentEditorID],
	[RequestStatusTypeID]
)
SELECT RS.[RequestID],
	RS.[SalesRepresentativeID],
	RS.[PricingAnalystID],
	RS.[CurrentEditorID],
	T.[RequestStatusTypeID],
	1,
	1
FROM @RequestStatusTableType RS
INNER JOIN dbo.[RequestStatusType] T ON RS.[RequestStatusTypeName] = T.[RequestStatusTypeName]

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RequestStatus_History]
(
	[RequestStatusID],
	[RequestVersionID],
	[SalesRepresentativeVersionID],
	[PricingAnalystVersionID],
	[CurrentEditorVersionID],
	[RequestStatusTypeVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT 	RS.[RequestStatusID],
	Q.[RequestVersionID],
	S.[UserVersionID],
	P.[UserVersionID],
	E.[UserVersionID],
	T.[RequestStatusTypeVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @RequestStatus RS
INNER JOIN dbo.[Request_History] Q ON RS.[RequestID] = Q.[RequestID] AND Q.IsLatestVersion = 1
INNER JOIN dbo.[User_History] S ON RS.[SalesRepresentativeID] = S.UserID AND S.IsLatestVersion = 1
INNER JOIN dbo.[User_History] E ON RS.[CurrentEditorID] = E.UserID AND E.IsLatestVersion = 1
INNER JOIN dbo.[RequestStatusType_History] T ON RS.[RequestStatusTypeID] = T.[RequestStatusTypeID] AND T.IsLatestVersion = 1
LEFT JOIN dbo.[User_History] P ON RS.[PricingAnalystID] = P.UserID AND P.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[RequestType_Insert_Bulk]
	@RequestTypeTableType RequestTypeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @RequestTypeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @RequestType table
(
	[RequestTypeID] [bigint] NOT NULL,
	[RequestTypeName] [nvarchar](50) NOT NULL,
	[ApplyToCustomerUnderReview] BIT NOT NULL,
	[ApplyToRevision] BIT NOT NULL,
	[AllowSalesCommitment] BIT NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[RequestType]
(
	[RequestTypeName],
	[ApplyToCustomerUnderReview],
	[ApplyToRevision],
	[AllowSalesCommitment],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.RequestTypeID,
	 INSERTED.RequestTypeName,
	 INSERTED.[ApplyToCustomerUnderReview],
	 INSERTED.[ApplyToRevision],
	 INSERTED.[AllowSalesCommitment]
INTO @RequestType
(
	[RequestTypeID],
	[RequestTypeName],
	[ApplyToCustomerUnderReview],
	[ApplyToRevision],
	[AllowSalesCommitment]
)
SELECT [RequestTypeName],
	[ApplyToCustomerUnderReview],
	[ApplyToRevision],
	[AllowSalesCommitment],
	1,
	1
FROM @RequestTypeTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[RequestType_History]
(
	[RequestTypeID],
	[RequestTypeName],
	[ApplyToCustomerUnderReview],
	[ApplyToRevision],
	[AllowSalesCommitment],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [RequestTypeID],
	 [RequestTypeName],
	 [ApplyToCustomerUnderReview],
	[ApplyToRevision],
	[AllowSalesCommitment],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @RequestType

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE PROCEDURE [dbo].[Request_By_Account_Select] @UserID BIGINT,
                                                   @ServiceLevelID BIGINT,
                                                   @AccountID BIGINT = NULL,
                                                   @SpeedSheetName varchar(100) =NULL,
                                                   @UniType varchar(30)=NULL,
                                                   @LanguageName varchar(2)=NULL
AS

    SET NOCOUNT ON;

DECLARE @RequestID BIGINT;
DECLARE @IsNewRequest BIT;
DECLARE @LanguageId BIGINT = (select LanguageId from Language where  LanguageCode= @LanguageName)

    EXEC [dbo].[Request_Create_Select] @UserID,
         @ServiceLevelID,
         @AccountID,
         @RequestID output,
         @IsNewRequest output,
         @SpeedSheetName,
         @UniType,
        @LanguageId;

    EXEC [dbo].[Request_By_ID_Select] @RequestID, @IsNewRequest;

    RETURN 1
go

CREATE
  PROCEDURE [dbo].[Request_By_ID_Select] @RequestID BIGINT,
@IsNewRequest BIT AS
SET NOCOUNT ON;
WITH UM AS (
	SELECT DISTINCT UT.UserManagerID,
		U.UserName
	FROM dbo.[User] U
		INNER JOIN dbo.[User] UT ON U.UserID = UT.UserManagerID
),
UT AS (
	SELECT U.UserID,
		U.UserName,
		UM.UserName AS UserManagerName
	FROM dbo.[User] U
		LEFT JOIN UM ON U.UserManagerID = UM.UserManagerID
)
SELECT CAST(
		(
			SELECT *
			FROM (
					SELECT R.RequestID AS request_id,
						R.RequestNumber AS request_number,
						R.RequestCode AS request_code,
						R.[IsReview] AS is_review,
						R.IsActive AS is_active,
						R.IsInactiveViewable AS is_inactive_viewable,
						R.IsValidData AS is_valid_data,
						R.InitiatedOn AS initiated_on,
						I.UserName AS initiated_by,
						R.SubmittedOn AS submitted_on,
						S.UserName AS submitted_by,
						SR.UserName AS sales_rep,
						SR.UserManagerName AS sales_manager,
						E.UserName AS current_editor,
						RH.VersionNum AS version_num,
						(
							SELECT *
							FROM (
									SELECT RIC.RequestInformationID AS request_information_id,
										RIC.CustomerID AS customer,
										RIC.RequestTypeID AS request_type,
										RIC.LanguageID AS [language],
										RIC.CurrencyID AS [currency],
										RIC.RequestNumber AS request_number,
										RIC.IsValidData AS is_valid_data,
										RIC.IsNewBusiness AS is_new_business,
										CASE
											WHEN A.AccountID IS NULL THEN 'New'
											ELSE 'Expanded'
										END AS business_type_name,
										RIC.IsPayingByCreditCard AS is_paying_by_credit_card,
										RIC.IsExtendedPayment AS is_extended_payment,
										RIC.ExtendedPaymentDays AS extended_payment_days,
										RIC.ExtendedPaymentTermsMargin AS extended_payment_terms_margin,
										RIC.[Priority] AS [priority],
										RIC.EffectiveDate AS effective_date,
										RIC.ExpiryDate AS expiry_date
								) AS G FOR JSON AUTO,
								WITHOUT_ARRAY_WRAPPER
						) AS request_information,
						(
							SELECT *
							FROM (
									SELECT C.CustomerID AS customer_id,
										C.AccountID AS account,
										NT.ParentAccountID AS parent_account_id,
										N.AccountNumber AS parent_account_number,
										N.AccountName AS parent_account_name,
										A.AccountName AS account_name,
										A.AccountNumber AS account_number,
										C.ServiceLevelID AS service_level_id,
										SL.ServiceLevelCode AS service_level_code,
										SO.ServiceOfferingID AS service_offering_id,
										SO.ServiceOfferingName AS service_offering_name,
										C.CityID AS city,
										Y.CityName AS city_name,
										Y.ProvinceID AS province_id,
										C.CustomerName AS customer_name,
										C.CustomerAlias AS customer_alias,
										C.CustomerAddressLine1 AS customer_address_line_1,
										C.CustomerAddressLine2 AS customer_address_line_2,
										C.PostalCode AS postal_code,
										C.ContactName AS contact_name,
										C.ContactTitle AS contact_title,
										C.Phone AS phone,
										C.Email AS email,
										C.Website AS website,
										C.IsValidData AS is_valid_data
								) AS H FOR JSON AUTO,
								WITHOUT_ARRAY_WRAPPER
						) AS customer,
						@IsNewRequest AS is_new_request
					FROM dbo.Request R
						INNER JOIN dbo.RequestStatus RS ON R.RequestID = RS.RequestID
						INNER JOIN dbo.Request_History RH ON R.RequestID = RH.RequestID
						AND RH.IsLatestVersion = 1
						INNER JOIN dbo.RequestInformation RIC ON R.RequestInformationID = RIC.RequestInformationID
						INNER JOIN dbo.Customer C ON RIC.CustomerID = C.CustomerID
						INNER JOIN dbo.ServiceLevel SL ON C.ServiceLevelID = SL.ServiceLevelID
						INNER JOIN dbo.ServiceOffering SO ON SL.ServiceOfferingID = SO.ServiceOfferingID
						INNER JOIN UT I ON R.InitiatedBy = I.UserID
						LEFT JOIN UT SR ON RS.SalesRepresentativeID = SR.UserID
						LEFT JOIN UT E ON RS.CurrentEditorID = E.UserID
						LEFT JOIN dbo.Account A ON C.AccountID = A.AccountID
						LEFT JOIN dbo.AccountTree NT ON C.AccountID = NT.AccountID
						LEFT JOIN dbo.Account N ON NT.ParentAccountID = N.AccountID
						LEFT JOIN dbo.City Y ON C.CityID = Y.CityID
						LEFT JOIN UT S ON R.SubmittedBy = S.UserID
					WHERE R.RequestID = @RequestID
				) AS Q FOR JSON AUTO,
				WITHOUT_ARRAY_WRAPPER
		) AS VARCHAR(MAX)
	) RETURN 1
go

CREATE   PROCEDURE [dbo].[Request_By_Number_Select]
	@RequestNumber VARCHAR(32)
AS

SET NOCOUNT ON;

DECLARE @RequestID BIGINT

SELECT @RequestID = RequestID
FROM dbo.Request
WHERE RequestNumber = @RequestNumber;

EXEC [dbo].[Request_By_ID_Select] @RequestID, 0;

RETURN 1
go

CREATE PROCEDURE [dbo].[Request_Create_Select] @UserID BIGINT,
                                               @ServiceLevelID BIGINT,
                                               @AccountID BIGINT = NULL,
                                               @OutputRequestID BIGINT output,
                                               @IsNewRequest BIT output,
                                               @SpeedSheetName varchar(100) =NULL,
                                               @UniType varchar(30)=NULL,
                                               @LanguageID BIGINT=NULL
AS

    SET NOCOUNT ON;

    BEGIN TRAN

DECLARE @CustomerID BIGINT;
    EXEC [dbo].[Customer_Create_Select] @ServiceLevelID, @AccountID, @CustomerID output

DECLARE @RequestID BIGINT, @RequestNumber NVARCHAR(32);

SELECT @RequestNumber = R.RequestNumber
FROM dbo.RequestInformation R
WHERE R.CustomerID = @CustomerID
    IF @RequestNumber IS NOT NULL
        BEGIN
            SELECT @RequestID = R.RequestID
            FROM dbo.Request R
            WHERE R.RequestNumber = @RequestNumber

            SELECT @IsNewRequest = 0;
        END
    ELSE
        BEGIN
            SELECT @IsNewRequest = 1;
            DECLARE @PersonaName NVARCHAR(50), @UpdatedBy nvarchar(50), @Comments nvarchar(4000);

            SELECT @PersonaName = P.PersonaName
            FROM dbo.[User] U
                     INNER JOIN dbo.Persona P ON U.PersonaID = P.PersonaID
            WHERE UserID = @UserID;

            EXEC dbo.Request_Insert
                 @UserID,
                 @UpdatedBy,
                 @Comments,
                 @RequestID output,
                 @RequestNumber output,
                 @SpeedSheetName,
                 @UniType


            DECLARE @RequestInformationID BIGINT;
            EXEC dbo.RequestInformation_Insert @RequestNumber, @CustomerID, @UpdatedBy, @Comments, @LanguageID,
                 @RequestInformationID output

            DECLARE @RequestProfileID BIGINT;
            EXEC dbo.RequestProfile_Insert @RequestNumber, @UpdatedBy, @Comments, @RequestProfileID output

            DECLARE @RequestAccessorialsID BIGINT;
            EXEC dbo.RequestAccessorials_Insert @RequestNumber, @UpdatedBy, @Comments, @RequestAccessorialsID output

            DECLARE @RequestLaneID BIGINT;
            EXEC dbo.RequestLane_Insert @RequestNumber, @UpdatedBy, @Comments, @RequestLaneID output

            UPDATE dbo.Request
            SET RequestInformationID  = @RequestInformationID,
                RequestProfileID      = @RequestProfileID,
                RequestAccessorialsID = @RequestAccessorialsID,
                RequestLaneID         = @RequestLaneID
            WHERE dbo.Request.RequestID = @RequestID

            DECLARE @RequestInformationVersionID BIGINT;
            SELECT @RequestInformationVersionID = RequestInformationVersionID
            FROM dbo.RequestInformation_History
            WHERE RequestInformationID = @RequestInformationID
              AND IsLatestVersion = 1;

            DECLARE @RequestProfileVersionID BIGINT;
            SELECT @RequestProfileVersionID = RequestProfileVersionID
            FROM dbo.RequestProfile_History
            WHERE RequestProfileID = @RequestProfileID
              AND IsLatestVersion = 1;

            DECLARE @RequestAccessorialsVersionID BIGINT;
            SELECT @RequestAccessorialsVersionID = RequestAccessorialsVersionID
            FROM dbo.RequestAccessorials_History
            WHERE RequestAccessorialsID = @RequestAccessorialsID
              AND IsLatestVersion = 1;

            DECLARE @RequestLaneVersionID BIGINT;
            SELECT @RequestLaneVersionID = RequestLaneVersionID
            FROM dbo.RequestLane_History
            WHERE RequestLaneID = @RequestLaneID
              AND IsLatestVersion = 1;

            UPDATE dbo.Request_History
            SET RequestInformationVersionID  = @RequestInformationVersionID,
                RequestProfileVersionID      = @RequestProfileVersionID,
                RequestAccessorialsVersionID = @RequestAccessorialsVersionID,
                RequestLaneVersionID         = @RequestLaneVersionID
            WHERE dbo.Request_History.RequestID = @RequestID
              AND dbo.Request_History.IsLatestVersion = 1

            DECLARE @RequestStatusTableType AS RequestStatusTableType;
            INSERT INTO @RequestStatusTableType
            ([RequestID],
             [SalesRepresentativeID],
             [PricingAnalystID],
             [CurrentEditorID],
             [RequestStatusTypeName])
            SELECT @RequestID,
                   @UserID,
                   CASE
                       WHEN @PersonaName = 'Pricing Analyst' OR @PersonaName = 'Pricing Manager' THEN @UserID
                       ELSE NULL END,
                   @UserID,
                   'RRF Initiated'
            EXEC [dbo].[RequestStatus_Insert_Bulk] @RequestStatusTableType

        END

    SET @OutputRequestID = (SELECT @RequestID);

    COMMIT TRAN

    RETURN 1
go

CREATE
  PROCEDURE [dbo].[Request_History_By_Number_Select] @RequestNumber VARCHAR(32),
@VersionNum INT AS
SET NOCOUNT ON;
WITH UM AS (
	SELECT UT.UserManagerVersionID,
		U.UserName
	FROM dbo.[User_History] U
		INNER JOIN dbo.[User_History] UT ON U.UserVersionID = UT.UserManagerVersionID
),
UT AS (
	SELECT U.UserVersionID,
		U.UserName,
		UM.UserName AS UserManagerName
	FROM dbo.[User_History] U
		LEFT JOIN UM ON U.UserManagerVersionID = UM.UserManagerVersionID
)
SELECT CAST(
		(
			SELECT *
			FROM (
					SELECT R.RequestID AS request_id,
						R.RequestNumber AS request_number,
						R.RequestCode AS request_code,
						R.[IsReview] AS is_review,
						R.IsActive AS is_active,
						R.IsInactiveViewable AS is_inactive_viewable,
						R.IsValidData AS is_valid_data,
						R.InitiatedOn AS initiated_on,
						I.UserName AS initiated_by,
						R.SubmittedOn AS submitted_on,
						B.UserName AS submitted_by,
						S.UserName AS sales_rep,
						S.UserManagerName AS sales_manager,
						E.UserName AS current_editor,
						R.VersionNum AS version_num,
						(
							SELECT *
							FROM (
									SELECT RIC.RequestInformationID AS request_information_id,
										C.CustomerID AS customer,
										YP.RequestTypeID AS request_type,
										L.LanguageID AS [language],
										Y.CurrencyID AS [currency],
										RIC.RequestNumber AS request_number,
										RIC.IsValidData AS is_valid_data,
										RIC.IsNewBusiness AS is_new_business,
										CASE
											WHEN A.AccountID IS NULL THEN 'New'
											ELSE 'Expanded'
										END AS business_type_name,
										RIC.IsPayingByCreditCard AS is_paying_by_credit_card,
										RIC.IsExtendedPayment AS is_extended_payment,
										RIC.ExtendedPaymentDays AS extended_payment_days,
										RIC.ExtendedPaymentTermsMargin AS extended_payment_terms_margin,
										RIC.[Priority] AS [priority],
										RIC.EffectiveDate AS effective_date,
										RIC.ExpiryDate AS expiry_date
								) AS G FOR JSON AUTO,
								WITHOUT_ARRAY_WRAPPER
						) AS request_information,
						(
							SELECT *
							FROM (
									SELECT C.CustomerID AS customer_id,
										A.AccountID AS account,
										N.AccountID AS parent_account_id,
										N.AccountNumber AS parent_account_number,
										N.AccountName AS parent_account_name,
										A.AccountName AS account_name,
										A.AccountNumber AS account_number,
										SL.ServiceLevelID AS service_level_id,
										SL.ServiceLevelCode AS service_level_code,
										SO.ServiceOfferingID AS service_offering_id,
										SO.ServiceOfferingName AS service_offering_name,
										TY.CityID AS city,
										TY.CityName AS city_name,
										VY.ProvinceID AS province_id,
										C.CustomerName AS customer_name,
										C.CustomerAlias AS customer_alias,
										C.CustomerAddressLine1 AS customer_address_line_1,
										C.CustomerAddressLine2 AS customer_address_line_2,
										C.PostalCode AS postal_code,
										C.ContactName AS contact_name,
										C.ContactTitle AS contact_title,
										C.Phone AS phone,
										C.Email AS email,
										C.Website AS website,
										C.IsValidData AS is_valid_data
								) AS H FOR JSON AUTO,
								WITHOUT_ARRAY_WRAPPER
						) AS customer
					FROM dbo.Request_History R
						LEFT JOIN UT I ON R.InitiatedByVersion = I.UserVersionID
						LEFT JOIN dbo.RequestStatus RST ON RST.RequestID = R.RequestID
						LEFT JOIN dbo.RequestStatus_History RS ON RST.RequestStatusID = RS.RequestStatusID
						AND RS.IsLatestVersion = 1
						LEFT JOIN dbo.RequestInformation_History RIC ON R.RequestInformationVersionID = RIC.RequestInformationVersionID
						LEFT JOIN dbo.Customer_History C ON RIC.CustomerVersionID = C.CustomerVersionID
						LEFT JOIN dbo.ServiceLevel_History SL ON C.ServiceLevelVersionID = SL.ServiceLevelVersionID
						LEFT JOIN dbo.ServiceOffering_History SO ON SL.ServiceOfferingVersionID = SO.ServiceOfferingVersionID
						LEFT JOIN UT AS S ON RS.SalesRepresentativeVersionID = S.USerVersionID
						LEFT JOIN UT AS E ON RS.CurrentEditorVersionID = E.USerVersionID
						LEFT JOIN dbo.Account_History A ON C.AccountVersionID = A.AccountVersionID
						LEFT JOIN dbo.AccountTree_History NT ON C.AccountVersionID = NT.AccountVersionID
						LEFT JOIN dbo.Account_History N ON NT.ParentAccountVersionID = N.AccountVersionID
						LEFT JOIN dbo.City_History TY ON C.CityVersionID = TY.CityVersionID
						LEFT JOIN dbo.Province_History VY ON TY.ProvinceVersionID = VY.ProvinceVersionID
						LEFT JOIN UT B ON R.SubmittedByVersion = B.USerVersionID
						LEFT JOIN dbo.Language_History L ON RIC.LanguageVersionID = L.LanguageVersionID
						LEFT JOIN dbo.Currency_History Y ON RIC.CurrencyVersionID = Y.CurrencyVersionID
						LEFT JOIN dbo.RequestType_History YP ON RIC.RequestTypeVersionID = YP.RequestTypeVersionID
					WHERE R.RequestNumber = @RequestNumber
						AND R.VersionNum = @VersionNum
				) AS Q FOR JSON AUTO,
				WITHOUT_ARRAY_WRAPPER
		) AS VARCHAR(MAX)
	) RETURN 1
go

CREATE PROCEDURE [dbo].[Request_Insert] @InitiatedBy BIGINT,
                                        @UpdatedBy nvarchar(50) = NULL,
                                        @Comments nvarchar(4000) = NULL,
                                        @RequestID BIGINT output,
                                        @RequestNumber NVARCHAR(32) output,
                                        @SpeedSheetName varchar(100) =NULL,
                                        @UniType varchar(30)=NULL
AS

    SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT
    IF @UpdatedBy IS NULL
        SELECT @UpdatedBy = 'P&C System';

    IF @Comments IS NULL
        SELECT @Comments = 'Created first version.';

DECLARE
    @Request table
             (
                 [RequestID]             BIGINT        NOT NULL,
                 [RequestNumber]         NVARCHAR(32)  NOT NULL,
                 [RequestCode]           NVARCHAR(32)  NOT NULL,
                 [RequestInformationID]  BIGINT        NULL,
                 [RequestProfileID]      BIGINT        NULL,
                 [RequestLaneID]         BIGINT        NULL,
                 [RequestAccessorialsID] BIGINT        NULL,
                 [InitiatedOn]           DATETIME2(7)  NOT NULL,
                 [InitiatedBy]           BIGINT        NOT NULL,
                 [SubmittedOn]           DATETIME2(7)  NULL,
                 [SubmittedBy]           BIGINT        NULL,
                 [IsValidData]           BIT           NOT NULL,
                 [IsReview]              BIT           NOT NULL,
                 [SpeedSheetName]        NVARCHAR(100) NULL,
                 [UniType]               NVARCHAR(30)  NULL
             )

    BEGIN TRAN

INSERT INTO [dbo].[Request]
([RequestNumber],
 [RequestInformationID],
 [RequestProfileID],
 [RequestLaneID],
 [RequestAccessorialsID],
 [InitiatedOn],
 [InitiatedBy],
 [SubmittedOn],
 [SubmittedBy],
 [IsValidData],
 [IsReview],
 [IsActive],
 [IsInactiveViewable],
 [SpeedsheetName],
 [UniType])
OUTPUT INSERTED.[RequestID], INSERTED.[RequestNumber], CONCAT(LEFT(DATEPART(yy, GETUTCDATE()), 2),
                                                              REPLICATE('0', 7 - LEN(INSERTED.[RequestID] % 10000000)),
                                                              INSERTED.[RequestID] % 10000000), INSERTED.[RequestInformationID], INSERTED.[RequestProfileID], INSERTED.[RequestLaneID], INSERTED.[RequestAccessorialsID], INSERTED.[InitiatedOn], INSERTED.[InitiatedBy], INSERTED.[SubmittedOn], INSERTED.[SubmittedBy], INSERTED.[IsValidData], INSERTED.[IsReview], INSERTED.[SpeedsheetName], INSERTED.[UniType] INTO @Request
    (
     [RequestID],
     [RequestNumber],
     [RequestCode],
     [RequestInformationID],
     [RequestProfileID],
     [RequestLaneID],
     [RequestAccessorialsID],
     [InitiatedOn],
     [InitiatedBy],
     [SubmittedOn],
     [SubmittedBy],
     [IsValidData],
     [IsReview],
     [SpeedsheetName],
     [UniType]
        )
VALUES (REPLACE(NEWID(), '-', ''),
        NULL,
        NULL,
        NULL,
        NULL,
        GETUTCDATE(),
        @InitiatedBy,
        NULL,
        NULL,
        0,
        0,
        1,
        1,
        @SpeedSheetName,
        @UniType)


SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

UPDATE dbo.Request
SET RequestCode = A.RequestCode
FROM @Request A
WHERE dbo.Request.RequestID = A.RequestID


INSERT INTO [dbo].[Request_History]
([RequestID],
 [RequestNumber],
 [RequestCode],
 [RequestInformationVersionID],
 [RequestProfileVersionID],
 [RequestLaneVersionID],
 [RequestAccessorialsVersionID],
 [InitiatedOn],
 [InitiatedByVersion],
 [SubmittedOn],
 [SubmittedByVersion],
 [IsValidData],
 [IsReview],
 [IsActive],
 [VersionNum],
 [IsLatestVersion],
 [IsInactiveViewable],
 [UpdatedOn],
 [UpdatedBy],
 [Comments],
 [SpeedsheetName],
 [UniType])
SELECT R.[RequestID],
       R.[RequestNumber],
       R.[RequestCode],
       NULL,
       NULL,
       NULL,
       NULL,
       R.[InitiatedOn],
       UH.[UserVersionID],
       NULL,
       NULL,
       R.[IsValidData],
       R.[IsReview],
       1,
       1,
       1,
       1,
       GETUTCDATE(),
       @UpdatedBy,
       @Comments,
       R.[SpeedsheetName],
       R.[UniType]
FROM @Request R
         INNER JOIN dbo.User_History UH ON R.InitiatedBy = UH.UserID AND UH.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

SELECT @RequestID = R.RequestID,
       @RequestNumber = R.RequestNumber
FROM @Request R
WHERE R.InitiatedBy = @InitiatedBy
    IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)
        BEGIN
            ROLLBACK TRAN
            RAISERROR ('Insert Procedure Failed!', 16, 1)
            RETURN 0
        END
    IF (@ROWCOUNT1 <> 1) OR (@ROWCOUNT2 <> 1)
        BEGIN
            ROLLBACK TRAN
            IF (@ROWCOUNT1 <> 1)
                RAISERROR ('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT1);
            IF (@ROWCOUNT2 <> 1)
                RAISERROR ('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT2);
            RETURN 0
        END

    COMMIT TRAN
    RETURN 1
go


CREATE FUNCTION SearchRequestSectionLanePoints
(
	@GroupTypeName NVARCHAR(50),
	@GroupID BIGINT = NULL,
	@PointTypeName NVARCHAR(50),
	@PointName NVARCHAR(50) = NULL
)
RETURNS
@Points TABLE
(
	[point_id] BIGINT NULL,
	[point_name] NVARCHAR(50) NULL
)
AS
BEGIN

	IF (@GroupID IS NOT NULL AND @GroupID <= 0)
		SELECT @GroupID = NULL;

	DECLARE @CountryLocationHierarchy INT;
	DECLARE @RegionLocationHierarchy INT;
	DECLARE @ProvinceLocationHierarchy INT;
	DECLARE @TerminalLocationHierarchy INT;
	DECLARE @BasingPointLocationHierarchy INT;
	DECLARE @ServicePointLocationHierarchy INT;
	DECLARE @PostalCodeLocationHierarchy INT;

	SELECT @CountryLocationHierarchy = dbo.GetLocationHierarchy('Country')
	SELECT @RegionLocationHierarchy = dbo.GetLocationHierarchy('Region')
	SELECT @ProvinceLocationHierarchy = dbo.GetLocationHierarchy('Province')
	SELECT @TerminalLocationHierarchy = dbo.GetLocationHierarchy('Terminal')
	SELECT @BasingPointLocationHierarchy = dbo.GetLocationHierarchy('Basing Point')
	SELECT @ServicePointLocationHierarchy = dbo.GetLocationHierarchy('Service Point')
	SELECT @PostalCodeLocationHierarchy = dbo.GetLocationHierarchy('Postal Code')

	DECLARE @GroupLocationHierarchy INT;
	DECLARE @PointLocationHierarchy INT;

	SELECT @GroupLocationHierarchy = LocationHierarchy
	FROM dbo.RequestSectionLanePointType
	WHERE RequestSectionLanePointTypeName = @GroupTypeName
	SELECT @PointLocationHierarchy = LocationHierarchy
	FROM dbo.RequestSectionLanePointType
	WHERE RequestSectionLanePointTypeName = @PointTypeName

	DECLARE @Count INT;

	IF @PointName IS NOT NULL AND LEN(@PointName)>0 AND @PointName <> '$None$'
		SELECT @Count = 100
	ELSE
		BEGIN
		SELECT @PointName = NULL;
		SELECT @Count = 1E9
	END

	IF @PointLocationHierarchy = @RegionLocationHierarchy
	BEGIN
		INSERT INTO @Points
			(
			[point_id],
			[point_name]
			)
		SELECT DISTINCT TOP (@Count)
			R.RegionID, R.RegionCode
		FROM dbo.Country C
			INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
		WHERE (
			(@GroupID IS NULL OR (@GroupID IS NOT NULL AND @GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID))
		)
			AND (@PointName IS NULL OR R.RegionCode LIKE @PointName +'%')
	END

	IF @PointLocationHierarchy = @ProvinceLocationHierarchy
	BEGIN
		INSERT INTO @Points
			(
			[point_id],
			[point_name]
			)
		SELECT DISTINCT TOP (@Count)
			P.ProvinceID, P.ProvinceCode
		FROM dbo.Country C
			INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
			INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
		WHERE (
			(@GroupID IS NULL)
			OR (@GroupID IS NOT NULL AND (
			(@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
			OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
			))
		)
			AND (@PointName IS NULL OR P.ProvinceCode LIKE @PointName +'%')
	END

	IF @PointLocationHierarchy = @TerminalLocationHierarchy
	BEGIN
		INSERT INTO @Points
			(
			[point_id],
			[point_name]
			)
		SELECT DISTINCT TOP (@Count)
			T.TerminalID, T.TerminalCode
		FROM dbo.Country C
			INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
			INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
			INNER JOIN dbo.City Y ON P.ProvinceID = Y.ProvinceID
			INNER JOIN dbo.Terminal T ON T.CityID = Y.CityID
		WHERE (
			(@GroupID IS NULL)
			OR (@GroupID IS NOT NULL AND (
			(@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
			OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
			OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
			))
		)
			AND (@PointName IS NULL OR T.TerminalCode LIKE @PointName +'%')
	END

	IF @PointLocationHierarchy = @BasingPointLocationHierarchy
	BEGIN
		INSERT INTO @Points
			(
			[point_id],
			[point_name]
			)
		SELECT DISTINCT TOP (@Count)
			BP.BasingPointID, BP.BasingPointName
		FROM dbo.Country C
			INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
			INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
			INNER JOIN dbo.BasingPoint BP ON BP.ProvinceID = P.ProvinceID
		WHERE (
			(@GroupID IS NULL)
			OR (@GroupID IS NOT NULL AND (
			(@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
			OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
			OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
			))
		)
			AND (@PointName IS NULL OR BP.BasingPointName LIKE @PointName +'%')
	END

	IF @PointLocationHierarchy = @ServicePointLocationHierarchy
	BEGIN
		INSERT INTO @Points
			(
			[point_id],
			[point_name]
			)
		SELECT DISTINCT TOP (@Count)
			SP.ServicePointID, SP.ServicePointName + ', ' + P.ProvinceCode
		FROM dbo.Country C
			INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
			INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
			INNER JOIN dbo.BasingPoint BP ON BP.ProvinceID = P.ProvinceID
			LEFT JOIN dbo.ServicePoint SP ON (SP.BasingPointID IS NULL AND SP.ProvinceID = P.ProvinceID) OR (SP.BasingPointID IS NOT NULL AND SP.BasingPointID = BP.BasingPointID)
			LEFT JOIN dbo.TerminalServicePoint TSP ON SP.ServicePointID = TSP.ServicePointID
		WHERE (
			(@GroupID IS NULL)
			OR (@GroupID IS NOT NULL AND (
			(@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
			OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
			OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
			OR (@GroupLocationHierarchy = @TerminalLocationHierarchy AND TSP.TerminalID = @GroupID)
			OR (@GroupLocationHierarchy = @BasingPointLocationHierarchy AND BP.BasingPointID = @GroupID)
			))
		)
			AND (@PointName IS NULL OR SP.ServicePointName LIKE @PointName +'%')
	END

	IF @PointLocationHierarchy = @PostalCodeLocationHierarchy
	BEGIN
		INSERT INTO @Points
			(
			[point_id],
			[point_name]
			)
		SELECT DISTINCT TOP (@Count)
			PC.PostalCodeID, PC.PostalCodeName
		FROM dbo.Country C
			INNER JOIN dbo.Region R ON C.CountryID = R.CountryID
			INNER JOIN dbo.Province P ON R.RegionID = P.RegionID
			INNER JOIN dbo.BasingPoint BP ON BP.ProvinceID = P.ProvinceID
			LEFT JOIN dbo.ServicePoint SP ON (SP.BasingPointID IS NULL AND SP.ProvinceID = P.ProvinceID) OR (SP.BasingPointID IS NOT NULL AND SP.BasingPointID = BP.BasingPointID)
			LEFT JOIN dbo.TerminalServicePoint TSP ON SP.ServicePointID = TSP.ServicePointID
			LEFT JOIN dbo.PostalCode PC ON SP.ServicePointID = PC.ServicePointID
		WHERE (
			(@GroupID IS NULL)
			OR (@GroupID IS NOT NULL AND (
			(@GroupLocationHierarchy = @CountryLocationHierarchy AND C.CountryID = @GroupID)
			OR (@GroupLocationHierarchy = @RegionLocationHierarchy AND R.RegionID = @GroupID)
			OR (@GroupLocationHierarchy = @ProvinceLocationHierarchy AND P.ProvinceID = @GroupID)
			OR (@GroupLocationHierarchy = @TerminalLocationHierarchy AND TSP.TerminalID = @GroupID)
			OR (@GroupLocationHierarchy = @BasingPointLocationHierarchy AND BP.BasingPointID = @GroupID)
			OR (@GroupLocationHierarchy = @ServicePointLocationHierarchy AND SP.ServicePointID = @GroupID)
			))
		)
			AND (@PointName IS NULL OR PC.PostalCodeName LIKE @PointName +'%')
	END

	RETURN
END
go

CREATE   PROCEDURE [dbo].[ServiceLevel_Insert_Bulk]
	@ServiceLevelTableType ServiceLevelTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @ServiceLevelTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @ServiceLevel table
(
	[ServiceLevelID] [bigint] NOT NULL,
	[ServiceLevelName] [nvarchar](50) NOT NULL,
	[ServiceLevelCode] [nvarchar](3) NOT NULL,
	[ServiceOfferingID] [bigint] NOT NULL,
	[PricingType] NVARCHAR (50) NOT NULL
)

BEGIN TRAN

DECLARE @ServiceLevelWithServiceOfferingID table
(
	[ServiceLevelName] [nvarchar](50) NOT NULL,
	[ServiceLevelCode] [nvarchar](3) NOT NULL,
	[ServiceOfferingID] [bigint] NOT NULL,
	[PricingType] NVARCHAR (50) NOT NULL
)

DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @ServiceLevelWithServiceOfferingID
(
	[ServiceLevelName],
	[ServiceLevelCode],
	[PricingType],
	[ServiceOfferingID]
)
SELECT SLTT.[ServiceLevelName],
	SLTT.[ServiceLevelCode],
	S.[ServiceOfferingID],
	SLTT.[PricingType]
FROM @ServiceLevelTableType SLTT
INNER JOIN [dbo].[ServiceOffering] S ON SLTT.[ServiceOfferingName] = S.[ServiceOfferingName]

INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History]
WHERE [IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @ServiceLevelWithServiceOfferingID)


INSERT INTO [dbo].[ServiceLevel]
(
	[ServiceLevelName],
	[ServiceLevelCode],
	[PricingType],
	[ServiceOfferingID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.ServiceLevelID,
	 INSERTED.ServiceLevelName,
	 INSERTED.ServiceLevelCode,
	 INSERTED.[PricingType],
	 INSERTED.ServiceOfferingID
INTO @ServiceLevel
(
	[ServiceLevelID],
	[ServiceLevelName],
	[ServiceLevelCode],
	[PricingType],
	[ServiceOfferingID]
)
SELECT [ServiceLevelName],
	[ServiceLevelCode],
	[PricingType],
	[ServiceOfferingID],
	1,
	1
FROM @ServiceLevelWithServiceOfferingID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[ServiceLevel_History]
(
	[ServiceLevelID],
	[ServiceLevelName],
	[ServiceLevelCode],
	[PricingType],
	[ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT S.[ServiceLevelID],
	 S.[ServiceLevelName],
	 S.[ServiceLevelCode],
	 S.[PricingType],
	 SVID.[ServiceOfferingVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @ServiceLevel S
INNER JOIN @ServiceOfferingVersionID SVID ON S.[ServiceOfferingID] = SVID.[ServiceOfferingID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[ServiceMode_Insert_Bulk]
	@ServiceModeTableType ServiceModeTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @ServiceModeTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @ServiceMode table
(
	[ServiceModeID] [bigint] NOT NULL,
	[ServiceModeName] [nvarchar](50) NOT NULL,
	[ServiceModeCode] [nvarchar](1) NOT NULL,
	[ServiceOfferingID] [bigint] NOT NULL
)

BEGIN TRAN

DECLARE @ServiceModeWithServiceOfferingID table
(
	[ServiceModeName] [nvarchar](50) NOT NULL,
	[ServiceModeCode] [nvarchar](1) NOT NULL,
	[ServiceOfferingID] [bigint] NOT NULL
)

DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @ServiceModeWithServiceOfferingID
(
	[ServiceModeName],
	[ServiceModeCode],
	[ServiceOfferingID]
)
SELECT SMTT.[ServiceModeName],
	SMTT.[ServiceModeCode],
	S.[ServiceOfferingID]
FROM @ServiceModeTableType SMTT
INNER JOIN [dbo].[ServiceOffering] S ON SMTT.[ServiceOfferingName] = S.[ServiceOfferingName]

INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History]
WHERE [IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @ServiceModeWithServiceOfferingID)


INSERT INTO [dbo].[ServiceMode]
(
	[ServiceModeName],
	[ServiceModeCode],
	[ServiceOfferingID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.ServiceModeID,
	 INSERTED.ServiceModeName,
	 INSERTED.ServiceModeCode,
	 INSERTED.ServiceOfferingID
INTO @ServiceMode
(
	[ServiceModeID],
	[ServiceModeName],
	[ServiceModeCode],
	[ServiceOfferingID]
)
SELECT [ServiceModeName],
	[ServiceModeCode],
	[ServiceOfferingID],
	1,
	1
FROM @ServiceModeWithServiceOfferingID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[ServiceMode_History]
(
	[ServiceModeID],
	[ServiceModeName],
	[ServiceModeCode],
	[ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT S.[ServiceModeID],
	 S.[ServiceModeName],
	 S.[ServiceModeCode],
	 SVID.[ServiceOfferingVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @ServiceMode S
INNER JOIN @ServiceOfferingVersionID SVID ON S.[ServiceOfferingID] = SVID.[ServiceOfferingID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[ServiceOffering_Insert]
	@ServiceOfferingName nvarchar(50),
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @ServiceOffering table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingName] [nvarchar](50) NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[ServiceOffering]
(
	[ServiceOfferingName],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.ServiceOfferingID,
	 @ServiceOfferingName
INTO @ServiceOffering
(
	[ServiceOfferingID],
	[ServiceOfferingName]
)
VALUES
(
	@ServiceOfferingName,
	1,
	1
)

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[ServiceOffering_History]
(
	[ServiceOfferingID],
	[ServiceOfferingName],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [ServiceOfferingID],
	 [ServiceOfferingName],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @ServiceOffering

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> 1) OR (@ROWCOUNT2 <> 1)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT1);
	IF (@ROWCOUNT2 <> 1)
		RAISERROR('%d Records Affected by Insert Procedure!', 16, 1, @ROWCOUNT2);
	RETURN 0
	END

COMMIT TRAN
RETURN 1

go

CREATE   PROCEDURE [dbo].[ServicePoint_Insert_Bulk]
	@ServicePointTableType ServicePointTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @ServicePointTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @ServicePoint table
(
	[ServicePointID] [bigint] NOT NULL,
	[ServicePointName] [varchar](50) NOT NULL,
	[ProvinceID] [bigint] NOT NULL,
	[BasingPointID] [bigint] NULL
)

DECLARE @BasingPointVersionID table
(
	[BasingPointID] [bigint] NOT NULL,
	[BasingPointVersionID] [bigint] NOT NULL
)

DECLARE @ProvinceVersionID table
(
	[ProvinceID] [bigint] NOT NULL,
	[ProvinceVersionID] [bigint] NOT NULL
)

INSERT INTO [dbo].[ServicePoint]
(
	[ServicePointName],
	[BasingPointID],
	[ProvinceID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.ServicePointID,
	 INSERTED.ServicePointName,
	 INSERTED.[BasingPointID],
	 INSERTED.[ProvinceID]
INTO @ServicePoint
(
	[ServicePointID],
	[ServicePointName],
	[BasingPointID],
	[ProvinceID]
)
SELECT [ServicePointName],
	[BasingPointID],
	P.[ProvinceID],
	1,
	1
FROM @ServicePointTableType SP
INNER JOIN dbo.Province P ON SP.ProvinceCode = P.ProvinceCode
LEFT JOIN dbo.BasingPoint BP ON P.ProvinceID = BP.ProvinceID AND SP.BasingPointName = BP.BasingPointName


SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO @BasingPointVersionID
(
	[BasingPointID],
	[BasingPointVersionID]
)
SELECT [BasingPointID],
	[BasingPointVersionID]
FROM [dbo].[BasingPoint_History]
WHERE [IsLatestVersion] = 1
AND [BasingPointID] IN (SELECT DISTINCT [BasingPointID] FROM @ServicePoint)

INSERT INTO @ProvinceVersionID
(
	[ProvinceID],
	[ProvinceVersionID]
)
SELECT [ProvinceID],
	[ProvinceVersionID]
FROM [dbo].[Province_History]
WHERE [IsLatestVersion] = 1
AND [ProvinceID] IN (SELECT DISTINCT [ProvinceID] FROM @ServicePoint)

INSERT INTO [dbo].[ServicePoint_History]
(
	[ServicePointID],
	[ServicePointName],
	[BasingPointVersionID],
	[ProvinceVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT SP.[ServicePointID],
	 SP.[ServicePointName],
	 BVID.[BasingPointVersionID],
	 PVID.[ProvinceVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @ServicePoint SP
INNER JOIN @ProvinceVersionID PVID ON SP.[ProvinceID] = PVID.[ProvinceID]
LEFT JOIN @BasingPointVersionID BVID ON SP.[BasingPointID] = BVID.[BasingPointID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[SpeedSheet_Insert_Bulk]
	@SpeedSheetTableType SpeedSheetTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @SpeedSheetTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @SpeedSheet table
(
	[SpeedSheetID]       BIGINT          NOT NULL,
	[ServiceOfferingID]  BIGINT          NOT NULL,
    [Margin]             NUMERIC (19, 6) NOT NULL,
    [MaxDensity]         NUMERIC (19, 6) NOT NULL,
    [MinDensity]         NUMERIC (19, 6) NOT NULL
)

INSERT INTO [dbo].[SpeedSheet]
(
	[ServiceOfferingID],
    [Margin],
    [MaxDensity],
    [MinDensity],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.SpeedSheetID,
	 INSERTED.[ServiceOfferingID],
	 INSERTED.[Margin],
	 INSERTED.[MaxDensity],
	 INSERTED.[MinDensity]
INTO @SpeedSheet
(
	[SpeedSheetID],
	[ServiceOfferingID],
    [Margin],
    [MaxDensity],
    [MinDensity]
)
SELECT SO.[ServiceOfferingID],
	SS.[Margin],
	SS.[MaxDensity],
	SS.[MinDensity],
	1,
	1
FROM @SpeedSheetTableType SS
INNER JOIN [dbo].[ServiceOffering] SO ON SS.[ServiceOfferingName] = SO.[ServiceOfferingName]

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[SpeedSheet_History]
(
	[SpeedSheetID],
	[ServiceOfferingVersionID],
    [Margin],
    [MaxDensity],
    [MinDensity],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT SS.[SpeedSheetID],
	 SO.[ServiceOfferingVersionID],
     SS.[Margin],
     SS.[MaxDensity],
     SS.[MinDensity],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @SpeedSheet SS
INNER JOIN [dbo].[ServiceOffering_History] SO ON SS.[ServiceOfferingID] = SO.[ServiceOfferingID] AND SO.[IsLatestVersion] = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[SubServiceLevel_Insert_Bulk]
	@SubServiceLevelTableType SubServiceLevelTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @SubServiceLevelTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @SubServiceLevel table
(
	[SubServiceLevelID] [bigint] NOT NULL,
	[SubServiceLevelName] [nvarchar](50) NOT NULL,
	[SubServiceLevelCode] [nvarchar](2) NOT NULL,
	[ServiceLevelID] [bigint] NOT NULL
)

BEGIN TRAN

DECLARE @ServiceLevelVersionID table
(
	[ServiceLevelID] [bigint] NOT NULL,
	[ServiceLevelVersionID] [bigint] NOT NULL
)

INSERT INTO [dbo].[SubServiceLevel]
(
	[SubServiceLevelName],
	[SubServiceLevelCode],
	[ServiceLevelID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.SubServiceLevelID,
	 INSERTED.SubServiceLevelName,
	 INSERTED.SubServiceLevelCode,
	 INSERTED.[ServiceLevelID]
INTO @SubServiceLevel
(
	[SubServiceLevelID],
	[SubServiceLevelName],
	[SubServiceLevelCode],
	[ServiceLevelID]
)
SELECT [SubServiceLevelName],
	[SubServiceLevelCode],
	[ServiceLevelID],
	1,
	1
FROM @SubServiceLevelTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO @ServiceLevelVersionID
(
	[ServiceLevelID],
	[ServiceLevelVersionID]
)
SELECT [ServiceLevelID],
	[ServiceLevelVersionID]
FROM [dbo].[ServiceLevel_History]
WHERE [IsLatestVersion] = 1
AND [ServiceLevelID] IN (SELECT DISTINCT [ServiceLevelID] FROM @SubServiceLevelTableType)


INSERT INTO [dbo].[SubServiceLevel_History]
(
	[SubServiceLevelID],
	[SubServiceLevelName],
	[SubServiceLevelCode],
	[ServiceLevelVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT S.[SubServiceLevelID],
	 S.[SubServiceLevelName],
	 S.[SubServiceLevelCode],
	 SVID.[ServiceLevelVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @SubServiceLevel S
INNER JOIN @ServiceLevelVersionID SVID ON S.[ServiceLevelID] = SVID.[ServiceLevelID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[TerminalCostWeightBreakLevel_Create]
	@AddedCostWeightBreakLevelTableType_Create CostWeightBreakLevelTableType_Create READONLY,
	@ServiceOfferingID BIGINT
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT, @ERROR4 INT, @ERROR5 INT;

-- insert new weight break levels

--DECLARE @InsertedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;
--DECLARE @DeletedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;

DECLARE @TerminalCostWeightBreakLevel table
(
    [WeightBreakLevelID]    BIGINT       NOT NULL,
    [WeightBreakLevelName]  NVARCHAR (50) NOT NULL,
    [WeightBreakLowerBound] INT           NOT NULL,
    [ServiceOfferingID]     BIGINT        NOT NULL
)

DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History] SLH
WHERE SLH.[IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @AddedCostWeightBreakLevelTableType_Create)

INSERT INTO [dbo].[TerminalCostWeightBreakLevel]
(
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[WeightBreakLevelID],
	 INSERTED.[WeightBreakLevelName],
	 INSERTED.[WeightBreakLowerBound],
	 INSERTED.[ServiceOfferingID]
INTO @TerminalCostWeightBreakLevel
(
	[WeightBreakLevelID],
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID]
)
SELECT [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	1,
	1
FROM @AddedCostWeightBreakLevelTableType_Create

SELECT @ERROR1 = @@ERROR;

INSERT INTO [dbo].[TerminalCostWeightBreakLevel_History]
(
	[WeightBreakLevelID],
	[WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT WB.[WeightBreakLevelID],
	WB.[WeightBreakLevelName],
    WB.[WeightBreakLowerBound],
    SO.[ServiceOfferingVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	'P&C System',
	'Added new Weight break levels'
FROM @TerminalCostWeightBreakLevel WB
INNER JOIN @ServiceOfferingVersionID SO ON WB.[ServiceOfferingID] = SO.[ServiceOfferingID]

--INSERT INTO @InsertedCostWeightBreakLevel
--(
--	[WeightBreakLevelID],
--	[ServiceOfferingID]
--)
--SELECT [WeightBreakLevelID],
--	[ServiceOfferingID]
--FROM @TerminalCostWeightBreakLevel

--SELECT @ERROR2 = @@ERROR;

---- Update The Cost table

--DECLARE @TerminalNewCost1 TerminalCostTableType_Update;

--INSERT INTO @TerminalNewCost1
--(
--	[TerminalCostID],
--	[Cost],
--	[IsIntraRegionMovementEnabled],
--	[IntraRegionMovementFactor]
--)
--SELECT [TerminalCostID],
--	dbo.TerminalCost_Select(LC.Cost) AS Cost,
--	LC.[IsIntraRegionMovementEnabled],
--	[IntraRegionMovementFactor]
--FROM dbo.TerminalCost LC
--WHERE LC.ServiceOfferingID = @ServiceOfferingID

--DECLARE @TerminalNewCost2 TerminalCostTableType_Update;

--INSERT INTO @TerminalNewCost2
--(
--	[TerminalCostID],
--	[Cost],
--	[IsIntraRegionMovementEnabled],
--	[IntraRegionMovementFactor]
--)
--SELECT LC.TerminalCostID,
--	'{"CostComponents":{"CostByWeightBreak":"' + dbo.LaneCostWeightBreakLevel_Modify(LC.Cost, @InsertedCostWeightBreakLevel, @DeletedCostWeightBreakLevel, @ServiceOfferingID) + '","CrossDockCost":""}}' AS NewCost,
--	[IsIntraRegionMovementEnabled],
--	[IntraRegionMovementFactor]
--FROM @TerminalNewCost1 LC

--EXEC [dbo].[TerminalCost_Update] @TerminalNewCost2

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END


COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[TerminalCostWeightBreakLevel_Insert_Bulk]
	@TerminalCostWeightBreakLevelTableType CostWeightBreakLevelTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @TerminalCostWeightBreakLevelTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @TerminalCostWeightBreakLevel table
(
    [WeightBreakLevelID]    BIGINT       NOT NULL,
    [WeightBreakLevelName]  NVARCHAR (50) NOT NULL,
    [WeightBreakLowerBound] INT           NOT NULL,
    [ServiceOfferingID]     BIGINT        NOT NULL
)

DECLARE @TerminalCostWeightBreakLevelID table
(
    [WeightBreakLevelName]  NVARCHAR (50) NOT NULL,
    [WeightBreakLowerBound] INT           NOT NULL,
    [ServiceOfferingID]     BIGINT        NOT NULL
)

DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @TerminalCostWeightBreakLevelID
(
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID]
)
SELECT WB.[WeightBreakLevelName],
    WB.[WeightBreakLowerBound],
    SO.[ServiceOfferingID]
FROM @TerminalCostWeightBreakLevelTableType WB
INNER JOIN dbo.[ServiceOffering] SO ON WB.[ServiceOfferingName] = SO.[ServiceOfferingName]


INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History] SLH
WHERE SLH.[IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @TerminalCostWeightBreakLevelID)


INSERT INTO [dbo].[TerminalCostWeightBreakLevel]
(
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[WeightBreakLevelID],
	 INSERTED.[WeightBreakLevelName],
	 INSERTED.[WeightBreakLowerBound],
	 INSERTED.[ServiceOfferingID]
INTO @TerminalCostWeightBreakLevel
(
	[WeightBreakLevelID],
    [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID]
)
SELECT [WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingID],
	1,
	1
FROM @TerminalCostWeightBreakLevelID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[TerminalCostWeightBreakLevel_History]
(
	[WeightBreakLevelID],
	[WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT WB.[WeightBreakLevelID],
	WB.[WeightBreakLevelName],
    WB.[WeightBreakLowerBound],
    SO.[ServiceOfferingVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @TerminalCostWeightBreakLevel WB
INNER JOIN @ServiceOfferingVersionID SO ON WB.[ServiceOfferingID] = SO.[ServiceOfferingID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION dbo.TerminalCostWeightBreakLevel_Modify
(
	@Cost NVARCHAR(MAX),
	@NewCostWeightBreakLevel CostWeightBreakLevelTableType_ID READONLY,
	@DeletedCostWeightBreakLevel CostWeightBreakLevelTableType_ID READONLY,
	@ServiceOfferingID BIGINT
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewCost NVARCHAR(MAX);

	SELECT @NewCost = '{' +
STUFF((
    SELECT ', ' + '\"' +  CAST([key] AS VARCHAR(MAX)) + '\"' + ':' + CAST([value] AS VARCHAR(MAX))
		FROM
			(
						SELECT [key] , CAST([value] AS NUMERIC(19,6)) AS [value]
				FROM OPENJSON(@Cost)
				WHERE [key] NOT IN (SELECT [WeightBreakLevelID]
				FROM @DeletedCostWeightBreakLevel
				WHERE ServiceOfferingID = @ServiceOfferingID)
			UNION
				SELECT [WeightBreakLevelID], 0.0
				FROM @NewCostWeightBreakLevel
				WHERE ServiceOfferingID = @ServiceOfferingID) AS A
		FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
	,1,2,'') + '}';

	RETURN @NewCost

END
go

CREATE   PROCEDURE [dbo].[TerminalCostWeightBreakLevel_Update]
	@UpdatedCostWeightBreakLevel CostWeightBreakLevelTableType_Update READONLY,
	@ServiceOfferingID BIGINT
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT;

--DECLARE @InsertedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;
--DECLARE @DeletedCostWeightBreakLevel CostWeightBreakLevelTableType_ID;

--INSERT INTO @InsertedCostWeightBreakLevel
--(
--	[WeightBreakLevelID],
--	[ServiceOfferingID]
--)
--SELECT LC.[WeightBreakLevelID],
--	LC.[ServiceOfferingID]
--FROM dbo.TerminalCostWeightBreakLevel LC
--INNER JOIN @UpdatedCostWeightBreakLevel N ON LC.[WeightBreakLevelID] = N.[WeightBreakLevelID]
--WHERE LC.[IsActive] = 0 AND N.[IsActive] = 1

--INSERT INTO @DeletedCostWeightBreakLevel
--(
--	[WeightBreakLevelID],
--	[ServiceOfferingID]
--)
--SELECT LC.[WeightBreakLevelID],
--	LC.[ServiceOfferingID]
--FROM dbo.TerminalCostWeightBreakLevel LC
--INNER JOIN @UpdatedCostWeightBreakLevel N ON LC.[WeightBreakLevelID] = N.[WeightBreakLevelID]
--WHERE LC.[IsActive] = 1 AND N.[IsActive] = 0

--DECLARE @InsertedCount INT, @DeletedCount INT;

--SELECT @InsertedCount = COUNT(*) FROM @InsertedCostWeightBreakLevel;
--SELECT @DeletedCount = COUNT(*) FROM @DeletedCostWeightBreakLevel;

--IF @InsertedCount > 0 OR @DeletedCount > 0
--BEGIN
--	DECLARE @TerminalNewCost1 TerminalCostTableType_Update;

--	INSERT INTO @TerminalNewCost1
--	(
--		[TerminalCostID],
--		[Cost],
--		[IsIntraRegionMovementEnabled],
--		[IntraRegionMovementFactor]
--	)
--	SELECT [TerminalCostID],
--		dbo.TerminalCost_Select(LC.Cost) AS Cost,
--		LC.[IsIntraRegionMovementEnabled],
--		[IntraRegionMovementFactor]
--	FROM dbo.TerminalCost LC
--	WHERE LC.ServiceOfferingID = @ServiceOfferingID

--	DECLARE @TerminalNewCost2 TerminalCostTableType_Update;

--	INSERT INTO @TerminalNewCost2
--	(
--		[TerminalCostID],
--		[Cost],
--		[IsIntraRegionMovementEnabled],
--		[IntraRegionMovementFactor]
--	)
--	SELECT LC.TerminalCostID,
--		'{"CostComponents":{"CostByWeightBreak":"' + dbo.LaneCostWeightBreakLevel_Modify(LC.Cost, @InsertedCostWeightBreakLevel, @DeletedCostWeightBreakLevel, @ServiceOfferingID) + '","CrossDockCost":""}}' AS NewCost,
--		[IsIntraRegionMovementEnabled],
--		[IntraRegionMovementFactor]
--	FROM @TerminalNewCost1 LC

--	EXEC [dbo].[TerminalCost_Update] @TerminalNewCost2
--END

-- Update the dbo table with the latest values

UPDATE dbo.TerminalCostWeightBreakLevel
SET [WeightBreakLevelName] = A.[WeightBreakLevelName],
[WeightBreakLowerBound] = A.[WeightBreakLowerBound],
[IsActive] = A.[IsActive]
FROM @UpdatedCostWeightBreakLevel AS A
WHERE dbo.TerminalCostWeightBreakLevel.[WeightBreakLevelID] = A.[WeightBreakLevelID]

SELECT @ERROR1 = @@ERROR;

DECLARE @UpdateIDTableType table
(
	[WeightBreakLevelID] [bigint] NOT NULL,
	[WeightBreakLevelVersionID] [bigint] NOT NULL,
	[VersionNum] [int] NOT NULL,
	[IsInactiveViewable] [bit] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @UpdateIDTableType
(
	[WeightBreakLevelID],
	[WeightBreakLevelVersionID],
	[VersionNum],
	[IsInactiveViewable],
	[ServiceOfferingVersionID]
)
SELECT WBH.[WeightBreakLevelID],
	WBH.[WeightBreakLevelVersionID],
	WBH.[VersionNum],
	WBH.[IsInactiveViewable],
	WBH.[ServiceOfferingVersionID]
FROM dbo.TerminalCostWeightBreakLevel_History WBH
INNER JOIN @UpdatedCostWeightBreakLevel WB ON WBH.[WeightBreakLevelID] = WB.[WeightBreakLevelID] AND WBH.IsLatestVersion = 1

-- Set the history.IsLatestVersion to zero

UPDATE dbo.TerminalCostWeightBreakLevel_History
SET IsLatestVersion = 0
FROM @UpdateIDTableType AS U
WHERE dbo.TerminalCostWeightBreakLevel_History.[WeightBreakLevelVersionID] = U.[WeightBreakLevelVersionID]

SELECT @ERROR2 = @@ERROR;

-- Insert new records in the history table.

INSERT INTO [dbo].[TerminalCostWeightBreakLevel_History]
(
	[WeightBreakLevelID],
	[WeightBreakLevelName],
    [WeightBreakLowerBound],
    [ServiceOfferingVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT WB.[WeightBreakLevelID],
	WB.[WeightBreakLevelName],
	WB.[WeightBreakLowerBound],
	WBH.[ServiceOfferingVersionID],
	WB.[IsActive],
	WBH.[VersionNum] + 1,
	1,
	WBH.[IsInactiveViewable],
	GETUTCDATE(),
	'P&C System',
	'Updated Weight break levels'
FROM @UpdateIDTableType WBH
INNER JOIN @UpdatedCostWeightBreakLevel WB ON WBH.[WeightBreakLevelID] = WB.[WeightBreakLevelID]

SELECT @ERROR3 = @@ERROR;

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0) OR (@ERROR3 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END


COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[TerminalCost_Insert_Bulk]
	@TerminalCostTableType TerminalCostTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @TerminalCostTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @TerminalCost table
(
	[TerminalCostID] [bigint] NOT NULL,
	[TerminalID] [bigint] NOT NULL,
	[ServiceOfferingID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL,
	[IsIntraRegionMovementEnabled] [bit] NOT NULL,
	[IntraRegionMovementFactor] [decimal](19,6) NOT NULL
)

BEGIN TRAN

DECLARE @TerminalCostWithTerminalIDServiceOfferingID table
(
	[TerminalID] [bigint] NOT NULL,
	[ServiceOfferingID] [bigint] NOT NULL,
	[Cost] [nvarchar] (MAX) NOT NULL,
	[IsIntraRegionMovementEnabled] [bit] NOT NULL,
	[IntraRegionMovementFactor] [decimal](19,6) NOT NULL
)

DECLARE @TerminalVersionID table
(
	[TerminalID] [bigint] NOT NULL,
	[TerminalVersionID] [bigint] NOT NULL
)

DECLARE @ServiceOfferingVersionID table
(
	[ServiceOfferingID] [bigint] NOT NULL,
	[ServiceOfferingVersionID] [bigint] NOT NULL
)

INSERT INTO @TerminalCostWithTerminalIDServiceOfferingID
(
	[TerminalID],
	[ServiceOfferingID],
	[Cost],
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor]
)
SELECT T.[TerminalID],
	SO.[ServiceOfferingID],
	TCTT.[Cost],
	TCTT.[IsIntraRegionMovementEnabled],
	TCTT.[IntraRegionMovementFactor]
FROM @TerminalCostTableType TCTT
INNER JOIN [dbo].[Terminal] T ON TCTT.[TerminalCode] = T.[TerminalCode]
INNER JOIN [dbo].[ServiceOffering] SO ON TCTT.[ServiceOfferingName] = SO.[ServiceOfferingName]

INSERT INTO @TerminalVersionID
(
	[TerminalID],
	[TerminalVersionID]
)
SELECT [TerminalID],
	[TerminalVersionID]
FROM [dbo].[Terminal_History]
WHERE [IsLatestVersion] = 1
AND [TerminalID] IN (SELECT DISTINCT [TerminalID] FROM @TerminalCostWithTerminalIDServiceOfferingID)

INSERT INTO @ServiceOfferingVersionID
(
	[ServiceOfferingID],
	[ServiceOfferingVersionID]
)
SELECT [ServiceOfferingID],
	[ServiceOfferingVersionID]
FROM [dbo].[ServiceOffering_History]
WHERE [IsLatestVersion] = 1
AND [ServiceOfferingID] IN (SELECT DISTINCT [ServiceOfferingID] FROM @TerminalCostWithTerminalIDServiceOfferingID)

INSERT INTO [dbo].[TerminalCost]
(
	[TerminalID],
	[ServiceOfferingID],
	[Cost],
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.TerminalCostID,
	 INSERTED.TerminalID,
	 INSERTED.ServiceOfferingID,
	 INSERTED.Cost,
	 INSERTED.IsIntraRegionMovementEnabled,
	 INSERTED.IntraRegionMovementFactor
INTO @TerminalCost
(
	[TerminalCostID],
	[TerminalID],
	[ServiceOfferingID],
	[Cost],
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor]
)
SELECT [TerminalID],
	[ServiceOfferingID],
	dbo.FormatJsonField(Cost),
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor],
	1,
	1
FROM @TerminalCostWithTerminalIDServiceOfferingID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[TerminalCost_History]
(
	[TerminalCostID],
	[TerminalVersionID],
	[ServiceOfferingVersionID],
	[Cost],
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT TC.[TerminalCostID],
	 TVID.[TerminalVersionID],
	 SOVID.[ServiceOfferingVersionID],
	 TC.[Cost],
	 TC.[IsIntraRegionMovementEnabled],
	 TC.[IntraRegionMovementFactor],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @TerminalCost TC
INNER JOIN @TerminalVersionID TVID ON TC.[TerminalID] = TVID.[TerminalID]
INNER JOIN @ServiceOfferingVersionID SOVID ON TC.[ServiceOfferingID] = SOVID.[ServiceOfferingID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION dbo.TerminalCost_Select
(
	@Cost NVARCHAR(MAX)
)

RETURNS NVARCHAR(MAX)
AS
BEGIN

	DECLARE @NewCost NVARCHAR(MAX);

	SELECT @NewCost = [value]
	FROM OPENJSON(@Cost,'$.CostComponents')
	WHERE [key] = 'CostByWeightBreak'

	RETURN @NewCost

END
go

CREATE   PROCEDURE [dbo].[TerminalCost_Update]
	@TerminalCostTableType_Update TerminalCostTableType_Update READONLY
AS

SET NOCOUNT ON;

BEGIN TRAN

DECLARE @ERROR1 INT, @ERROR2 INT, @ERROR3 INT;

UPDATE dbo.TerminalCost
SET Cost = dbo.FormatJsonField(A.[Cost]),
[IsIntraRegionMovementEnabled] = A.[IsIntraRegionMovementEnabled],
[IntraRegionMovementFactor] = A.[IntraRegionMovementFactor]
FROM @TerminalCostTableType_Update AS A
WHERE dbo.TerminalCost.TerminalCostID = A.TerminalCostID

SELECT @ERROR1 = @@ERROR;

DECLARE @TerminalNewCost_History table
(
	[TerminalCostVersionID] [BIGINT] NOT NULL,
	[TerminalCostID] [BIGINT] NOT NULL,
	[TerminalVersionID]         BIGINT          NOT NULL,
	[Cost] [NVARCHAR](MAX) NOT NULL,
	[ServiceOfferingVersionID]           BIGINT NOT NULL,
    [VersionNum]            INT             NOT NULL,
    [IsActive]              BIT             NOT NULL,
    [IsInactiveViewable]    BIT             NOT NULL,
	[IsIntraRegionMovementEnabled] BIT             NOT NULL,
    [IntraRegionMovementFactor]    NUMERIC (19, 6) NOT NULL
)

INSERT INTO @TerminalNewCost_History
(
	[TerminalCostVersionID],
	[TerminalCostID],
	[TerminalVersionID],
	[Cost],
	[ServiceOfferingVersionID],
    [VersionNum],
    [IsActive],
    [IsInactiveViewable],
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor]
)
SELECT LCH.[TerminalCostVersionID],
	LC.[TerminalCostID],
	LCH.[TerminalVersionID],
	dbo.FormatJsonField(LC.[Cost]),
	LCH.[ServiceOfferingVersionID],
	LCH.[VersionNum],
	LCH.[IsActive],
	LCH.[IsInactiveViewable],
	LC.[IsIntraRegionMovementEnabled],
	LC.[IntraRegionMovementFactor]
FROM dbo.[TerminalCost_History] LCH
INNER JOIN @TerminalCostTableType_Update LC ON LCH.TerminalCostID = LC.TerminalCostID AND LCH.[IsLatestVersion] = 1

UPDATE dbo.[TerminalCost_History]
SET [IsLatestVersion] = 0
FROM @TerminalNewCost_History AS A
WHERE dbo.[TerminalCost_History].[TerminalCostVersionID] = A.[TerminalCostVersionID]

SELECT @ERROR2 = @@ERROR;

INSERT INTO [dbo].[TerminalCost_History]
(
	[TerminalCostID],
	[TerminalVersionID],
	[ServiceOfferingVersionID],
	[Cost],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments],
	[IsIntraRegionMovementEnabled],
	[IntraRegionMovementFactor]
)
SELECT LCH.[TerminalCostID],
	 LCH.[TerminalVersionID],
	 LCH.[ServiceOfferingVersionID],
	 LCH.[Cost],
	 LCH.[IsActive],
	 LCH.[VersionNum] + 1,
	 1,
	 LCH.[IsInactiveViewable],
	 GETUTCDATE(),
	 'P&C System',
	 'Added Weight break levels',
	 LCH.[IntraRegionMovementFactor],
	 LCH.[IntraRegionMovementFactor]
FROM @TerminalNewCost_History LCH

SELECT @ERROR3 = @@ERROR;

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0) OR (@ERROR3 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[TerminalServicePoint_Insert_Bulk]
	@TerminalServicePointTableType TerminalServicePointTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @TerminalServicePointTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @TerminalServicePoint table
(
	[TerminalServicePointID] [bigint] NOT NULL,
	[TerminalID] [bigint] NOT NULL,
	[ServicePointID] [bigint] NOT NULL,
	[ExtraMiles] [decimal](19,6) NOT NULL
)

DECLARE @ServicePointVersionID table
(
	[ServicePointID] [bigint] NOT NULL,
	[ServicePointVersionID] [bigint] NOT NULL
)

DECLARE @TerminalVersionID table
(
	[TerminalID] [bigint] NOT NULL,
	[TerminalVersionID] [bigint] NOT NULL
)

INSERT INTO [dbo].[TerminalServicePoint]
(
	[TerminalID],
	[ServicePointID],
	[ExtraMiles],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.TerminalServicePointID,
	 INSERTED.[TerminalID],
	 INSERTED.[ServicePointID],
	 INSERTED.[ExtraMiles]
INTO @TerminalServicePoint
(
	[TerminalServicePointID],
	[TerminalID],
	[ServicePointID],
	[ExtraMiles]
)
SELECT T.[TerminalID],
	SP.[ServicePointID],
	TSPTT.[ExtraMiles],
	1,
	1
FROM @TerminalServicePointTableType TSPTT
INNER JOIN dbo.ServicePoint SP ON TSPTT.ServicePointName = SP.ServicePointName
INNER JOIN dbo.Province P ON TSPTT.[ServicePointProvinceCode] = P.[ProvinceCode] AND SP.ProvinceID = P.ProvinceID
INNER JOIN [dbo].[Terminal] T ON TSPTT.[TerminalCode] = T.[TerminalCode]

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO @ServicePointVersionID
(
	[ServicePointID],
	[ServicePointVersionID]
)
SELECT [ServicePointID],
	[ServicePointVersionID]
FROM [dbo].[ServicePoint_History]
WHERE [IsLatestVersion] = 1
AND [ServicePointID] IN (SELECT DISTINCT [ServicePointID] FROM @TerminalServicePoint)

INSERT INTO @TerminalVersionID
(
	[TerminalID],
	[TerminalVersionID]
)
SELECT [TerminalID],
	[TerminalVersionID]
FROM [dbo].[Terminal_History]
WHERE [IsLatestVersion] = 1
AND [TerminalID] IN (SELECT DISTINCT [TerminalID] FROM @TerminalServicePoint)

INSERT INTO [dbo].[TerminalServicePoint_History]
(
	[TerminalServicePointID],
	[ServicePointVersionID],
	[TerminalVersionID],
	[ExtraMiles],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT TSP.[TerminalServicePointID],
	 SPVID.[ServicePointVersionID],
	 TVID.[TerminalVersionID],
	 TSP.[ExtraMiles],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @TerminalServicePoint TSP
INNER JOIN @TerminalVersionID TVID ON TSP.[TerminalID] = TVID.[TerminalID]
INNER JOIN @ServicePointVersionID SPVID ON TSP.[ServicePointID] = SPVID.[ServicePointID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Terminal_Insert_Bulk]
	@TerminalTableType TerminalTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @TerminalTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @Terminal table
(
	[TerminalID] [bigint] NOT NULL,
	[TerminalName] [nvarchar](50) NOT NULL,
	[TerminalCode] [nvarchar] (3) NOT NULL,
	[CityID] [bigint] NOT NULL,
	[RegionID] [bigint] NOT NULL
)

BEGIN TRAN

DECLARE @TerminalWithCityIDRegionID table
(
	[TerminalName] [nvarchar](50) NOT NULL,
	[TerminalCode] [nvarchar] (3) NOT NULL,
	[CityID] [bigint] NOT NULL,
	[RegionID] [bigint] NOT NULL
)

DECLARE @CityVersionID table
(
	[CityID] [bigint] NOT NULL,
	[CityVersionID] [bigint] NOT NULL
)

DECLARE @RegionVersionID table
(
	[RegionID] [bigint] NOT NULL,
	[RegionVersionID] [bigint] NOT NULL
)

INSERT INTO @TerminalWithCityIDRegionID
(
	[TerminalName],
	[TerminalCode],
	[CityID],
	[RegionID]
)
SELECT TTT.[TerminalName],
	TTT.[TerminalCode],
	Y.[CityID],
	O.[RegionID]
FROM @TerminalTableType TTT
INNER JOIN [dbo].[City] Y ON TTT.[CityName] = Y.[CityName]
INNER JOIN [dbo].[Province] P ON Y.[ProvinceID] = P.[ProvinceID] AND TTT.[ProvinceCode] = P.[ProvinceCode]
INNER JOIN [dbo].[Region] R ON P.[RegionID] = R.[RegionID]
INNER JOIN [dbo].[Country] C ON R.[CountryID] = C.[CountryID] AND TTT.[CountryCode] = C.[CountryCode]
INNER JOIN [dbo].[Region] O ON TTT.[RegionCode] = O.[RegionCode] AND TTT.[RegionCode] = O.[RegionCode]

INSERT INTO @CityVersionID
(
	[CityID],
	[CityVersionID]
)
SELECT [CityID],
	[CityVersionID]
FROM [dbo].[City_History]
WHERE [IsLatestVersion] = 1
AND [CityID] IN (SELECT DISTINCT [CityID] FROM @TerminalWithCityIDRegionID)

INSERT INTO @RegionVersionID
(
	[RegionID],
	[RegionVersionID]
)
SELECT [RegionID],
	[RegionVersionID]
FROM [dbo].[Region_History]
WHERE [IsLatestVersion] = 1
AND [RegionID] IN (SELECT DISTINCT [RegionID] FROM @TerminalWithCityIDRegionID)


INSERT INTO [dbo].[Terminal]
(
	[TerminalName],
	[TerminalCode],
	[CityID],
	[RegionID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.TerminalID,
	 INSERTED.TerminalName,
	 INSERTED.TerminalCode,
	 INSERTED.CityID,
	 INSERTED.RegionID
INTO @Terminal
(
	[TerminalID],
	[TerminalName],
	[TerminalCode],
	[CityID],
	[RegionID]
)
SELECT [TerminalName],
	[TerminalCode],
	[CityID],
	[RegionID],
	1,
	1
FROM @TerminalWithCityIDRegionID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Terminal_History]
(
	[TerminalID],
	[TerminalName],
	[TerminalCode],
	[CityVersionID],
	[RegionVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT T.[TerminalID],
	 T.[TerminalName],
	 T.[TerminalCode],
	 CVID.[CityVersionID],
	 RVID.[RegionVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Terminal T
INNER JOIN @CityVersionID CVID ON T.[CityID] = CVID.[CityID]
INNER JOIN @RegionVersionID RVID ON T.[RegionID] = RVID.[RegionID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[Unit_Insert_Bulk]
	@UnitTableType UnitTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @UnitTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @Unit table
(
	[UnitID]       BIGINT          NOT NULL,
    [UnitName]           NVARCHAR (50) NOT NULL,
    [UnitSymbol]         NVARCHAR (50) NOT NULL,
    [UnitType]           NVARCHAR (50) NOT NULL
)

INSERT INTO [dbo].[Unit]
(
	[UnitName],
    [UnitSymbol],
	[UnitType],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[UnitID],
	 INSERTED.[UnitName],
	 INSERTED.[UnitSymbol],
	 INSERTED.[UnitType]
INTO @Unit
(
	[UnitID],
	[UnitName],
    [UnitSymbol],
	[UnitType]
)
SELECT [UnitName],
    [UnitSymbol],
	[UnitType],
	1,
	1
FROM @UnitTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[Unit_History]
(
	[UnitID],
	[UnitName],
    [UnitSymbol],
	[UnitType],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT [UnitID],
	[UnitName],
    [UnitSymbol],
	[UnitType],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @Unit

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[UserServiceLevel_Insert_Bulk]
	@UserServiceLevelTableType UserServiceLevelTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @UserServiceLevelTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @UserServiceLevel table
(
	[UserServiceLevelID] [bigint] NOT NULL,
	[UserID] [bigint] NOT NULL,
	[ServiceLevelID] [bigint] NOT NULL
)

BEGIN TRAN

DECLARE @UserVersionID table
(
	[UserID] [bigint] NOT NULL,
	[UserVersionID] [bigint] NOT NULL
)

INSERT INTO @UserVersionID
(
	[UserID],
	[UserVersionID]
)
SELECT [UserID],
	[UserVersionID]
FROM [dbo].[User_History]
WHERE [IsLatestVersion] = 1
AND [UserID] IN (SELECT DISTINCT [UserID] FROM @UserServiceLevelTableType)


DECLARE @ServiceLevelVersionID table
(
	[ServiceLevelID] [bigint] NOT NULL,
	[ServiceLevelVersionID] [bigint] NOT NULL
)

INSERT INTO @ServiceLevelVersionID
(
	[ServiceLevelID],
	[ServiceLevelVersionID]
)
SELECT [ServiceLevelID],
	[ServiceLevelVersionID]
FROM [dbo].[ServiceLevel_History]
WHERE [IsLatestVersion] = 1
AND [ServiceLevelID] IN (SELECT DISTINCT [ServiceLevelID] FROM @UserServiceLevelTableType)


INSERT INTO [dbo].[UserServiceLevel]
(
	[UserID],
	[ServiceLevelID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[UserServiceLevelID],
	 INSERTED.[UserID],
	 INSERTED.[ServiceLevelID]
INTO @UserServiceLevel
(
	[UserServiceLevelID],
	[UserID],
	[ServiceLevelID]
)
SELECT [UserID],
	[ServiceLevelID],
	1,
	1
FROM @UserServiceLevelTableType

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[UserServiceLevel_History]
(
	[UserServiceLevelID],
	[UserVersionID],
	[ServiceLevelVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT USL.[UserServiceLevelID],
	 UVID.[UserVersionID],
	 SLVID.[ServiceLevelVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @UserServiceLevel USL
INNER JOIN @UserVersionID UVID ON USL.[UserID] = UVID.[UserID]
INNER JOIN @ServiceLevelVersionID SLVID ON USL.[ServiceLevelID] = SLVID.[ServiceLevelID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[User_Insert_Bulk]
	@UserTableType UserTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @UserTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

DECLARE @User table
(
	[UserID] [bigint] NOT NULL,
	[UserName] [nvarchar](50) NOT NULL,
	[UserEmail]        NVARCHAR (50) NOT NULL,
    [PersonaID]        BIGINT NOT NULL,
	[AzureIsActive]	   BIT NOT NULL,
	[IsAway]	   BIT NOT NULL,
	[HasSelfAssign]	   BIT NOT NULL,
	[CanProcessSCS]			BIT NOT NULL,
	[CanProcessRequests]			BIT NOT NULL,
	[CanProcessReviews]			BIT NOT NULL
)

BEGIN TRAN

INSERT INTO [dbo].[User]
(
	[UserName],
	[UserEmail],
	[PersonaID],
	[password],
	[IsActive],
	[IsInactiveViewable],
	[AzureIsActive],
	[IsAway],
	[HasSelfAssign],
	[CanProcessSCS],
	[CanProcessRequests],
	[CanProcessReviews]
)
OUTPUT INSERTED.[UserID],
	 INSERTED.[UserName],
	 INSERTED.[UserEmail],
	 INSERTED.[PersonaID],
	 INSERTED.[AzureIsActive],
	 INSERTED.[IsAway],
	 INSERTED.[HasSelfAssign],
	 INSERTED.[CanProcessSCS],
	 INSERTED.[CanProcessRequests],
	 INSERTED.[CanProcessReviews]
INTO @User
(
	[UserID],
	[UserName],
	[UserEmail],
	[PersonaID],
	[AzureIsActive],
	[IsAway],
	[HasSelfAssign],
	[CanProcessSCS],
	[CanProcessRequests],
	[CanProcessReviews]
)
SELECT U.[UserName],
	U.[UserEmail],
	P.[PersonaID],
	'',
	1,
	1,
	1,
	0,
	0,
	[CanProcessSCS],
	[CanProcessRequests],
	[CanProcessReviews]
FROM @UserTableType U
INNER JOIN dbo.Persona P ON U.PersonaName = P.PersonaName

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

UPDATE dbo.[User]
SET [UserManagerID] = A.[UserManagerID]
FROM
(SELECT UTT.[UserEmail], U.[UserID] AS [UserManagerID]
FROM @User AS U
INNER JOIN @UserTableType UTT ON U.[UserEmail] = UTT.[UserManagerEmail]
WHERE UTT.[UserManagerEmail] IS NOT NULL) AS A
WHERE dbo.[User].[UserEmail] = A.[UserEmail]

DECLARE @UserHistory TABLE
(
	[UserID] BIGINT NOT NULL,
	[UserEmail] NVARCHAR (50) NOT NULL,
	[UserVersionID] BIGINT NOT NULL
)

INSERT INTO [dbo].[User_History]
(
	[UserID],
	[UserName],
	[UserEmail],
	[PersonaVersionID],
	[password],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments],
	[AzureIsActive],
	[IsAway],
	[HasSelfAssign],
	[CanProcessSCS],
	[CanProcessRequests],
	[CanProcessReviews]
)
OUTPUT INSERTED.[UserID],
	 INSERTED.[UserVersionID],
	 INSERTED.[UserEmail]
INTO @UserHistory
(
	[UserID],
	[UserVersionID],
	[UserEmail]
)
SELECT U.[UserID],
	 U.[UserName],
	 U.[UserEmail],
	 PH.[PersonaVersionID],
	 '',
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments,
	U.[AzureIsActive],
	U.[IsAway],
	U.[HasSelfAssign],
	[CanProcessSCS],
	[CanProcessRequests],
	[CanProcessReviews]
FROM @User U
INNER JOIN dbo.Persona_History PH ON U.PersonaID = PH.PersonaID AND PH.IsLatestVersion = 1

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

UPDATE dbo.User_History
SET UserManagerVersionID = A.UserManagerVersionID
FROM
(SELECT UTT.[UserEmail], U.[UserVersionID] AS UserManagerVersionID
FROM @UserHistory AS U
INNER JOIN @UserTableType UTT ON U.[UserEmail] = UTT.[UserManagerEmail]
WHERE UTT.[UserManagerEmail] IS NOT NULL) AS A
WHERE dbo.User_History.[UserEmail] = A.[UserEmail]

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go

CREATE   PROCEDURE [dbo].[WeightBreakHeader_Insert_Bulk]
	@WeightBreakHeaderTableType WeightBreakHeaderTableType READONLY,
	@UpdatedBy nvarchar(50) = NULL,
	@Comments nvarchar(4000) = NULL
AS

SET NOCOUNT ON;

DECLARE @ERROR1 INT, @ERROR2 INT, @ROWCOUNT1 INT, @ROWCOUNT2 INT, @InputCount INT;

SELECT @InputCount = Count(*) FROM @WeightBreakHeaderTableType;

IF @UpdatedBy IS NULL
	SELECT @UpdatedBy = 'P&C System';

IF @Comments IS NULL
	SELECT @Comments = 'Created first version.';

BEGIN TRAN

DECLARE @WeightBreakHeader table
(
    [WeightBreakHeaderID]   BIGINT          NOT NULL,
    [WeightBreakHeaderName] NVARCHAR (50)   NOT NULL,
    [UnitFactor]            NUMERIC (19, 6) NOT NULL,
    [MaximumValue]          NUMERIC (19, 6) NOT NULL,
    [AsRating]       BIT             NOT NULL,
	[HasMin]       BIT             NOT NULL,
	[HasMax]       BIT             NOT NULL,
    [BaseRate]              BIT             NOT NULL,
    [Levels]                NVARCHAR (MAX)  NOT NULL,
    [ServiceLevelID]        BIGINT          NOT NULL,
    [UnitID]                BIGINT          NOT NULL
)

DECLARE @WeightBreakHeaderID table
(
    [WeightBreakHeaderName] NVARCHAR (50)   NOT NULL,
    [UnitFactor]            NUMERIC (19, 6) NOT NULL,
    [MaximumValue]          NUMERIC (19, 6) NOT NULL,
    [AsRating]       BIT             NOT NULL,
	[HasMin]       BIT             NOT NULL,
	[HasMax]       BIT             NOT NULL,
    [BaseRate]              BIT             NOT NULL,
    [Levels]                NVARCHAR (MAX)  NOT NULL,
    [ServiceLevelID]        BIGINT          NOT NULL,
    [UnitID]                BIGINT          NOT NULL
)

DECLARE @ServiceLevelVersionID table
(
	[ServiceLevelID] [bigint] NOT NULL,
	[ServiceLevelVersionID] [bigint] NOT NULL
)

DECLARE @UnitVersionID table
(
	[UnitID] [bigint] NOT NULL,
	[UnitVersionID] [bigint] NOT NULL
)

INSERT INTO @WeightBreakHeaderID
(
    [WeightBreakHeaderName],
    [UnitFactor],
    [MaximumValue],
    [AsRating],
	[HasMin],
	[HasMax],
    [BaseRate],
    [Levels],
    [ServiceLevelID],
    [UnitID]
)
SELECT WB.[WeightBreakHeaderName],
    WB.[UnitFactor],
    WB.[MaximumValue],
    WB.[AsRating],
	WB.[HasMin],
	WB.[HasMax],
    WB.[BaseRate],
    WB.[Levels],
    SL.[ServiceLevelID],
    U.[UnitID]
FROM @WeightBreakHeaderTableType WB
INNER JOIN dbo.[ServiceOffering] SO ON WB.[ServiceOfferingName] = SO.[ServiceOfferingName]
INNER JOIN dbo.ServiceLevel SL ON SO.[ServiceOfferingID] = SL.[ServiceOfferingID] AND WB.ServiceLevelCode = SL.ServiceLevelCode
INNER JOIN dbo.Unit U ON WB.UnitSymbol = U.UnitSymbol


INSERT INTO @ServiceLevelVersionID
(
	[ServiceLevelID],
	[ServiceLevelVersionID]
)
SELECT [ServiceLevelID],
	[ServiceLevelVersionID]
FROM [dbo].[ServiceLevel_History] SLH
WHERE SLH.[IsLatestVersion] = 1
AND [ServiceLevelID] IN (SELECT DISTINCT [ServiceLevelID] FROM @WeightBreakHeaderID)

INSERT INTO @UnitVersionID
(
	[UnitID],
	[UnitVersionID]
)
SELECT [UnitID],
	[UnitVersionID]
FROM [dbo].[Unit_History] UH
WHERE UH.[IsLatestVersion] = 1
AND [UnitID] IN (SELECT DISTINCT [UnitID] FROM @WeightBreakHeaderID)

INSERT INTO [dbo].[WeightBreakHeader]
(
    [WeightBreakHeaderName],
    [UnitFactor],
    [MaximumValue],
    [AsRating],
	[HasMin],
	[HasMax],
    [BaseRate],
    [Levels],
    [ServiceLevelID],
    [UnitID],
	[IsActive],
	[IsInactiveViewable]
)
OUTPUT INSERTED.[WeightBreakHeaderID],
	 INSERTED.[WeightBreakHeaderName],
	 INSERTED.[UnitFactor],
	 INSERTED.[MaximumValue],
	 INSERTED.[AsRating],
	 INSERTED.[HasMin],
	 INSERTED.[HasMax],
	 INSERTED.[BaseRate],
	 INSERTED.[Levels],
	 INSERTED.[ServiceLevelID],
	 INSERTED.[UnitID]
INTO @WeightBreakHeader
(
	[WeightBreakHeaderID],
    [WeightBreakHeaderName],
    [UnitFactor],
    [MaximumValue],
    [AsRating],
	[HasMin],
	[HasMax],
    [BaseRate],
    [Levels],
    [ServiceLevelID],
    [UnitID]
)
SELECT [WeightBreakHeaderName],
    [UnitFactor],
    [MaximumValue],
    [AsRating],
	[HasMin],
	[HasMax],
    [BaseRate],
    [Levels],
    [ServiceLevelID],
    [UnitID],
	1,
	1
FROM @WeightBreakHeaderID

SELECT @ERROR1 = @@ERROR, @ROWCOUNT1 = @@ROWCOUNT

INSERT INTO [dbo].[WeightBreakHeader_History]
(
	[WeightBreakHeaderID],
	[WeightBreakHeaderName],
    [UnitFactor],
    [MaximumValue],
    [AsRating],
	[HasMin],
	[HasMax],
    [BaseRate],
    [Levels],
    [ServiceLevelVersionID],
    [UnitVersionID],
	[IsActive],
	[VersionNum],
	[IsLatestVersion],
	[IsInactiveViewable],
	[UpdatedOn],
	[UpdatedBy],
	[Comments]
)
SELECT WB.[WeightBreakHeaderID],
	WB.[WeightBreakHeaderName],
    WB.[UnitFactor],
    WB.[MaximumValue],
    WB.[AsRating],
	WB.[HasMin],
	WB.[HasMax],
    WB.[BaseRate],
    WB.[Levels],
    SL.[ServiceLevelVersionID],
    U.[UnitVersionID],
	 1,
	 1,
	 1,
	 1,
	 GETUTCDATE(),
	 @UpdatedBy,
	 @Comments
FROM @WeightBreakHeader WB
INNER JOIN @ServiceLevelVersionID SL ON WB.[ServiceLevelID] = SL.[ServiceLevelID]
INNER JOIN @UnitVersionID U ON WB.[UnitID] = U.[UnitID]

SELECT @ERROR2 = @@ERROR, @ROWCOUNT2 = @@ROWCOUNT

IF (@ERROR1 <> 0) OR (@ERROR2 <> 0)

	BEGIN
	ROLLBACK TRAN
	RAISERROR('Insert Procedure Failed!', 16, 1)
	RETURN 0
	END

IF (@ROWCOUNT1 <> @InputCount) OR (@ROWCOUNT2 <> @InputCount)

	BEGIN
	ROLLBACK TRAN
	IF (@ROWCOUNT1 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT1,  @InputCount);
	IF (@ROWCOUNT2 <> @InputCount)
		RAISERROR('%d Records Affected by Insert Procedure while the expected number of record is %d!', 16, 1, @ROWCOUNT2, @InputCount);
	RETURN 0
	END

COMMIT TRAN

RETURN 1
go


CREATE FUNCTION [dbo].[d83CheckMinimums](@zip varchar(7))
RETURNS @MinFactorRevenueTable TABLE (
	MinFactorRevenue decimal(11,2))
AS
BEGIN
	Declare @MinFactor int

	/********************************/
	-- Lookup Minimums
	IF	(Len(@zip) = 5 AND Left(@zip,1) BETWEEN '0' AND '9'	)
	BEGIN
		------------------------------------------------------------
		-- #2a		CHECK USA RANGES #1
		Set @MinFactor =
		(
			Select Factor_Minimum
		from dbo.Section6
		where (Len(ZipCode1) = 8 AND SUBSTRING(ZipCode1,6,1) = '-')
			AND @zip between LEFT(ZipCode1,5) AND (LEFT(ZipCode1,3) + RIGHT(ZipCode1,2))
		)
	END

	IF @MinFactor IS NULL
	BEGIN
		------------------------------------------------------------
		-- #1	(FULL - e.g. 04730 or A1A1A1
		Set @MinFactor = (Select Factor_Minimum
		from dbo.Section6
		where ZipCode1 = @zip)
		IF @MinFactor IS NULL
		BEGIN
			-- #1	LEFT(Zip,3)
			Set @MinFactor = (Select Factor_Minimum
			from dbo.Section6
			where ZipCode1 = Left(@zip,3))
		END
	END



	IF (@MinFactor IS NULL)
	BEGIN
		-- Default to lowest..
		Set @MinFactor = 0
	END

	INSERT INTO @MinFactorRevenueTable
	SELECT Isnull(MinDivisionAmt,0.00)
	FROM dbo.MinimumDivision
	WHERE
		@MinFactor Between LowFactor and HiFactor

		-- Only select the most recent effective date for the matching factor
		-- NOTE:  This logic works fine for minimum changes...based on effective dates only.
		--....if Factor ranges changed...may need to alter logic.
		AND EffectiveDate =
	(
		Select MAX(EffectiveDate)
		FROM dbo.MinimumDivision
		WHERE @MinFactor Between LowFactor and HiFactor
			AND EffectiveDate <= GetDate()
	)




	RETURN
END


/*
Select * from Section6 where Len(ZipCode1) = 8 and Len(ZipCode2) <> 5
Select *, LEFT(ZipCode1,5) As Range1, (LEFT(ZipCode1,3) + RIGHT(ZipCode1,2)) As Range2 from Section6 where Len(ZipCode1) = 8 AND Factor_Minimum > 80
*/
go


CREATE FUNCTION [dbo].[d83CheckPlus30Factor](		@Orig varchar(7), @intchg varchar(7), @Dest varchar(7)		)
	RETURNS @Plus30FactorTable TABLE (
	Plus30FactorOrig decimal(9,2),
	Plus30FactorDest decimal(9,2))  AS
BEGIN
	Declare @Plus30FactorOrig int, @Plus30FactorDest int

	/*
Logic from Rocky Mountain...
IF isONPQ(origin) AND isStatesListed(destination) AND isZipsListed(interchange)
    THEN addThirty(originTOinterchangeLeg)
ELSE
    IF  isONPQ(destination) AND isStatesListed(origin) AND isZipsListed(interchange)
        THEN addThirty(destinationTOinterchangeLeg)
    ELSE
        doNothing
    ENDIF
ENDIF
*/

	-- Must be an Interchange point in the [Plus30InterchangeList]
	IF EXISTS(	SELECT *
	FROM dbo.Plus30InterchangeList
	WHERE Zip = LEFT(@intchg,3)	)
BEGIN


		IF (	((LEFT(@Orig,1) between 'A' AND 'Z') AND (LEFT(@Dest,1) between '0' AND '9'))
			OR ((LEFT(@Dest,1) between 'A' AND 'Z') AND (LEFT(@Orig,1) between '0' AND '9'))	)
BEGIN



			IF (	(LEFT(@Orig,1) between 'A' AND 'Z') AND (LEFT(@Dest,1) between '0' AND '9')	)
	BEGIN
				-- Both the @Orig & @Dest must be within the [Plus30Factor] ranges....
				IF EXISTS(SELECT *
					FROM dbo.Plus30Factor
					WHERE LEFT(@Orig,3) BETWEEN LEFT(Zip_Range,3) AND RIGHT(Zip_Range,3))
					AND EXISTS(SELECT *
					FROM dbo.Plus30Factor
					WHERE LEFT(@Dest,5) BETWEEN LEFT(Zip_Range,5) AND RIGHT(Zip_Range,5))
		BEGIN
					--Plus30Factor applies between the Interchange and Canadian Point...
					SET @Plus30FactorOrig = (	SELECT Plus30FactorAmt
					FROM dbo.Plus30Factor
					WHERE LEFT(@Orig,3) BETWEEN LEFT(Zip_Range,3) AND RIGHT(Zip_Range,3)		)
					SET @Plus30FactorDest = 0
				END
		ELSE
		BEGIN
					-- This logic should never execute in theory but is a catchall to ensure no assumption gets missed.
					SET @Plus30FactorOrig = 0
					SET @Plus30FactorDest = 0
				END
			END
	ELSE IF (	(LEFT(@Dest,1) between 'A' AND 'Z') AND (LEFT(@Orig,1) between '0' AND '9'))
	BEGIN

				IF EXISTS(SELECT *
					FROM dbo.Plus30Factor
					WHERE LEFT(@Dest,3) BETWEEN LEFT(Zip_Range,3) AND RIGHT(Zip_Range,3))
					AND EXISTS(SELECT *
					FROM dbo.Plus30Factor
					WHERE LEFT(@Orig,5) BETWEEN LEFT(Zip_Range,5) AND RIGHT(Zip_Range,5))
		BEGIN
					SET @Plus30FactorOrig = 0
					SET @Plus30FactorDest = (	SELECT Plus30FactorAmt
					FROM dbo.Plus30Factor
					WHERE LEFT(@Dest,3) BETWEEN LEFT(Zip_Range,3) AND RIGHT(Zip_Range,3)		)
				END
		ELSE
		BEGIN
					-- This logic should never execute in theory but is a catchall to ensure no assumption gets missed.
					SET @Plus30FactorOrig = 0
					SET @Plus30FactorDest = 0
				END
			END

		END






	END

	INSERT INTO @Plus30FactorTable
	Values( IsNull(@Plus30FactorOrig,0.00), ISNULL(@Plus30FactorDest,0.00)	)

	RETURN
END
go


CREATE FUNCTION [dbo].[d83CheckPlusFactor]
(
	@orig varchar(7)		-- Origin
	, @IntZip varchar(7)	-- Interchange zip
	, @dest varchar(7)		-- Destination
)
	RETURNS @PlusFactorTable TABLE (
	PlusFactor1 decimal(9,2),
	PlusFactor2 decimal(9,2))  AS
BEGIN
	Declare @PlusFactor1 decimal(9,2), @PlusFactor2 decimal(9,2)


	/*
	Shipments moving between points in the United States assigned MI Zip Codes 480-483, on the one hand,
	and, points in Canada assigned Canadian Postal Codes as shown in Note 1 on the other, which are
	interchanged at MI Zip Codes 480-483, the factor to apply between MI Zip Codes 480-483 and the
	Canadian origin or destination shall be as published in D83, plus ten (10) factors.
	Note 1 - Canada Postal Codes are as follows:
	N0J-N0R		N4S-N4V		N4Z-N5B		N5P-N5R		N5V-N6N		N7L-N7M		N7S-N7X		N8N-N9K
	N5C		N4G		N5H		N7A		N7G		N8A		N8H		N8M		N9V		N9Y

	IF @Interchange in [480-483]	AND		(@Orig in [480-483]	OR	@Dest in [480-483])
*/







	/*
	Interchange must be a zip in the range defined within the PlusFactor table ...[480-483]
	At least the origin or destination must also be in the same zip range....
	And then the Origin or destination must also be a province code matching the "PCode" in the PlusFactor table...
*/


	IF LEFT(@orig,1) BETWEEN 'A' AND 'Z'
	BEGIN

		SELECT
			@PlusFactor1 = IsNull(PlusFactorAmt,0.00)
		FROM dbo.PlusFactor
		WHERE
			LEFT(@IntZip,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3)
			AND LEFT(@orig,3) BETWEEN LEFT(PCode,3) AND RIGHT(PCode,3)
			AND LEFT(@dest,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3) -- If Origin is Canada, @dest must match Interchange
			AND EffectiveDate =
		(
			SELECT Max(EffectiveDate)
			FROM dbo.PlusFactor
			WHERE
				LEFT(@IntZip,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3)
				AND LEFT(@orig,3) BETWEEN LEFT(PCode,3) AND RIGHT(PCode,3)
				AND LEFT(@dest,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3) -- If Origin is Canada, @dest must match Interchange
				AND EffectiveDate <= GETDATE()
			GROUP BY Zip, Pcode
		)

	END

	IF LEFT(@dest,1) BETWEEN 'A' AND 'Z'
	BEGIN

		SELECT
			@PlusFactor2 = IsNull(PlusFactorAmt,0.00)
		FROM dbo.PlusFactor
		WHERE
			LEFT(@IntZip,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3)
			AND LEFT(@dest,3) BETWEEN LEFT(PCode,3) AND RIGHT(PCode,3)
			AND LEFT(@orig,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3) -- If Destination is Canada, @orig must match Interchange
			AND EffectiveDate =
		(
			SELECT Max(EffectiveDate)
			FROM dbo.PlusFactor
			WHERE
				LEFT(@IntZip,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3)
				AND LEFT(@dest,3) BETWEEN LEFT(PCode,3) AND RIGHT(PCode,3)
				AND LEFT(@orig,3) BETWEEN	LEFT(Zip,3) AND RIGHT(Zip,3) -- If Origin is Canada, @dest must match Interchange
				AND EffectiveDate <= GETDATE()
			GROUP BY Zip, Pcode
		)

	END

	INSERT INTO @PlusFactorTable
	Values( Isnull(@PlusFactor1,0.00), IsNull(@PlusFactor2,0.00)		)

	RETURN
END
go


CREATE FUNCTION [dbo].[d83SplitFactor]
(
	-- Previous Fiscal Q1 Reveneue (by Tier)
	@zip1 varchar(7)
	, @zip2 varchar(7)
)
RETURNS @FactorTable TABLE (
	Factor decimal(9,2))
AS
BEGIN
	Declare @Factor int
	/*
	**************************************************************
	First,
		Look up EACH pair of ZIP Codes in Section 4
				(origin ZIP		to		interline ZIP)
				(interline ZIP	to		destination ZIP)
		...If the pair is found, save the EXCEPTION FACTOR.

	Next,
		IF NO EXCEPTION
		...lookup "FACTOR" from Section 3
	****************************************************************************************************
	NOTE:
		Section 3/4 tables are "BETWEEN/AND" as well as being both 3 digit and 5 digit ZIP codes.
		Any 3 digit ZIP Code includes all ZIP Codes contained within the range of [xxx00] thru [xxx99].
		This configuration results in the need to make multiple passes against the data.
		If the "zip pair" is NOT found in Section 4, look them up in Section 3.
	****************************************************************************************************
*/



	/*
	Modification:  20180524
	Section 3 data is storing partial HiZipCodes (first 3 digits)
	Section 4 data is storing full HiZipCodes (all 5 digits).

	Hence some ranges and logic below don't apply on Section 4 table...so removing specific Lookups for ranges on 3 digit values....
*/

	/********************************/
	-- Lookup Exceptions
	------------------------------------------------------------
	-- LookupX1	(ZIP1 to ZIP2)
	Set @Factor = (Select Factor_Exception
	from dbo.Section4
	where LowZipCode = @zip1 AND HiZipCode = @zip2)
	IF @Factor IS NULL
	BEGIN
		------------------------------------------------------------
		-- LookupX2(	ZIP2	 to	ZIP1)
		Set @Factor = (Select Factor_Exception
		from dbo.Section4
		where LowZipCode = @zip2 AND HiZipCode = @zip1)
		IF @Factor IS NULL
		BEGIN
			------------------------------------------------------------
			-- LookupX3 (	LEFT(ZIP1,3)	to	ZIP2)
			Set @Factor = (Select Factor_Exception
			from dbo.Section4
			where LowZipCode = Left(@zip1,3) AND HiZipCode = @zip2)
			IF @Factor IS NULL
			BEGIN
				------------------------------------------------------------
				-- LookupX4 (	LEFT(ZIP2,3)	to	ZIP1)
				Set @Factor = (Select Factor_Exception
				from dbo.Section4
				where LowZipCode = Left(@zip2,3) AND HiZipCode = @zip1)
				IF @Factor IS NULL
				BEGIN
					------------------------------------------------------------
					-- LookupX5 (	ZIP1	to	LEFT(ZIP2,3)	)
					Set @Factor = (Select Factor_Exception
					from dbo.Section4
					where LowZipCode = @zip1 AND HiZipCode = Left(@zip2,3))
					IF @Factor IS NULL
					BEGIN
						------------------------------------------------------------
						-- LookupX6 (	ZIP2	to	LEFT(ZIP1,3)	)
						Set @Factor = (Select Factor_Exception
						from dbo.Section4
						where LowZipCode = @zip2 AND HiZipCode = Left(@zip1,3))
						IF @Factor IS NULL
						BEGIN
							------------------------------------------------------------
							-- LookupX7 (	Left(ZIP1,3)	to	LEFT(ZIP2,3)	)
							Set @Factor = (Select Factor_Exception
							from dbo.Section4
							where LowZipCode = Left(@zip1,3) AND HiZipCode = Left(@zip2,3))
							IF @Factor IS NULL
							BEGIN
								------------------------------------------------------------
								-- LookupX8 (	Left(ZIP2,3)	to	LEFT(ZIP1,3)	)
								Set @Factor = (Select Factor_Exception
								from dbo.Section4
								where LowZipCode = Left(@zip2,3) AND HiZipCode = Left(@zip1,3))
								IF @Factor IS NULL
								BEGIN

									/*********************************************************************************************/
									-- check ranges
									/*********************************************************************************************/
									------------------------------------------------------------
									-- LookupXR9 (	"LOW-RANGE"	to	ZIP2	)
									Set @Factor = (Select Factor_Exception
									from dbo.Section4
									where Left(@zip1,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
										AND HiZipCode = @zip2)
									IF @Factor IS NULL
									BEGIN
										------------------------------------------------------------
										-- LookupXR10 (	"LOW-RANGE"	to	ZIP1	)
										Set @Factor = (Select Factor_Exception
										from dbo.Section4
										where Left(@zip2,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
											AND HiZipCode = @zip1)
										IF @Factor IS NULL
										BEGIN
											------------------------------------------------------------
											-- LookupXR11 (	"LOW-RANGE"	to	Left(ZIP2,3)	)
											Set @Factor = (Select Factor_Exception
											from dbo.Section4
											where Left(@zip1,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
												AND HiZipCode = Left(@zip2,3))
											IF @Factor IS NULL
											BEGIN
												------------------------------------------------------------
												-- LookupXR12 (	"LOW-RANGE"	to	Left(ZIP1,3)	)
												Set @Factor = (Select Factor_Exception
												from dbo.Section4
												where Left(@zip2,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
													AND HiZipCode = Left(@zip1,3))
											--IF @Factor IS NULL
											--BEGIN
											--	------------------------------------------------------------
											--	-- LookupXR13 (	ZIP1	to	"HI-RANGE"	)
											--	Set @Factor = (Select Factor_Exception from dbo.Section4
											--					where LowZipCode = @zip1
											--						AND Left(@zip2,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
											--	IF @Factor IS NULL
											--	BEGIN
											--		------------------------------------------------------------
											--		-- LookupXR14 (	ZIP2	to	"HI-RANGE"	)
											--		Set @Factor = (Select Factor_Exception from dbo.Section4
											--						where LowZipCode = @zip2
											--							AND Left(@zip1,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
											--		IF @Factor IS NULL
											--		BEGIN
											--			------------------------------------------------------------
											--			-- LookupXR15 (	Left(ZIP1,3)	to	"HI-RANGE"	)
											--			Set @Factor = (Select Factor_Exception from dbo.Section4
											--							where LowZipCode = Left(@zip1,3)
											--								AND Left(@zip2,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
											--			IF @Factor IS NULL
											--			BEGIN
											--				------------------------------------------------------------
											--				-- LookupXR16 (	Left(ZIP1,3)	to	"HI-RANGE"	)
											--				Set @Factor = (Select Factor_Exception from dbo.Section4
											--								where LowZipCode = Left(@zip2,3)
											--									AND Left(@zip1,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
											--				IF @Factor IS NULL
											--				BEGIN
											--					------------------------------------------------------------
											--					-- LookupXR17 (	Z1"LOW-RANGE"   to	Z2"HI-RANGE"	)
											--					Set @Factor = (Select Factor_Exception from dbo.Section4
											--									where Left(@zip1,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
											--										AND Left(@zip2,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
											--					IF @Factor IS NULL
											--					BEGIN
											--						------------------------------------------------------------
											--						-- LookupXR1 (	Z1"HI-RANGE"   to	Z2"LOW-RANGE"	)
											--						Set @Factor = (Select Factor_Exception from dbo.Section4
											--										where Left(@zip2,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
											--											AND Left(@zip1,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))

											--					END --xR17
											--				END --xR16
											--			END --xR15
											--		END --xR14
											--	END --xR13
											--END --xR12
											END
										--xR11
										END
									--xR10
									END
								--xR9
								/*********************************************************************************************/
								-- end of check ranges
								/*********************************************************************************************/
								END
							--x8
							END--x7
						END--x6
					END--x5
				END--x4
			END--x3
		END--x2
	END--x1
	-- Lookup Exceptions
	/********************************/



	/********************************/
	-- Lookup Primary
	IF (@Factor IS NULL)
	BEGIN
		Set @Factor = (SELECT Factor
		FROM dbo.Section3
		where LowZipCode = @zip1 AND HiZipCode = @zip2)
		IF @Factor IS NULL
		BEGIN
			------------------------------------------------------------
			-- LookupP2(	ZIP2	 to	ZIP1)
			Set @Factor = (SELECT Factor
			FROM dbo.Section3
			where LowZipCode = @zip2 AND HiZipCode = @zip1)
			IF @Factor IS NULL
			BEGIN
				------------------------------------------------------------
				-- LookupP3 (	LEFT(ZIP1,3)	to	ZIP2)
				Set @Factor = (SELECT Factor
				FROM dbo.Section3
				where LowZipCode = Left(@zip1,3) AND HiZipCode = @zip2)
				IF @Factor IS NULL
				BEGIN
					------------------------------------------------------------
					-- LookupP4 (	LEFT(ZIP2,3)	to	ZIP1)
					Set @Factor = (SELECT Factor
					FROM dbo.Section3
					where LowZipCode = Left(@zip2,3) AND HiZipCode = @zip1)
					IF @Factor IS NULL
					BEGIN
						------------------------------------------------------------
						-- LookupP5 (	ZIP1	to	LEFT(ZIP2,3)	)
						Set @Factor = (SELECT Factor
						FROM dbo.Section3
						where LowZipCode = @zip1 AND HiZipCode = Left(@zip2,3))
						IF @Factor IS NULL
						BEGIN
							------------------------------------------------------------
							-- LookupP6 (	ZIP2	to	LEFT(ZIP1,3)	)
							Set @Factor = (SELECT Factor
							FROM dbo.Section3
							where LowZipCode = @zip2 AND HiZipCode = Left(@zip1,3))
							IF @Factor IS NULL
							BEGIN
								------------------------------------------------------------
								-- LookupP7 (	Left(ZIP1,3)	to	LEFT(ZIP2,3)	)
								Set @Factor = (SELECT Factor
								FROM dbo.Section3
								where LowZipCode = Left(@zip1,3) AND HiZipCode = Left(@zip2,3))
								IF @Factor IS NULL
								BEGIN
									------------------------------------------------------------
									-- LookupP8 (	Left(ZIP2,3)	to	LEFT(ZIP1,3)	)
									Set @Factor = (SELECT Factor
									FROM dbo.Section3
									where LowZipCode = Left(@zip2,3) AND HiZipCode = Left(@zip1,3))
									IF @Factor IS NULL
									BEGIN

										/*********************************************************************************************/
										-- check ranges
										/*********************************************************************************************/
										------------------------------------------------------------
										-- LookupPR9 (	"LOW-RANGE"	to	ZIP2	)
										Set @Factor = (Select Factor
										from dbo.Section3
										where Left(@zip1,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
											AND HiZipCode = @zip2)
										IF @Factor IS NULL
										BEGIN
											------------------------------------------------------------
											-- LookupPR10 (	"LOW-RANGE"	to	ZIP1	)
											Set @Factor = (Select Factor
											from dbo.Section3
											where Left(@zip2,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
												AND HiZipCode = @zip1)
											IF @Factor IS NULL
											BEGIN
												------------------------------------------------------------
												-- LookupPR11 (	"LOW-RANGE"	to	Left(ZIP2,3)	)
												Set @Factor = (Select Factor
												from dbo.Section3
												where Left(@zip1,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
													AND HiZipCode = Left(@zip2,3))
												IF @Factor IS NULL
												BEGIN
													------------------------------------------------------------
													-- LookupPR12 (	"LOW-RANGE"	to	Left(ZIP1,3)	)
													Set @Factor = (Select Factor
													from dbo.Section3
													where Left(@zip2,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
														AND HiZipCode = Left(@zip1,3))
													IF @Factor IS NULL
													BEGIN
														------------------------------------------------------------
														-- LookupPR13 (	ZIP1	to	"HI-RANGE"	)
														Set @Factor = (Select Factor
														from dbo.Section3
														where LowZipCode = @zip1
															AND Left(@zip2,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
														IF @Factor IS NULL
														BEGIN
															------------------------------------------------------------
															-- LookupPR14 (	ZIP2	to	"HI-RANGE"	)
															Set @Factor = (Select Factor
															from dbo.Section3
															where LowZipCode = @zip2
																AND Left(@zip1,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
															IF @Factor IS NULL
															BEGIN
																------------------------------------------------------------
																-- LookupPR15 (	Left(ZIP1,3)	to	"HI-RANGE"	)
																Set @Factor = (Select Factor
																from dbo.Section3
																where LowZipCode = Left(@zip1,3)
																	AND Left(@zip2,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
																IF @Factor IS NULL
																BEGIN
																	------------------------------------------------------------
																	-- LookupPR16 (	Left(ZIP1,3)	to	"HI-RANGE"	)
																	Set @Factor = (Select Factor
																	from dbo.Section3
																	where LowZipCode = Left(@zip2,3)
																		AND Left(@zip1,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
																	IF @Factor IS NULL
																	BEGIN
																		------------------------------------------------------------
																		-- LookupPR17 (	Z1"LOW-RANGE"   to	Z2"HI-RANGE"	)
																		Set @Factor = (Select Factor
																		from dbo.Section3
																		where Left(@zip1,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
																			AND Left(@zip2,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))
																		IF @Factor IS NULL
																		BEGIN
																			------------------------------------------------------------
																			-- LookupPR18 (	Z1"HI-RANGE"   to	Z2"LOW-RANGE"	)
																			Set @Factor = (Select Factor
																			from dbo.Section3
																			where Left(@zip2,3) BETWEEN Left(LowZipCode,3) AND Right(LowZipCode,3)
																				AND Left(@zip1,3) BETWEEN Left(HiZipCode,3) AND Right(HiZipCode,3))

																		END
																	--xP17
																	END
																--xP16
																END
															--xP15
															END
														--xP14
														END
													--xP13
													END
												--xP12
												END
											--xP11
											END
										--xP10
										END
									--xR9
									/*********************************************************************************************/
									-- end of check ranges
									/*********************************************************************************************/
									END
								--x8
								END--x7
							END--x6
						END--x5
					END--x4
				END--x3
			END--x2
		END--x1
	END--IsNull?
	-- Lookup Primary
	/********************************/


	IF (@Factor IS NULL)
	BEGIN
		--PRINT ' Unable to extract factor'
		INSERT INTO @FactorTable
		Values(0)
	-- "Is there.." a DEFAULT FACTOR IF THERE IS NO MATCHING RESULT??
	END
	ELSE
	BEGIN
		INSERT INTO @FactorTable
		Values(@Factor)
	END

	RETURN
END

/*****************************************************************************************/
/*
Use to lookup a pCode range with we have A1A-A2X values on Section3

	Declare @varX char(3) = 'A1D'
	Select * from Section3
	where HiZipCode = 'A1K' and Len(LowZipCode) > 3
	and @varX between LEFT(LowZipCode,3) and RIGHT(LowZIpCode,3)
*/
/*****************************************************************************************/



/*
SELECT Max(Len(LowZipCode)) from dbo.Section3
SELECT * from dbo.Section3 where LEN(LowZipCode) > 3 and LEFT(LowZipCode,1) NOT BETWEEN 'A' and 'Z'

Select * from Section4 where LEN(LowZipCode) > 3

SELECt * from dbo.Section3 where LowZipCode = '594'
SELECt * from dbo.Section3 where LowZipCode = '594 1)'

	Select Factor from dbo.Section3 where (LEFT('L6T4H6',3) between LEFT(HiZipCode,3) and RIGHT(HiZipCode,3))
	AND Left('48198',3) = LowZipCode

*/
--Select * from d83SplitFactor('L6T4H6','48198')
--Select * from d83SplitFactor('48198','047')
go

create function sys.dm_db_database_page_allocations(@DatabaseId smallint, @TableId int, @IndexId int, @PartitionId bigint, @Mode nvarchar(64)) returns table as
-- missing source code
go

create function sys.dm_db_incremental_stats_properties(@object_id int, @stats_id int) returns table as
-- missing source code
go

create function sys.dm_db_index_operational_stats(@DatabaseId smallint, @TableId int, @IndexId int, @PartitionNumber int) returns table as
-- missing source code
go

create function sys.dm_db_index_physical_stats(@DatabaseId smallint, @ObjectId int, @IndexId int, @PartitionNumber int, @Mode nvarchar(20)) returns table as
-- missing source code
go

create function sys.dm_db_log_info(@DatabaseId int) returns table as
-- missing source code
go

create function sys.dm_db_log_stats(@DatabaseId int) returns table as
-- missing source code
go

create function sys.dm_db_missing_index_columns(@handle int) returns table as
-- missing source code
go

create function sys.dm_db_objects_disabled_on_compatibility_level_change(@compatibility_level int) returns table as
-- missing source code
go

create function sys.dm_db_page_info(@DatabaseId smallint, @FileId int, @PageId int, @Mode nvarchar(64)) returns table as
-- missing source code
go

create function sys.dm_db_stats_histogram(@object_id int, @stats_id int) returns table as
-- missing source code
go

create function sys.dm_db_stats_properties(@object_id int, @stats_id int) returns table as
-- missing source code
go

create function sys.dm_db_stats_properties_internal(@object_id int, @stats_id int) returns table as
-- missing source code
go

create function sys.dm_exec_cached_plan_dependent_objects(@planhandle varbinary(64)) returns table as
-- missing source code
go

create function sys.dm_exec_cursors(@spid int) returns table as
-- missing source code
go

create function sys.dm_exec_describe_first_result_set(@tsql nvarchar(max), @params nvarchar(max), @browse_information_mode tinyint) returns table as
-- missing source code
go

create function sys.dm_exec_describe_first_result_set_for_object(@object_id int, @browse_information_mode tinyint) returns table as
-- missing source code
go

create function sys.dm_exec_input_buffer(@session_id smallint, @request_id int) returns table as
-- missing source code
go

create function sys.dm_exec_plan_attributes(@handle varbinary(64)) returns table as
-- missing source code
go

create function sys.dm_exec_query_plan(@handle varbinary(64)) returns table as
-- missing source code
go

create function sys.dm_exec_query_plan_stats(@handle varbinary(64)) returns table as
-- missing source code
go

create function sys.dm_exec_query_statistics_xml(@session_id smallint) returns table as
-- missing source code
go

create function sys.dm_exec_sql_text(@handle varbinary(64)) returns table as
-- missing source code
go

create function sys.dm_exec_text_query_plan(@handle varbinary(64), @stmt_start_offset int, @stmt_end_offset int) returns table as
-- missing source code
go

create function sys.dm_exec_xml_handles(@spid int) returns table as
-- missing source code
go

create function sys.dm_fts_index_keywords(@dbid int, @objid int) returns table as
-- missing source code
go

create function sys.dm_fts_index_keywords_by_document(@dbid int, @objid int) returns table as
-- missing source code
go

create function sys.dm_fts_index_keywords_by_property(@dbid int, @objid int) returns table as
-- missing source code
go

create function sys.dm_fts_index_keywords_position_by_document(@dbid int, @objid int) returns table as
-- missing source code
go

create function sys.dm_fts_parser(@querystring nvarchar(4000), @lcid int, @stoplistid int, @accentsensitive bit) returns table as
-- missing source code
go

create function sys.dm_io_virtual_file_stats(@DatabaseId int, @FileId int) returns table as
-- missing source code
go

create function sys.dm_sql_referenced_entities(@name nvarchar(517), @referencing_class nvarchar(60)) returns table as
-- missing source code
go

create function sys.dm_sql_referencing_entities(@name nvarchar(517), @referenced_class nvarchar(60)) returns table as
-- missing source code
go

create function sys.fn_GetRowsetIdFromRowDump(@rowdump varbinary(max)) returns bigint as
-- missing source code
go

create function sys.fn_PageResCracker(@page_resource binary(8)) returns table as
-- missing source code
go

create function sys.fn_PhysLocCracker(@physical_locator binary(8)) returns table as
-- missing source code
go

create function sys.fn_PhysLocFormatter(@physical_locator binary(8)) returns varchar(128) as
-- missing source code
go

create function sys.fn_RowDumpCracker(@rowdump varbinary(max)) returns table as
-- missing source code
go

create function sys.fn_builtin_permissions(@level nvarchar(60)) returns table as
-- missing source code
go

create function sys.fn_cdc_check_parameters(@capture_instance sysname, @from_lsn binary(10), @to_lsn binary(10), @row_filter_option nvarchar(30), @net_changes bit) returns bit as
-- missing source code
go

create function sys.fn_cdc_get_column_ordinal(@capture_instance sysname, @column_name sysname) returns int as
-- missing source code
go

create function sys.fn_cdc_get_max_lsn() returns binary(10) as
-- missing source code
go

create function sys.fn_cdc_get_min_lsn(@capture_instance sysname) returns binary(10) as
-- missing source code
go

create function sys.fn_cdc_has_column_changed(@capture_instance sysname, @column_name sysname, @update_mask varbinary(128)) returns bit as
-- missing source code
go

create function sys.fn_cdc_hexstrtobin(@hexstr nvarchar(40)) returns binary(10) as
-- missing source code
go

create function sys.fn_cdc_map_lsn_to_time(@lsn binary(10)) returns datetime as
-- missing source code
go

create function sys.fn_cdc_map_time_to_lsn(@relational_operator nvarchar(30), @tracking_time datetime) returns binary(10) as
-- missing source code
go

create function sys.fn_column_store_row_groups(@obj_id bigint) returns table as
-- missing source code
go

create function sys.fn_db_backup_file_snapshots(@database_name sysname) returns table as
-- missing source code
go

create function sys.fn_dblog(@start nvarchar(25), @end nvarchar(25)) returns table as
-- missing source code
go

create function sys.fn_dblog_xtp(@start nvarchar(25), @end nvarchar(25)) returns table as
-- missing source code
go

create function sys.fn_dbslog(@start nvarchar(25), @end nvarchar(25)) returns table as
-- missing source code
go


	CREATE FUNCTION dbo.fn_diagramobjects()
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int
		declare @id_dropdiagram		int
		declare @InstalledObjects	int

		select @InstalledObjects = 0

		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'),
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')

		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128

		return @InstalledObjects
	END
go

deny execute on fn_diagramobjects to guest
go

grant execute on fn_diagramobjects to [public]
go

create function sys.fn_get_audit_file(@file_pattern nvarchar(260), @initial_file_name nvarchar(260), @audit_record_offset bigint) returns table as
-- missing source code
go

create function sys.fn_get_sql(@handle varbinary(64)) returns table as
-- missing source code
go

create function sys.fn_hadr_distributed_ag_database_replica(@lag_id uniqueidentifier, @database_id uniqueidentifier) returns table as
-- missing source code
go

create function sys.fn_hadr_distributed_ag_replica(@lag_id uniqueidentifier, @replica_id uniqueidentifier) returns table as
-- missing source code
go

create function sys.fn_hadr_is_same_replica(@lag_id uniqueidentifier, @lag_replica_id uniqueidentifier, @ag_replica_id uniqueidentifier) returns bit as
-- missing source code
go

create function sys.fn_helpcollations() returns table as
-- missing source code
go

create function sys.fn_is_metrics_xel_caching_enabled(@featureswitch nvarchar(128)) returns bit as
-- missing source code
go

create function sys.fn_listextendedproperty(@name sysname, @level0type varchar(128), @level0name sysname, @level1type varchar(128), @level1name sysname, @level2type varchar(128), @level2name sysname) returns table as
-- missing source code
go

create function sys.fn_my_permissions(@entity sysname, @class nvarchar(60)) returns table as
-- missing source code
go

create function sys.fn_repladjustcolumnmap(@objid int, @total_col int, @inmap varbinary(4000)) returns varbinary(4000) as
-- missing source code
go

create function sys.fn_replreplacesinglequote(@pstrin nvarchar(max)) returns nvarchar(max) as
-- missing source code
go

create function sys.fn_replreplacesinglequoteplusprotectstring(@pstrin nvarchar(4000)) returns nvarchar(4000) as
-- missing source code
go

create function sys.fn_repluniquename(@guid uniqueidentifier, @prefix1 sysname, @prefix2 sysname, @prefix3 sysname, @prefix4 sysname) returns nvarchar(100) as
-- missing source code
go

create function sys.fn_replvarbintoint(@varbin varbinary(32)) returns int as
-- missing source code
go

create function sys.fn_sqlvarbasetostr(@ssvar sql_variant) returns nvarchar(max) as
-- missing source code
go

create function sys.fn_stmt_sql_handle_from_sql_stmt(@query_sql_text nvarchar(max), @query_param_type tinyint) returns table as
-- missing source code
go

create function sys.fn_translate_permissions(@level nvarchar(60), @perms varbinary(16)) returns table as
-- missing source code
go

create function sys.fn_validate_plan_guide(@plan_guide_id int) returns table as
-- missing source code
go

create function sys.fn_varbintohexstr(@pbinin varbinary(max)) returns nvarchar(max) as
-- missing source code
go

create function sys.fn_varbintohexsubstring(@fsetprefix bit, @pbinin varbinary(max), @startoffset int, @cbytesin int) returns nvarchar(max) as
-- missing source code
go

create function sys.fn_virtualfilestats(@DatabaseId int, @FileId int) returns table as
-- missing source code
go

create function sys.fn_xe_file_target_read_file(@path nvarchar(260), @mdpath nvarchar(260), @initial_file_name nvarchar(260), @initial_offset bigint) returns table as
-- missing source code
go

create function sys.fn_xe_telemetry_blob_target_read_file(@prefix nvarchar(260), @mdpath nvarchar(260), @initial_file_name nvarchar(260), @initial_offset bigint) returns table as
-- missing source code
go


CREATE FUNCTION [dbo].[getD83SPLIT] (		@orig_Zip varchar(7), @intl_Zip varchar(7), @dest_Zip varchar(7), @revenue decimal(11,2)	)
RETURNS @SplitPercents TABLE (
	Percent1 decimal(8,5),
	Percent2 decimal(8,5)) AS
BEGIN

	Declare @factor1 decimal(9,2), @factor2 decimal(9,2)
	Declare @Plus30FactorOrig decimal(9,2)-- Plus30Factor Origin to Interchange
	Declare @Plus30FactorDest decimal(9,2)-- Plus30Factor Interchange to Destination
	Declare @Plus10FactorOrig decimal(9,2)-- Plus10Factor
	Declare @Plus10FactorDest decimal(9,2)-- Plus10Factor
	Declare @splitPercent1 decimal(8,5), @splitPercent2 decimal(8,5)
	Declare @revenue1 decimal(11,2), @revenue2 decimal(11,2)
	Declare @revenue1MIN decimal(11,2), @revenue2MIN decimal(11,2)
	Declare @IsMinimumSplit bit = 0
	Declare @IsFactor1Priority bit = 0

	SET @factor1 = (Select Factor
	FROM dbo.d83SplitFactor(@orig_Zip, @intl_Zip))
	-- Get [FACTOR1]		(Origin to Intl)
	SET @factor2 = (Select Factor
	FROM dbo.d83SplitFactor(@intl_Zip, @dest_Zip))
	-- Get [FACTOR2]		(Intl to Destination)

	-- If @f1 or @f2 is 0...return ZEROS...
	IF NOT (ISNULL(@factor1,0) = 0 OR ISNULL(@factor2,0) = 0)
	BEGIN

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		-- Check "Plus30"
		Select @Plus30FactorOrig = IsNull(Plus30FactorOrig,0.00)
			, @Plus30FactorDest = ISNULL(Plus30FactorDest,0.00)
		FROM dbo.d83CheckPlus30Factor(@orig_Zip, @intl_Zip, @dest_Zip)

		If @Plus30FactorOrig > 0
		BEGIN
			SET @factor1 = @factor1 + @Plus30FactorOrig
		END

		If @Plus30FactorDest > 0
		BEGIN
			SET @factor2 = @factor2 + @Plus30FactorDest
		END




		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		-- CHECK FOR "PLUS FACTORS"...before calculating splits....
		/*
			If
		*/
		Select @Plus10FactorOrig = PlusFactor1, @Plus10FactorDest = PlusFactor2
		FROM dbo.d83CheckPlusFactor(@orig_Zip, @intl_Zip, @dest_Zip)


		-- Only check Plus10 (if Plus30 is not already applied...)
		If (@Plus30FactorOrig= 0.00 AND @Plus10FactorOrig > 0)
		BEGIN
			--Destination/Interchange are zips;      Origin is Cdn prov.
			--SET @factor1 = @factor1 + IsNull(	(Select PlusFactor FROM dbo.d83CheckPlusFactor(@intl_Zip, @orig_Zip, @dest_Zip))	,0.00)
			SET @factor1 = @factor1 + @Plus10FactorOrig
		END


		IF (@Plus30FactorDest = 0.00 AND @Plus10FactorDest > 0)
		BEGIN
			--Origin /Interchange are zips;     Destination is Cdn prov.
			--SET @factor2 = @factor2 + IsNull(	(Select PlusFactor FROM dbo.d83CheckPlusFactor(@intl_Zip, @dest_Zip, @orig_Zip))	,0.00)
			SET @factor2 = @factor2 + @Plus10FactorDest
		END

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/




		/*****************************************************************************************************/
		-- CALCULATE SPLITS
		IF (@factor1 < @factor2)
			BEGIN
			Set @IsFactor1Priority = 1
			Set @splitPercent1 = (@factor1 / (@factor1 + @factor2)) * 100
			Set @splitPercent2 = 100 - @splitPercent1
		END
			ELSE
			BEGIN
			Set @IsFactor1Priority = 0
			Set @splitPercent2 = (@factor2 / (@factor1 + @factor2)) * 100
			Set @splitPercent1 = 100 - @splitPercent2
		END

		SET @revenue1 = @revenue * @splitPercent1 / Cast(100 As decimal(5,2))
		SET @revenue2 = @revenue * @splitPercent2 / Cast(100 As decimal(5,2))
		/*****************************************************************************************************/

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		-- CHECK FOR MINIMUMS...
		SET @revenue1MIN = (SELECT MinFactorRevenue
		FROM dbo.d83CheckMinimums(@orig_Zip))
		-- Get [FACTOR1]		(Origin to Intl)
		SET @revenue2MIN = (SELECt MinFactorRevenue
		FROM dbo.d83CheckMinimums(@dest_Zip))
		-- Get [FACTOR2]		(Intl to Destination)
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		IF (	(@revenue1MIN + @revenue2MIN) > @revenue	)			-- IF Minimums exceed total revenue..split 50%/50%
		BEGIN
			SET @splitPercent1 = 50
			SET @splitPercent2 = 50
		END
		ELSE
		BEGIN
			IF
			(
				@revenue1MIN > @revenue1
				OR
				@revenue1MIN > (CAST(@splitPercent1 as decimal(3,0))	/ 100	* @revenue)
			)
			BEGIN
				SET @splitPercent1 = (@revenue1MIN / @revenue) * 100
				SET @splitPercent2 = 100 - @splitPercent1
				SET @IsMinimumSplit = 1
			END
			ELSE IF
			(
				@revenue2MIN > @revenue2
				OR
				@revenue2MIN > (CAST(@splitPercent2 as decimal(3,0))	/ 100	* @revenue)
			)
			BEGIN
				SET @splitPercent2 = (@revenue2MIN / @revenue) * 100
				SET @splitPercent1 = 100 - @splitPercent2
				SET @IsMinimumSplit = 1
			END
		END

		-- Only when we have a minimum split do we need to pass back the precision of the "PERCENT SPLIT"
		-- ...otherwise simply round the splits up to whole percentages (e.g. 57/43)
		IF (@IsMinimumSplit = 0)
		BEGIN
			-- Round split percents to whole percentages.
			If (@IsFactor1Priority = 1)
			BEGIN
				SET @splitPercent1 = CAST(@splitPercent1 as decimal(3,0))
				Set @splitPercent2 = 100 - @splitPercent1
			END
			ELSE
			BEGIN
				SET @splitPercent2 = CAST(@splitPercent2 as decimal(3,0))
				SET @splitPercent1 = 100 - @splitPercent2
			END
		END


		INSERT INTO @SplitPercents
		VALUES(@splitPercent1, @splitPercent2)
	-- If the minimums exceed the available revenue...split 50/50...
	END
	ELSE
	BEGIN
		INSERT INTO @SplitPercents
		VALUES(0, 0)
	-- If the minimums exceed the available revenue...split 50/50...
	END
	RETURN
END
go

create procedure sys.sp_MSacquiresnapshotdeliverysessionlock() as
-- missing source code
go

create procedure sys.sp_MSaddsubscriptionarticles(@publisher sysname, @publisher_db sysname, @publication sysname, @artid int, @article sysname, @dest_table sysname, @dest_owner sysname) as
-- missing source code
go

create procedure sys.sp_MScdc_capture_job() as
-- missing source code
go

create procedure sys.sp_MScdc_cleanup_job() as
-- missing source code
go

create procedure sys.sp_MScdc_db_ddl_event(@EventData xml) as
-- missing source code
go

create procedure sys.sp_MScdc_ddl_event(@EventData xml) as
-- missing source code
go

create procedure sys.sp_MScdc_logddl(@source_object_id int, @ddl_command nvarchar(max), @ddl_lsn binary(10), @ddl_time nvarchar(1000), @commit_lsn binary(10), @source_column_id int, @fis_alter_column bit, @fis_drop_table bit) as
-- missing source code
go

create procedure sys.sp_MScheck_subscription(@publication sysname, @pub_type int, @publisher sysname) as
-- missing source code
go

create procedure sys.sp_MSclearresetpartialsnapshotprogressbit(@agent_id int) as
-- missing source code
go

create procedure sys.sp_MScreate_sub_tables(@tran_sub_table bit, @property_table bit, @sqlqueue_table bit, @subscription_articles_table bit, @p2p_table bit) as
-- missing source code
go

create procedure sys.sp_MScreatedisabledmltrigger(@source_object sysname, @source_owner sysname) as
-- missing source code
go

create procedure sys.sp_MSdefer_check(@objname sysname, @objowner sysname) as
-- missing source code
go

create procedure sys.sp_MSdistributoravailable() as
-- missing source code
go

create procedure sys.sp_MSdroparticleconstraints(@destination_object sysname, @destination_owner sysname) as
-- missing source code
go

create procedure sys.sp_MSdropfkreferencingarticle(@destination_object_name sysname, @destination_owner_name sysname) as
-- missing source code
go

create procedure sys.sp_MSensure_single_instance(@application_name sysname, @agent_type int) as
-- missing source code
go

create procedure sys.sp_MSget_attach_state(@publisher sysname, @publisher_db sysname, @publication sysname, @subscription_type int) as
-- missing source code
go

create procedure sys.sp_MSget_last_transaction(@publisher_id int, @publisher_db sysname, @publisher sysname, @max_xact_seqno varbinary(16), @for_truncate bit) as
-- missing source code
go

create procedure sys.sp_MSgetlastupdatedtime(@publisher sysname, @publisher_db sysname, @publication sysname, @subscription_type int, @publication_type int) as
-- missing source code
go

create procedure sys.sp_MSgrantconnectreplication(@user_name sysname) as
-- missing source code
go

create procedure sys.sp_MShelp_identity_property(@tablename sysname, @ownername sysname) as
-- missing source code
go

create procedure sys.sp_MSinit_subscription_agent(@publisher sysname, @publisher_db sysname, @publication sysname, @subscription_type int) as
-- missing source code
go

create procedure sys.sp_MSissnapshotitemapplied(@snapshot_session_token nvarchar(260), @snapshot_progress_token nvarchar(500)) as
-- missing source code
go

create procedure sys.sp_MSquery_syncstates(@publisher_id smallint, @publisher_db sysname) as
-- missing source code
go

create procedure sys.sp_MSrecordsnapshotdeliveryprogress(@snapshot_session_token nvarchar(260), @snapshot_progress_token nvarchar(500)) as
-- missing source code
go

create procedure sys.sp_MSreenable_check(@objname sysname, @objowner sysname) as
-- missing source code
go

create procedure sys.sp_MSregisterdynsnapseqno(@snapshot_session_token nvarchar(260), @dynsnapseqno uniqueidentifier) as
-- missing source code
go

create procedure sys.sp_MSregistersubscription(@replication_type int, @publisher sysname, @publisher_db sysname, @publisher_security_mode int, @publisher_login sysname, @publisher_password nvarchar(524), @publication sysname, @subscriber sysname, @subscriber_db sysname, @subscriber_security_mode int, @subscriber_login sysname, @subscriber_password nvarchar(524), @distributor sysname, @distributor_security_mode int, @distributor_login sysname, @distributor_password nvarchar(524), @subscription_id uniqueidentifier, @independent_agent int, @subscription_type int, @use_interactive_resolver int, @failover_mode int, @use_web_sync bit, @hostname sysname) as
-- missing source code
go

create procedure sys.sp_MSreinit_failed_subscriptions(@failure_level int) as
-- missing source code
go

create procedure sys.sp_MSreleasesnapshotdeliverysessionlock() as
-- missing source code
go

create procedure sys.sp_MSrepl_init_backup_lsns() as
-- missing source code
go

create procedure sys.sp_MSrepl_raiserror(@agent sysname, @agent_name nvarchar(100), @status int, @message nvarchar(255), @subscriber sysname, @publication sysname, @article sysname) as
-- missing source code
go

create procedure sys.sp_MSrepl_setNFR(@schema sysname, @object_name sysname) as
-- missing source code
go

create procedure sys.sp_MSreplcheck_subscribe() as
-- missing source code
go

create procedure sys.sp_MSreplcheck_subscribe_withddladmin() as
-- missing source code
go

create procedure sys.sp_MSreplraiserror(@errorid int, @param1 sysname, @param2 sysname, @param3 int) as
-- missing source code
go

create procedure sys.sp_MSreplupdateschema(@object_name nvarchar(517)) as
-- missing source code
go

create procedure sys.sp_MSreset_attach_state(@publisher sysname, @publisher_db sysname, @publication sysname, @subscription_type int) as
-- missing source code
go

create procedure sys.sp_MSreset_synctran_bit(@owner sysname, @table sysname) as
-- missing source code
go

create procedure sys.sp_MSresetsnapshotdeliveryprogress(@snapshot_session_token nvarchar(260)) as
-- missing source code
go

create procedure sys.sp_MSrestoresavedforeignkeys(@program_name sysname) as
-- missing source code
go

create procedure sys.sp_MSscript_sync_del_trig(@objid int, @publisher sysname, @publisher_db sysname, @publication sysname, @trigname sysname, @procname sysname, @proc_owner sysname, @cftproc sysname, @agent_id int, @identity_col sysname, @ts_col sysname, @filter_clause nvarchar(4000), @primary_key_bitmap varbinary(4000), @pubversion int, @falter bit) as
-- missing source code
go

create procedure sys.sp_MSscript_sync_ins_trig(@objid int, @publisher sysname, @publisher_db sysname, @publication sysname, @trigname sysname, @procname sysname, @proc_owner sysname, @cftproc sysname, @agent_id int, @identity_col sysname, @ts_col sysname, @filter_clause nvarchar(4000), @primary_key_bitmap varbinary(4000), @pubversion int, @falter bit) as
-- missing source code
go

create procedure sys.sp_MSscript_sync_upd_trig(@objid int, @publisher sysname, @publisher_db sysname, @publication sysname, @trigname sysname, @procname sysname, @proc_owner sysname, @cftproc sysname, @agent_id int, @identity_col sysname, @ts_col sysname, @filter_clause nvarchar(4000), @primary_key_bitmap varbinary(4000), @pubversion int, @falter bit) as
-- missing source code
go

create procedure sys.sp_MSscriptforeignkeyrestore(@program_name sysname, @constraint_name sysname, @parent_schema sysname, @parent_name sysname, @referenced_object_schema sysname, @referenced_object_name sysname, @is_not_for_replication bit, @is_not_trusted bit, @delete_referential_action tinyint, @update_referential_action tinyint) as
-- missing source code
go

create procedure sys.sp_MSset_sub_guid(@publisher sysname, @publisher_db sysname, @publication sysname, @subscription_type int, @subscription_guid binary(16), @queue_id sysname, @queue_server sysname) as
-- missing source code
go

create procedure sys.sp_MSset_subscription_properties(@publisher sysname, @publisher_db sysname, @publication sysname, @subscription_type int, @allow_subscription_copy bit, @queue_id sysname, @update_mode int, @attach_version binary(16), @queue_server sysname) as
-- missing source code
go

create procedure sys.sp_MSsub_set_identity(@objid int, @threshold int, @range bigint, @next_seed bigint) as
-- missing source code
go

create procedure sys.sp_MStran_ddlrepl(@EventData xml, @procmapid int) as
-- missing source code
go

create procedure sys.sp_MStran_is_snapshot_required(@publisher sysname, @publisher_db sysname, @publication sysname, @subscriber sysname, @subscriber_db sysname, @subscription_type int, @run_at_distributor bit, @last_xact_seqno varbinary(16), @subscription_guid varbinary(16), @subid varbinary(16)) as
-- missing source code
go

create procedure sys.sp_MStrypurgingoldsnapshotdeliveryprogress() as
-- missing source code
go

create procedure sys.sp_MSunregistersubscription(@publisher sysname, @publisher_db sysname, @publication sysname, @subscriber sysname, @subscriber_db sysname) as
-- missing source code
go

create procedure sys.sp_MSupdatelastsyncinfo(@publisher sysname, @publisher_db sysname, @publication sysname, @subscription_type int, @last_sync_status int, @last_sync_summary sysname) as
-- missing source code
go

create procedure sys.sp_add_columnstore_column_dictionary(@table_id int, @column_id int) as
-- missing source code
go

create procedure sys.sp_add_trusted_assembly() as
-- missing source code
go

create procedure sys.sp_addapprole(@rolename sysname, @password sysname) as
-- missing source code
go

create procedure sys.sp_addextendedproperty(@name sysname, @value sql_variant, @level0type varchar(128), @level0name sysname, @level1type varchar(128), @level1name sysname, @level2type varchar(128), @level2name sysname) as
-- missing source code
go

create procedure sys.sp_addrole(@rolename sysname, @ownername sysname) as
-- missing source code
go

create procedure sys.sp_addrolemember(@rolename sysname, @membername sysname) as
-- missing source code
go

create procedure sys.sp_addscriptexec(@publication sysname, @scriptfile nvarchar(4000), @skiperror bit, @publisher sysname) as
-- missing source code
go

create procedure sys.sp_addtype(@typename sysname, @phystype sysname, @nulltype varchar(8), @owner sysname) as
-- missing source code
go


	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int

		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int

		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end

		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;

		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname

		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end

		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end

		-- update dds data
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;

		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;

		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;

		return 0
	END
go

deny execute on sp_alterdiagram to guest
go

grant execute on sp_alterdiagram to [public]
go

create procedure sys.sp_approlepassword(@rolename sysname, @newpwd sysname) as
-- missing source code
go

create procedure sys.sp_assemblies_rowset(@assembly_name sysname, @assembly_schema sysname, @assembly_id int) as
-- missing source code
go

create procedure sys.sp_assemblies_rowset2(@assembly_schema sysname, @assembly_id int) as
-- missing source code
go

create procedure sys.sp_assemblies_rowset_rmt(@server_name sysname, @catalog_name sysname, @assembly_name sysname, @assembly_schema sysname, @assembly_id int) as
-- missing source code
go

create procedure sys.sp_assembly_dependencies_rowset(@assembly_id int, @assembly_schema sysname, @assembly_referenced int) as
-- missing source code
go

create procedure sys.sp_assembly_dependencies_rowset2(@assembly_schema sysname, @assembly_referenced int) as
-- missing source code
go

create procedure sys.sp_assembly_dependencies_rowset_rmt(@server sysname, @catalog sysname, @assembly_id int, @assembly_schema sysname, @assembly_referenced int) as
-- missing source code
go

create procedure sys.sp_autostats(@tblname nvarchar(776), @flagc varchar(10), @indname sysname) as
-- missing source code
go

create procedure sys.sp_bcp_dbcmptlevel(@dbname sysname) as
-- missing source code
go

create procedure sys.sp_begin_parallel_nested_tran() as
-- missing source code
go

create procedure sys.sp_bindefault(@defname nvarchar(776), @objname nvarchar(776), @futureonly varchar(15)) as
-- missing source code
go

create procedure sys.sp_bindrule(@rulename nvarchar(776), @objname nvarchar(776), @futureonly varchar(15)) as
-- missing source code
go

create procedure sys.sp_bindsession() as
-- missing source code
go

create procedure sys.sp_build_histogram() as
-- missing source code
go

create procedure sys.sp_catalogs(@server_name sysname) as
-- missing source code
go

create procedure sys.sp_catalogs_rowset(@catalog_name sysname) as
-- missing source code
go

create procedure sys.sp_catalogs_rowset2() as
-- missing source code
go

create procedure sys.sp_catalogs_rowset_rmt(@server_name sysname, @catalog_name sysname) as
-- missing source code
go

create procedure sys.sp_cdc_add_job(@job_type nvarchar(20), @start_job bit, @maxtrans int, @maxscans int, @continuous bit, @pollinginterval bigint, @retention bigint, @threshold bigint, @check_for_logreader bit) as
-- missing source code
go

create procedure sys.sp_cdc_change_job(@job_type nvarchar(20), @maxtrans int, @maxscans int, @continuous bit, @pollinginterval bigint, @retention bigint, @threshold bigint) as
-- missing source code
go

create procedure sys.sp_cdc_cleanup_change_table(@capture_instance sysname, @low_water_mark binary(10), @threshold bigint) as
-- missing source code
go

create procedure sys.sp_cdc_dbsnapshotLSN(@db_snapshot sysname, @lastLSN binary(10), @lastLSNstr varchar(40)) as
-- missing source code
go

create procedure sys.sp_cdc_disable_db() as
-- missing source code
go

create procedure sys.sp_cdc_disable_table(@source_schema sysname, @source_name sysname, @capture_instance sysname) as
-- missing source code
go

create procedure sys.sp_cdc_drop_job(@job_type nvarchar(20)) as
-- missing source code
go

create procedure sys.sp_cdc_enable_db() as
-- missing source code
go

create procedure sys.sp_cdc_enable_table(@source_schema sysname, @source_name sysname, @capture_instance sysname, @supports_net_changes bit, @role_name sysname, @index_name sysname, @captured_column_list nvarchar(max), @filegroup_name sysname, @allow_partition_switch bit, @enable_extended_ddl_handling bit) as
-- missing source code
go

create procedure sys.sp_cdc_generate_wrapper_function(@capture_instance sysname, @closed_high_end_point bit, @column_list nvarchar(max), @update_flag_list nvarchar(max)) as
-- missing source code
go

create procedure sys.sp_cdc_get_captured_columns(@capture_instance sysname) as
-- missing source code
go

create procedure sys.sp_cdc_get_ddl_history(@capture_instance sysname) as
-- missing source code
go

create procedure sys.sp_cdc_help_change_data_capture(@source_schema sysname, @source_name sysname) as
-- missing source code
go

create procedure sys.sp_cdc_help_jobs() as
-- missing source code
go

create procedure sys.sp_cdc_restoredb(@srv_orig sysname, @db_orig sysname, @keep_cdc int) as
-- missing source code
go

create procedure sys.sp_cdc_scan(@maxtrans int, @maxscans int, @continuous tinyint, @pollinginterval bigint, @is_from_job int) as
-- missing source code
go

create procedure sys.sp_cdc_vupgrade() as
-- missing source code
go

create procedure sys.sp_cdc_vupgrade_databases(@db_id int) as
-- missing source code
go

create procedure sys.sp_change_tracking_waitforchanges() as
-- missing source code
go

create procedure sys.sp_changereplicationserverpasswords(@login_type tinyint, @login nvarchar(257), @password sysname, @server sysname) as
-- missing source code
go

create procedure sys.sp_changesubstatus(@publication sysname, @article sysname, @subscriber sysname, @status sysname, @previous_status sysname, @destination_db sysname, @frequency_type int, @frequency_interval int, @frequency_relative_interval int, @frequency_recurrence_factor int, @frequency_subday int, @frequency_subday_interval int, @active_start_time_of_day int, @active_end_time_of_day int, @active_start_date int, @active_end_date int, @optional_command_line nvarchar(4000), @distribution_jobid binary(16), @from_auto_sync bit, @ignore_distributor bit, @offloadagent bit, @offloadserver sysname, @dts_package_name sysname, @dts_package_password nvarchar(524), @dts_package_location int, @skipobjectactivation int, @distribution_job_name sysname, @publisher sysname, @ignore_distributor_failure bit) as
-- missing source code
go

create procedure sys.sp_check_constbytable_rowset(@table_name sysname, @table_schema sysname, @constraint_name sysname, @constraint_schema sysname) as
-- missing source code
go

create procedure sys.sp_check_constbytable_rowset2(@table_schema sysname, @constraint_name sysname, @constraint_schema sysname) as
-- missing source code
go

create procedure sys.sp_check_constraints_rowset(@constraint_name sysname, @constraint_schema sysname) as
-- missing source code
go

create procedure sys.sp_check_constraints_rowset2(@constraint_schema sysname) as
-- missing source code
go

create procedure sys.sp_check_for_sync_trigger(@tabid int, @trigger_op char(10), @fonpublisher bit) as
-- missing source code
go

create procedure sys.sp_check_sync_trigger(@trigger_procid int, @trigger_op char(10), @owner sysname) as
-- missing source code
go

create procedure sys.sp_clean_db_file_free_space(@dbname sysname, @fileid int, @cleaning_delay int) as
-- missing source code
go

create procedure sys.sp_clean_db_free_space(@dbname sysname, @cleaning_delay int) as
-- missing source code
go

create procedure sys.sp_cleanup_temporal_history(@schema_name sysname, @table_name sysname, @rowcount int) as
-- missing source code
go

create procedure sys.sp_cloud_connection_set_sds() as
-- missing source code
go

create procedure sys.sp_cloud_impersonate_user() as
-- missing source code
go

create procedure sys.sp_cloud_notify_dw_event() as
-- missing source code
go

create procedure sys.sp_cloud_upgrade_in_post_sterling_migration() as
-- missing source code
go

create procedure sys.sp_cloud_upgrade_partition_from_v1() as
-- missing source code
go

create procedure sys.sp_column_privileges(@table_name sysname, @table_owner sysname, @table_qualifier sysname, @column_name nvarchar(384)) as
-- missing source code
go

create procedure sys.sp_column_privileges_ex(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_column_privileges_rowset(@table_name sysname, @table_schema sysname, @column_name sysname, @grantor sysname, @grantee sysname) as
-- missing source code
go

create procedure sys.sp_column_privileges_rowset2(@table_schema sysname, @column_name sysname, @grantor sysname, @grantee sysname) as
-- missing source code
go

create procedure sys.sp_column_privileges_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @table_schema sysname, @column_name sysname, @grantor sysname, @grantee sysname) as
-- missing source code
go

create procedure sys.sp_columns(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @column_name nvarchar(384), @ODBCVer int) as
-- missing source code
go

create procedure sys.sp_columns_100(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @column_name nvarchar(384), @NameScope int, @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_columns_100_rowset(@table_name sysname, @table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_columns_100_rowset2(@table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_columns_90(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @column_name nvarchar(384), @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_columns_90_rowset(@table_name sysname, @table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_columns_90_rowset2(@table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_columns_90_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_columns_ex(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname, @column_name sysname, @ODBCVer int) as
-- missing source code
go

create procedure sys.sp_columns_ex_100(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname, @column_name sysname, @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_columns_ex_90(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname, @column_name sysname, @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_columns_managed(@Catalog sysname, @Owner sysname, @Table sysname, @Column sysname, @SchemaType sysname) as
-- missing source code
go

create procedure sys.sp_columns_rowset(@table_name sysname, @table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_columns_rowset2(@table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_columns_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_commit_parallel_nested_tran() as
-- missing source code
go

create procedure sys.sp_configure_automatic_tuning() as
-- missing source code
go

create procedure sys.sp_constr_col_usage_rowset(@table_name sysname, @table_schema sysname, @column_name sysname, @constr_catalog sysname, @constr_schema sysname, @constr_name sysname) as
-- missing source code
go

create procedure sys.sp_constr_col_usage_rowset2(@table_schema sysname, @column_name sysname, @constr_catalog sysname, @constr_schema sysname, @constr_name sysname) as
-- missing source code
go

create procedure sys.sp_control_plan_guide(@operation nvarchar(60), @name sysname) as
-- missing source code
go

create procedure sys.sp_create_plan_guide(@name sysname, @stmt nvarchar(max), @type nvarchar(60), @module_or_batch nvarchar(max), @params nvarchar(max), @hints nvarchar(max)) as
-- missing source code
go

create procedure sys.sp_create_plan_guide_from_handle(@name sysname, @plan_handle varbinary(64), @statement_start_offset int) as
-- missing source code
go


	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null,
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end

		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert;

		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end

		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;

		select @retval = @@IDENTITY
		return @retval
	END
go

deny execute on sp_creatediagram to guest
go

grant execute on sp_creatediagram to [public]
go

create procedure sys.sp_createorphan() as
-- missing source code
go

create procedure sys.sp_createstats(@indexonly char(9), @fullscan char(9), @norecompute char(12), @incremental char(12)) as
-- missing source code
go

create procedure sys.sp_cursor() as
-- missing source code
go

create procedure sys.sp_cursor_list(@cursor_scope int) returns int as
-- missing source code
go

create procedure sys.sp_cursorclose() as
-- missing source code
go

create procedure sys.sp_cursorexecute() as
-- missing source code
go

create procedure sys.sp_cursorfetch() as
-- missing source code
go

create procedure sys.sp_cursoropen() as
-- missing source code
go

create procedure sys.sp_cursoroption() as
-- missing source code
go

create procedure sys.sp_cursorprepare() as
-- missing source code
go

create procedure sys.sp_cursorprepexec() as
-- missing source code
go

create procedure sys.sp_cursorunprepare() as
-- missing source code
go

create procedure sys.sp_data_pool_database_query_state(@db_name sysname, @database_state sysname) as
-- missing source code
go

create procedure sys.sp_data_pool_table_query_state(@pool_name sysname, @db_name sysname, @schema_name sysname, @table_name sysname, @table_state sysname) as
-- missing source code
go

create procedure sys.sp_databases() as
-- missing source code
go

create procedure sys.sp_datatype_info(@data_type int, @ODBCVer tinyint) as
-- missing source code
go

create procedure sys.sp_datatype_info_100(@data_type int, @ODBCVer tinyint) as
-- missing source code
go

create procedure sys.sp_datatype_info_90(@data_type int, @ODBCVer tinyint) as
-- missing source code
go

create procedure sys.sp_db_ebcdic277_2(@dbname sysname, @status varchar(6)) as
-- missing source code
go

create procedure sys.sp_db_increased_partitions(@dbname sysname, @increased_partitions varchar(6)) as
-- missing source code
go

create procedure sys.sp_db_selective_xml_index(@dbname sysname, @selective_xml_index varchar(6)) as
-- missing source code
go

create procedure sys.sp_ddopen(@handle int, @procname sysname, @scrollopt int, @ccopt int, @rows int, @p1 nvarchar(774), @p2 nvarchar(774), @p3 nvarchar(774), @p4 nvarchar(774), @p5 nvarchar(774), @p6 nvarchar(774), @p7 int, @NameScope int, @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_delete_database_firewall_rule() as
-- missing source code
go

create procedure sys.sp_delete_firewall_rule() as
-- missing source code
go

create procedure sys.sp_depends(@objname nvarchar(776)) as
-- missing source code
go

create procedure sys.sp_describe_cursor(@cursor_source nvarchar(30), @cursor_identity nvarchar(128)) returns int as
-- missing source code
go

create procedure sys.sp_describe_cursor_columns(@cursor_source nvarchar(30), @cursor_identity nvarchar(128)) returns int as
-- missing source code
go

create procedure sys.sp_describe_cursor_tables(@cursor_source nvarchar(30), @cursor_identity nvarchar(128)) returns int as
-- missing source code
go

create procedure sys.sp_describe_first_result_set() as
-- missing source code
go

create procedure sys.sp_describe_parameter_encryption() as
-- missing source code
go

create procedure sys.sp_describe_undeclared_parameters() as
-- missing source code
go

create procedure sys.sp_diagnostic_showplan_log_dbid() as
-- missing source code
go

create procedure sys.sp_drop_trusted_assembly() as
-- missing source code
go

create procedure sys.sp_dropapprole(@rolename sysname) as
-- missing source code
go


	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int

		declare @UIDFound 		int
		declare @DiagId			int

		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end

		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;

		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end

		delete from dbo.sysdiagrams where diagram_id = @DiagId;

		return 0;
	END
go

deny execute on sp_dropdiagram to guest
go

grant execute on sp_dropdiagram to [public]
go

create procedure sys.sp_dropextendedproperty(@name sysname, @level0type varchar(128), @level0name sysname, @level1type varchar(128), @level1name sysname, @level2type varchar(128), @level2name sysname) as
-- missing source code
go

create procedure sys.sp_droporphans() as
-- missing source code
go

create procedure sys.sp_droprole(@rolename sysname) as
-- missing source code
go

create procedure sys.sp_droprolemember(@rolename sysname, @membername sysname) as
-- missing source code
go

create procedure sys.sp_droptype(@typename sysname) as
-- missing source code
go

create procedure sys.sp_enable_sql_debug() as
-- missing source code
go

create procedure sys.sp_enclave_send_keys() as
-- missing source code
go

create procedure sys.sp_estimate_data_compression_savings(@schema_name sysname, @object_name sysname, @index_id int, @partition_number int, @data_compression nvarchar(60)) as
-- missing source code
go

create procedure sys.sp_estimated_rowsize_reduction_for_vardecimal(@table_name nvarchar(776)) as
-- missing source code
go

create procedure sys.sp_execute() as
-- missing source code
go

create procedure sys.sp_execute_external_script() as
-- missing source code
go

create procedure sys.sp_execute_global_tran() as
-- missing source code
go

create procedure sys.sp_execute_remote() as
-- missing source code
go

create procedure sys.sp_executesql() as
-- missing source code
go

create procedure sys.sp_fido_build_histogram() as
-- missing source code
go

create procedure sys.sp_fkeys(@pktable_name sysname, @pktable_owner sysname, @pktable_qualifier sysname, @fktable_name sysname, @fktable_owner sysname, @fktable_qualifier sysname) as
-- missing source code
go

create procedure sys.sp_flush_CT_internal_table_on_demand(@TableToClean sysname, @DeletedRowCount bigint) as
-- missing source code
go

create procedure sys.sp_flush_commit_table(@flush_ts bigint, @cleanup_version bigint) as
-- missing source code
go

create procedure sys.sp_flush_commit_table_on_demand(@numrows bigint, @deleted_rows bigint, @date_cleanedup datetime, @cleanup_ts bigint) as
-- missing source code
go

create procedure sys.sp_flush_log() as
-- missing source code
go

create procedure sys.sp_force_slog_truncation() as
-- missing source code
go

create procedure sys.sp_foreign_keys_rowset(@pk_table_name sysname, @pk_table_schema sysname, @foreignkey_tab_name sysname, @foreignkey_tab_schema sysname, @foreignkey_tab_catalog sysname) as
-- missing source code
go

create procedure sys.sp_foreign_keys_rowset2(@foreignkey_tab_name sysname, @foreignkey_tab_schema sysname, @pk_table_name sysname, @pk_table_schema sysname, @pk_table_catalog sysname) as
-- missing source code
go

create procedure sys.sp_foreign_keys_rowset3(@pk_table_schema sysname, @pk_table_catalog sysname, @foreignkey_tab_schema sysname, @foreignkey_tab_catalog sysname) as
-- missing source code
go

create procedure sys.sp_foreign_keys_rowset_rmt(@server_name sysname, @pk_table_name sysname, @pk_table_schema sysname, @pk_table_catalog sysname, @foreignkey_tab_name sysname, @foreignkey_tab_schema sysname, @foreignkey_tab_catalog sysname) as
-- missing source code
go

create procedure sys.sp_foreignkeys(@table_server sysname, @pktab_name sysname, @pktab_schema sysname, @pktab_catalog sysname, @fktab_name sysname, @fktab_schema sysname, @fktab_catalog sysname) as
-- missing source code
go

create procedure sys.sp_fulltext_catalog(@ftcat sysname, @action varchar(20), @path nvarchar(101)) as
-- missing source code
go

create procedure sys.sp_fulltext_column(@tabname nvarchar(517), @colname sysname, @action varchar(20), @language int, @type_colname sysname) as
-- missing source code
go

create procedure sys.sp_fulltext_database(@action varchar(20)) as
-- missing source code
go

create procedure sys.sp_fulltext_getdata() as
-- missing source code
go

create procedure sys.sp_fulltext_keymappings() as
-- missing source code
go

create procedure sys.sp_fulltext_pendingchanges() as
-- missing source code
go

create procedure sys.sp_fulltext_service(@action nvarchar(100), @value sql_variant) as
-- missing source code
go

create procedure sys.sp_fulltext_table(@tabname nvarchar(517), @action varchar(50), @ftcat sysname, @keyname sysname) as
-- missing source code
go

create procedure sys.sp_get_jobs_database_scoped_credential() as
-- missing source code
go

create procedure sys.sp_get_query_template() as
-- missing source code
go

create procedure sys.sp_getapplock(@Resource nvarchar(255), @LockMode varchar(32), @LockOwner varchar(32), @LockTimeout int, @DbPrincipal sysname) as
-- missing source code
go

create procedure sys.sp_getbindtoken() as
-- missing source code
go

create procedure sys.sp_getschemalock() as
-- missing source code
go

create procedure sys.sp_help(@objname nvarchar(776)) as
-- missing source code
go

create procedure sys.sp_help_fulltext_catalog_components() as
-- missing source code
go

create procedure sys.sp_help_fulltext_catalogs(@fulltext_catalog_name sysname) as
-- missing source code
go

create procedure sys.sp_help_fulltext_catalogs_cursor(@fulltext_catalog_name sysname) returns int as
-- missing source code
go

create procedure sys.sp_help_fulltext_columns(@table_name nvarchar(517), @column_name sysname) as
-- missing source code
go

create procedure sys.sp_help_fulltext_columns_cursor(@table_name nvarchar(517), @column_name sysname) returns int as
-- missing source code
go

create procedure sys.sp_help_fulltext_system_components(@component_type sysname, @param sysname) as
-- missing source code
go

create procedure sys.sp_help_fulltext_tables(@fulltext_catalog_name sysname, @table_name nvarchar(517)) as
-- missing source code
go

create procedure sys.sp_help_fulltext_tables_cursor(@fulltext_catalog_name sysname, @table_name nvarchar(517)) returns int as
-- missing source code
go

create procedure sys.sp_help_spatial_geography_histogram(@tabname sysname, @colname sysname, @resolution int, @sample float) as
-- missing source code
go

create procedure sys.sp_help_spatial_geography_index(@tabname nvarchar(776), @indexname sysname, @verboseoutput tinyint, @query_sample geography) as
-- missing source code
go

create procedure sys.sp_help_spatial_geography_index_xml(@tabname nvarchar(776), @indexname sysname, @verboseoutput tinyint, @query_sample geography, @xml_output xml) as
-- missing source code
go

create procedure sys.sp_help_spatial_geometry_histogram(@tabname sysname, @colname sysname, @resolution int, @xmin float, @ymin float, @xmax float, @ymax float, @sample float) as
-- missing source code
go

create procedure sys.sp_help_spatial_geometry_index(@tabname nvarchar(776), @indexname sysname, @verboseoutput tinyint, @query_sample geometry) as
-- missing source code
go

create procedure sys.sp_help_spatial_geometry_index_xml(@tabname nvarchar(776), @indexname sysname, @verboseoutput tinyint, @query_sample geometry, @xml_output xml) as
-- missing source code
go

create procedure sys.sp_helpconstraint(@objname nvarchar(776), @nomsg varchar(5)) as
-- missing source code
go

create procedure sys.sp_helpdb(@dbname sysname) as
-- missing source code
go

create procedure sys.sp_helpdbfixedrole(@rolename sysname) as
-- missing source code
go

create procedure sys.sp_helpdevice(@devname sysname) as
-- missing source code
go


	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int

		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end

		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;

		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end

		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ;
		return 0
	END
go

deny execute on sp_helpdiagramdefinition to guest
go

grant execute on sp_helpdiagramdefinition to [public]
go


	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END
go

deny execute on sp_helpdiagrams to guest
go

grant execute on sp_helpdiagrams to [public]
go

create procedure sys.sp_helpextendedproc(@funcname sysname) as
-- missing source code
go

create procedure sys.sp_helpfile(@filename sysname) as
-- missing source code
go

create procedure sys.sp_helpfilegroup(@filegroupname sysname) as
-- missing source code
go

create procedure sys.sp_helpindex(@objname nvarchar(776)) as
-- missing source code
go

create procedure sys.sp_helplanguage(@language sysname) as
-- missing source code
go

create procedure sys.sp_helplinkedsrvlogin(@rmtsrvname sysname, @locallogin sysname) as
-- missing source code
go

create procedure sys.sp_helpremotelogin(@remoteserver sysname, @remotename sysname) as
-- missing source code
go

create procedure sys.sp_helpreplicationdboption(@dbname sysname, @type sysname, @reserved bit) as
-- missing source code
go

create procedure sys.sp_helprole(@rolename sysname) as
-- missing source code
go

create procedure sys.sp_helpserver(@server sysname, @optname varchar(35), @show_topology varchar) as
-- missing source code
go

create procedure sys.sp_helpsort() as
-- missing source code
go

create procedure sys.sp_helpstats(@objname nvarchar(776), @results nvarchar(5)) as
-- missing source code
go

create procedure sys.sp_helpsubscription(@publication sysname, @article sysname, @subscriber sysname, @destination_db sysname, @found int, @publisher sysname) as
-- missing source code
go

create procedure sys.sp_helptext(@objname nvarchar(776), @columnname sysname) as
-- missing source code
go

create procedure sys.sp_helptrigger(@tabname nvarchar(776), @triggertype char(6)) as
-- missing source code
go

create procedure sys.sp_identitycolumnforreplication(@object_id int, @value bit) as
-- missing source code
go

create procedure sys.sp_indexcolumns_managed(@Catalog sysname, @Owner sysname, @Table sysname, @ConstraintName sysname, @Column sysname) as
-- missing source code
go

create procedure sys.sp_indexes(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname, @index_name sysname, @is_unique bit) as
-- missing source code
go

create procedure sys.sp_indexes_100_rowset(@table_name sysname, @index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexes_100_rowset2(@index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexes_90_rowset(@table_name sysname, @index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexes_90_rowset2(@index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexes_90_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexes_managed(@Catalog sysname, @Owner sysname, @Table sysname, @Name sysname) as
-- missing source code
go

create procedure sys.sp_indexes_rowset(@table_name sysname, @index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexes_rowset2(@index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexes_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @index_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_indexoption(@IndexNamePattern nvarchar(1035), @OptionName varchar(35), @OptionValue varchar(12)) as
-- missing source code
go

create procedure sys.sp_invalidate_textptr(@TextPtrValue varbinary(16)) as
-- missing source code
go

create procedure sys.sp_is_columnstore_column_dictionary_enabled(@table_id int, @column_id int, @is_enabled bit) as
-- missing source code
go

create procedure sys.sp_ivindexhasnullcols(@viewname sysname, @fhasnullcols bit) as
-- missing source code
go

create procedure sys.sp_kill_oldest_transaction_on_secondary(@database_name sysname, @kill_all bit, @killed_xdests bigint) as
-- missing source code
go

create procedure sys.sp_link_publication(@publisher sysname, @publisher_db sysname, @publication sysname, @security_mode int, @login sysname, @password sysname, @distributor sysname) as
-- missing source code
go

create procedure sys.sp_lock(@spid1 int, @spid2 int) as
-- missing source code
go

create procedure sys.sp_marksubscriptionvalidation(@publication sysname, @subscriber sysname, @destination_db sysname, @publisher sysname) as
-- missing source code
go

create procedure sys.sp_memory_optimized_cs_migration(@object_id int) as
-- missing source code
go

create procedure sys.sp_metadata_sync_connector_add(@unique_name varchar(max), @type varchar(20), @jdbc_connection_url nvarchar(max), @driver_name nvarchar(max), @username nvarchar(max), @password nvarchar(max), @max_retry_count tinyint, @retry_interval_ms int, @sql_command_timeout_sec smallint, @sync_interval_sec smallint, @mappings_json nvarchar(max)) as
-- missing source code
go

create procedure sys.sp_metadata_sync_connector_drop(@unique_name varchar(max)) as
-- missing source code
go

create procedure sys.sp_metadata_sync_connectors_status(@unique_name varchar(max)) as
-- missing source code
go

create procedure sys.sp_new_parallel_nested_tran_id() as
-- missing source code
go

create procedure sys.sp_objectfilegroup(@objid int) as
-- missing source code
go

create procedure sys.sp_oledb_database() as
-- missing source code
go

create procedure sys.sp_oledb_defdb() as
-- missing source code
go

create procedure sys.sp_oledb_deflang() as
-- missing source code
go

create procedure sys.sp_oledb_language() as
-- missing source code
go

create procedure sys.sp_oledb_ro_usrname() as
-- missing source code
go

create procedure sys.sp_persistent_version_cleanup(@dbname sysname, @scanallpages bit, @clean_option int) as
-- missing source code
go

create procedure sys.sp_pkeys(@table_name sysname, @table_owner sysname, @table_qualifier sysname) as
-- missing source code
go

create procedure sys.sp_polybase_authorize() as
-- missing source code
go

create procedure sys.sp_polybase_join_group() as
-- missing source code
go

create procedure sys.sp_polybase_leave_group() as
-- missing source code
go

create procedure sys.sp_prepare() as
-- missing source code
go

create procedure sys.sp_prepexec() as
-- missing source code
go

create procedure sys.sp_prepexecrpc() as
-- missing source code
go

create procedure sys.sp_primary_keys_rowset(@table_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_primary_keys_rowset2(@table_schema sysname) as
-- missing source code
go

create procedure sys.sp_primary_keys_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_primarykeys(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_100_managed(@procedure_name sysname, @group_number int, @procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_100_rowset(@procedure_name sysname, @group_number int, @procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_100_rowset2(@procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_90_rowset(@procedure_name sysname, @group_number int, @procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_90_rowset2(@procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_managed(@procedure_name sysname, @group_number int, @procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_rowset(@procedure_name sysname, @group_number int, @procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedure_params_rowset2(@procedure_schema sysname, @parameter_name sysname) as
-- missing source code
go

create procedure sys.sp_procedures_rowset(@procedure_name sysname, @group_number int, @procedure_schema sysname) as
-- missing source code
go

create procedure sys.sp_procedures_rowset2(@procedure_schema sysname) as
-- missing source code
go

create procedure sys.sp_procoption(@ProcName nvarchar(776), @OptionName varchar(35), @OptionValue varchar(12)) as
-- missing source code
go

create procedure sys.sp_provider_types_100_rowset(@data_type smallint, @best_match tinyint) as
-- missing source code
go

create procedure sys.sp_provider_types_90_rowset(@data_type smallint, @best_match tinyint) as
-- missing source code
go

create procedure sys.sp_provider_types_rowset(@data_type smallint, @best_match tinyint) as
-- missing source code
go

create procedure sys.sp_query_store_consistency_check() as
-- missing source code
go

create procedure sys.sp_query_store_flush_db() as
-- missing source code
go

create procedure sys.sp_query_store_force_plan() as
-- missing source code
go

create procedure sys.sp_query_store_remove_plan() as
-- missing source code
go

create procedure sys.sp_query_store_remove_query() as
-- missing source code
go

create procedure sys.sp_query_store_reset_exec_stats() as
-- missing source code
go

create procedure sys.sp_query_store_unforce_plan() as
-- missing source code
go

create procedure sys.sp_recompile(@objname nvarchar(776)) as
-- missing source code
go

create procedure sys.sp_refresh_parameter_encryption(@name nvarchar(776), @namespace nvarchar(20)) as
-- missing source code
go

create procedure sys.sp_refresh_single_snapshot_view(@view_name nvarchar(261), @rgCode int) as
-- missing source code
go

create procedure sys.sp_refresh_snapshot_views(@rgCode int) as
-- missing source code
go

create procedure sys.sp_refreshsqlmodule(@name nvarchar(776), @namespace nvarchar(20)) as
-- missing source code
go

create procedure sys.sp_refreshview(@viewname nvarchar(776)) as
-- missing source code
go

create procedure sys.sp_releaseapplock(@Resource nvarchar(255), @LockOwner varchar(32), @DbPrincipal sysname) as
-- missing source code
go

create procedure sys.sp_releaseschemalock() as
-- missing source code
go

create procedure sys.sp_remote_data_archive_event() as
-- missing source code
go

create procedure sys.sp_remove_columnstore_column_dictionary(@table_id int, @column_id int) as
-- missing source code
go

create procedure sys.sp_removedbreplication(@dbname sysname, @type nvarchar(5)) as
-- missing source code
go

create procedure sys.sp_removesrvreplication() as
-- missing source code
go

create procedure sys.sp_rename(@objname nvarchar(1035), @newname sysname, @objtype varchar(13)) as
-- missing source code
go


	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname

	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int

		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end

		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;

		select @u_name = USER_NAME(@owner_id)

		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end

		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;

		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname

		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end

		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END
go

deny execute on sp_renamediagram to guest
go

grant execute on sp_renamediagram to [public]
go

create procedure sys.sp_repl_generate_subscriber_event() as
-- missing source code
go

create procedure sys.sp_repl_generate_sync_status_event() as
-- missing source code
go

create procedure sys.sp_replgetparsedddlcmd(@ddlcmd nvarchar(max), @FirstToken sysname, @objectType sysname, @dbname sysname, @owner sysname, @objname sysname, @targetobject nvarchar(512)) as
-- missing source code
go

create procedure sys.sp_replicationdboption(@dbname sysname, @optname sysname, @value sysname, @ignore_distributor bit, @from_scripting bit) as
-- missing source code
go

create procedure sys.sp_replpostsyncstatus(@pubid int, @artid int, @syncstat int, @xact_seqno binary(10)) as
-- missing source code
go

create procedure sys.sp_replrethrow() as
-- missing source code
go

create procedure sys.sp_replwritetovarbin() as
-- missing source code
go

create procedure sys.sp_reset_connection() as
-- missing source code
go

create procedure sys.sp_reset_session_context() as
-- missing source code
go

create procedure sys.sp_resetsnapshotdeliveryprogress(@verbose_level int, @drop_table nvarchar(5)) as
-- missing source code
go

create procedure sys.sp_resyncexecute() as
-- missing source code
go

create procedure sys.sp_resyncexecutesql() as
-- missing source code
go

create procedure sys.sp_resyncprepare() as
-- missing source code
go

create procedure sys.sp_resyncuniquetable() as
-- missing source code
go

create procedure sys.sp_rollback_parallel_nested_tran() as
-- missing source code
go

create procedure sys.sp_schemata_rowset(@schema_name sysname, @schema_owner sysname) as
-- missing source code
go

create procedure sys.sp_sequence_get_range(@sequence_name nvarchar(776), @range_size bigint, @range_first_value sql_variant, @range_last_value sql_variant, @range_cycle_count int, @sequence_increment sql_variant, @sequence_min_value sql_variant, @sequence_max_value sql_variant) as
-- missing source code
go

create procedure sys.sp_server_info(@attribute_id int) as
-- missing source code
go

create procedure sys.sp_set_database_firewall_rule() as
-- missing source code
go

create procedure sys.sp_set_distributed_query_context() as
-- missing source code
go

create procedure sys.sp_set_firewall_rule() as
-- missing source code
go

create procedure sys.sp_set_session_context() as
-- missing source code
go

create procedure sys.sp_setapprole(@rolename sysname, @password sysname, @encrypt varchar(10), @fCreateCookie bit, @cookie varbinary(8000)) as
-- missing source code
go

create procedure sys.sp_setsubscriptionxactseqno(@publisher sysname, @publisher_db sysname, @publication sysname, @xact_seqno varbinary(16)) as
-- missing source code
go

create procedure sys.sp_settriggerorder(@triggername nvarchar(517), @order varchar(10), @stmttype varchar(50), @namespace varchar(10)) as
-- missing source code
go

create procedure sys.sp_showinitialmemo_xml() as
-- missing source code
go

create procedure sys.sp_showmemo_xml() as
-- missing source code
go

create procedure sys.sp_sm_detach() as
-- missing source code
go

create procedure sys.sp_spaceused(@objname nvarchar(776), @updateusage varchar(5), @mode varchar(11), @oneresultset bit, @include_total_xtp_storage bit) as
-- missing source code
go

create procedure sys.sp_sparse_columns_100_rowset(@table_name sysname, @table_schema sysname, @column_name sysname, @schema_type int) as
-- missing source code
go

create procedure sys.sp_special_columns(@table_name sysname, @table_owner sysname, @table_qualifier sysname, @col_type char, @scope char, @nullable char, @ODBCVer int) as
-- missing source code
go

create procedure sys.sp_special_columns_100(@table_name sysname, @table_owner sysname, @table_qualifier sysname, @col_type char, @scope char, @nullable char, @ODBCVer int) as
-- missing source code
go

create procedure sys.sp_special_columns_90(@table_name sysname, @table_owner sysname, @table_qualifier sysname, @col_type char, @scope char, @nullable char, @ODBCVer int) as
-- missing source code
go

create procedure sys.sp_sproc_columns(@procedure_name nvarchar(390), @procedure_owner nvarchar(384), @procedure_qualifier sysname, @column_name nvarchar(384), @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_sproc_columns_100(@procedure_name nvarchar(390), @procedure_owner nvarchar(384), @procedure_qualifier sysname, @column_name nvarchar(384), @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_sproc_columns_90(@procedure_name nvarchar(390), @procedure_owner nvarchar(384), @procedure_qualifier sysname, @column_name nvarchar(384), @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_sqlexec(@p1 text) as
-- missing source code
go

create procedure sys.sp_sqljdbc_xa_install() as
-- missing source code
go

create procedure sys.sp_sqljdbc_xa_uninstall() as
-- missing source code
go

create procedure sys.sp_startpushsubscription_agent(@publication sysname, @subscriber sysname, @subscriber_db sysname, @publisher sysname) as
-- missing source code
go

create procedure sys.sp_statistics(@table_name sysname, @table_owner sysname, @table_qualifier sysname, @index_name sysname, @is_unique char, @accuracy char) as
-- missing source code
go

create procedure sys.sp_statistics_100(@table_name sysname, @table_owner sysname, @table_qualifier sysname, @index_name sysname, @is_unique char, @accuracy char) as
-- missing source code
go

create procedure sys.sp_statistics_rowset(@table_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_statistics_rowset2(@table_schema sysname) as
-- missing source code
go

create procedure sys.sp_stored_procedures(@sp_name nvarchar(390), @sp_owner nvarchar(384), @sp_qualifier sysname, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_subscription_cleanup(@publisher sysname, @publisher_db sysname, @publication sysname, @reserved nvarchar(10), @from_backup bit) as
-- missing source code
go

create procedure sys.sp_table_constraints_rowset(@table_name sysname, @table_schema sysname, @table_catalog sysname, @constraint_name sysname, @constraint_schema sysname, @constraint_catalog sysname, @constraint_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_table_constraints_rowset2(@table_schema sysname, @table_catalog sysname, @constraint_name sysname, @constraint_schema sysname, @constraint_catalog sysname, @constraint_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_table_privileges(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_table_privileges_ex(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_table_privileges_rowset(@table_name sysname, @table_schema sysname, @grantor sysname, @grantee sysname) as
-- missing source code
go

create procedure sys.sp_table_privileges_rowset2(@table_schema sysname, @grantor sysname, @grantee sysname) as
-- missing source code
go

create procedure sys.sp_table_privileges_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @table_schema sysname, @grantor sysname, @grantee sysname) as
-- missing source code
go

create procedure sys.sp_table_statistics2_rowset(@table_name sysname, @table_schema sysname, @table_catalog sysname, @stat_name sysname, @stat_schema sysname, @stat_catalog sysname) as
-- missing source code
go

create procedure sys.sp_table_statistics_rowset(@table_name_dummy sysname) as
-- missing source code
go

create procedure sys.sp_table_type_columns_100(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @column_name nvarchar(384), @ODBCVer int, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_table_type_columns_100_rowset(@table_name sysname, @table_schema sysname, @column_name sysname) as
-- missing source code
go

create procedure sys.sp_table_type_pkeys(@table_name sysname, @table_owner sysname, @table_qualifier sysname) as
-- missing source code
go

create procedure sys.sp_table_type_primary_keys_rowset(@table_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_table_types(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @table_type varchar(100), @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_table_types_rowset(@table_name sysname, @table_schema sysname) as
-- missing source code
go

create procedure sys.sp_table_validation(@table sysname, @expected_rowcount bigint, @expected_checksum numeric, @rowcount_only smallint, @owner sysname, @full_or_fast tinyint, @shutdown_agent bit, @table_name sysname, @column_list nvarchar(max)) as
-- missing source code
go

create procedure sys.sp_tablecollations(@object nvarchar(4000)) as
-- missing source code
go

create procedure sys.sp_tablecollations_100(@object nvarchar(4000)) as
-- missing source code
go

create procedure sys.sp_tablecollations_90(@object nvarchar(4000)) as
-- missing source code
go

create procedure sys.sp_tableoption(@TableNamePattern nvarchar(776), @OptionName varchar(35), @OptionValue varchar(12)) as
-- missing source code
go

create procedure sys.sp_tables(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @table_type varchar(100), @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_tables_ex(@table_server sysname, @table_name sysname, @table_schema sysname, @table_catalog sysname, @table_type sysname, @fUsePattern bit) as
-- missing source code
go

create procedure sys.sp_tables_info_90_rowset(@table_name sysname, @table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_info_90_rowset2(@table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_info_90_rowset2_64(@table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_info_90_rowset_64(@table_name sysname, @table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_info_rowset(@table_name sysname, @table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_info_rowset2(@table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_info_rowset2_64(@table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_info_rowset_64(@table_name sysname, @table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_rowset(@table_name sysname, @table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_rowset2(@table_schema sysname, @table_type nvarchar(255)) as
-- missing source code
go

create procedure sys.sp_tables_rowset_rmt(@table_server sysname, @table_catalog sysname, @table_name sysname, @table_schema sysname, @table_type sysname) as
-- missing source code
go

create procedure sys.sp_tableswc(@table_name nvarchar(384), @table_owner nvarchar(384), @table_qualifier sysname, @table_type varchar(100), @fUsePattern bit, @fTableCreated bit) as
-- missing source code
go

create procedure sys.sp_trace_generateevent() as
-- missing source code
go

create procedure sys.sp_try_set_session_context() as
-- missing source code
go

create procedure sys.sp_unbindefault(@objname nvarchar(776), @futureonly varchar(15)) as
-- missing source code
go

create procedure sys.sp_unbindrule(@objname nvarchar(776), @futureonly varchar(15)) as
-- missing source code
go

create procedure sys.sp_unprepare() as
-- missing source code
go

create procedure sys.sp_unsetapprole(@cookie varbinary(8000)) as
-- missing source code
go

create procedure sys.sp_update_iq_object_version() as
-- missing source code
go

create procedure sys.sp_updateextendedproperty(@name sysname, @value sql_variant, @level0type varchar(128), @level0name sysname, @level1type varchar(128), @level1name sysname, @level2type varchar(128), @level2name sysname) as
-- missing source code
go

create procedure sys.sp_updatestats(@resample char(8)) as
-- missing source code
go


	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;

		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,

			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);


		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/

		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]

			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_'
			return 2;
		end
		return 1;
	END
go

create procedure sys.sp_user_counter1(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter10(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter2(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter3(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter4(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter5(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter6(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter7(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter8(@newvalue int) as
-- missing source code
go

create procedure sys.sp_user_counter9(@newvalue int) as
-- missing source code
go

create procedure sys.sp_usertypes_rowset(@type_name sysname, @type_schema sysname) as
-- missing source code
go

create procedure sys.sp_usertypes_rowset2(@type_schema sysname) as
-- missing source code
go

create procedure sys.sp_usertypes_rowset_rmt(@type_server sysname, @type_catalog sysname, @type_name sysname, @type_schema sysname, @assembly_id int) as
-- missing source code
go

create procedure sys.sp_validlang(@name sysname) as
-- missing source code
go

create procedure sys.sp_validname(@name sysname, @raise_error bit) as
-- missing source code
go

create procedure sys.sp_views_rowset(@view_name sysname, @view_schema sysname) as
-- missing source code
go

create procedure sys.sp_views_rowset2(@view_schema sysname) as
-- missing source code
go

create procedure sys.sp_vupgrade_replication(@login sysname, @password sysname, @ver_old int, @force_remove tinyint, @security_mode bit, @db_id int) as
-- missing source code
go

create procedure sys.sp_wait_for_database_copy_sync() as
-- missing source code
go

create procedure sys.sp_who(@loginame sysname) as
-- missing source code
go

create procedure sys.sp_who2(@loginame sysname) as
-- missing source code
go

create procedure sys.sp_xa_commit() as
-- missing source code
go

create procedure sys.sp_xa_end() as
-- missing source code
go

create procedure sys.sp_xa_forget() as
-- missing source code
go

create procedure sys.sp_xa_forget_ex() as
-- missing source code
go

create procedure sys.sp_xa_init() as
-- missing source code
go

create procedure sys.sp_xa_init_ex() as
-- missing source code
go

create procedure sys.sp_xa_prepare() as
-- missing source code
go

create procedure sys.sp_xa_prepare_ex() as
-- missing source code
go

create procedure sys.sp_xa_recover() as
-- missing source code
go

create procedure sys.sp_xa_rollback() as
-- missing source code
go

create procedure sys.sp_xa_rollback_ex() as
-- missing source code
go

create procedure sys.sp_xa_start() as
-- missing source code
go

create procedure sys.sp_xml_preparedocument() as
-- missing source code
go

create procedure sys.sp_xml_removedocument() as
-- missing source code
go

create procedure sys.sp_xml_schema_rowset(@collection_name sysname, @schema_name sysname, @target_namespace sysname) as
-- missing source code
go

create procedure sys.sp_xml_schema_rowset2(@schema_name sysname, @target_namespace sysname) as
-- missing source code
go

create procedure sys.sp_xtp_bind_db_resource_pool(@database_name sysname, @pool_name sysname) as
-- missing source code
go

create procedure sys.sp_xtp_checkpoint_force_garbage_collection(@dbname sysname) as
-- missing source code
go

create procedure sys.sp_xtp_control_proc_exec_stats(@new_collection_value bit, @old_collection_value bit) as
-- missing source code
go

create procedure sys.sp_xtp_control_query_exec_stats(@new_collection_value bit, @database_id int, @xtp_object_id int, @old_collection_value bit) as
-- missing source code
go

create procedure sys.sp_xtp_flush_temporal_history(@schema_name sysname, @object_name sysname) as
-- missing source code
go

create procedure sys.sp_xtp_kill_active_transactions(@database_name sysname) as
-- missing source code
go

create procedure sys.sp_xtp_merge_checkpoint_files(@database_name sysname, @transaction_lower_bound bigint, @transaction_upper_bound bigint) as
-- missing source code
go

create procedure sys.sp_xtp_objects_present(@database_name sysname, @xtp_objects_present bit) as
-- missing source code
go

create procedure sys.sp_xtp_set_memory_quota(@database_name sysname, @target_user_memory_quota bigint) as
-- missing source code
go

create procedure sys.sp_xtp_slo_can_downgrade(@database_name sysname, @xtp_can_downgrade bit) as
-- missing source code
go

create procedure sys.sp_xtp_slo_downgrade_finished(@database_name sysname, @result bit) as
-- missing source code
go

create procedure sys.sp_xtp_slo_prepare_to_downgrade(@database_name sysname, @xtp_can_downgrade bit) as
-- missing source code
go

create procedure sys.sp_xtp_unbind_db_resource_pool(@database_name sysname) as
-- missing source code
go

create procedure sys.xp_replposteor() as
-- missing source code
go

